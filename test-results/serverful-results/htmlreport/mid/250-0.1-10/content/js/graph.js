/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 551.0, "minX": 0.0, "maxY": 382950.0, "series": [{"data": [[0.0, 551.0], [0.1, 552.0], [0.2, 552.0], [0.3, 552.0], [0.4, 554.0], [0.5, 844.0], [0.6, 911.0], [0.7, 1150.0], [0.8, 1199.0], [0.9, 1214.0], [1.0, 1277.0], [1.1, 1318.0], [1.2, 1378.0], [1.3, 1574.0], [1.4, 1916.0], [1.5, 2671.0], [1.6, 2672.0], [1.7, 2740.0], [1.8, 2793.0], [1.9, 2793.0], [2.0, 2927.0], [2.1, 3013.0], [2.2, 3053.0], [2.3, 3053.0], [2.4, 3054.0], [2.5, 3071.0], [2.6, 3071.0], [2.7, 3114.0], [2.8, 3114.0], [2.9, 3117.0], [3.0, 3120.0], [3.1, 3128.0], [3.2, 3131.0], [3.3, 3188.0], [3.4, 3191.0], [3.5, 3215.0], [3.6, 3217.0], [3.7, 3304.0], [3.8, 3356.0], [3.9, 3373.0], [4.0, 3424.0], [4.1, 3425.0], [4.2, 3425.0], [4.3, 3425.0], [4.4, 3426.0], [4.5, 3492.0], [4.6, 3510.0], [4.7, 3561.0], [4.8, 3566.0], [4.9, 3704.0], [5.0, 4381.0], [5.1, 7827.0], [5.2, 10842.0], [5.3, 11860.0], [5.4, 14598.0], [5.5, 16249.0], [5.6, 17323.0], [5.7, 19165.0], [5.8, 19181.0], [5.9, 19191.0], [6.0, 19200.0], [6.1, 19205.0], [6.2, 19205.0], [6.3, 19210.0], [6.4, 19210.0], [6.5, 19210.0], [6.6, 19220.0], [6.7, 19223.0], [6.8, 19223.0], [6.9, 19223.0], [7.0, 19223.0], [7.1, 19226.0], [7.2, 19228.0], [7.3, 19229.0], [7.4, 19229.0], [7.5, 19231.0], [7.6, 19232.0], [7.7, 19232.0], [7.8, 19233.0], [7.9, 19234.0], [8.0, 19235.0], [8.1, 19235.0], [8.2, 19235.0], [8.3, 19241.0], [8.4, 19242.0], [8.5, 19244.0], [8.6, 19249.0], [8.7, 19251.0], [8.8, 19260.0], [8.9, 19262.0], [9.0, 19267.0], [9.1, 19269.0], [9.2, 19270.0], [9.3, 19271.0], [9.4, 19277.0], [9.5, 19289.0], [9.6, 19433.0], [9.7, 19621.0], [9.8, 20233.0], [9.9, 20235.0], [10.0, 20236.0], [10.1, 20248.0], [10.2, 20252.0], [10.3, 20254.0], [10.4, 20255.0], [10.5, 20260.0], [10.6, 20261.0], [10.7, 20267.0], [10.8, 20270.0], [10.9, 20275.0], [11.0, 20276.0], [11.1, 20277.0], [11.2, 20285.0], [11.3, 20301.0], [11.4, 20318.0], [11.5, 20318.0], [11.6, 20331.0], [11.7, 20333.0], [11.8, 20337.0], [11.9, 20533.0], [12.0, 21013.0], [12.1, 21015.0], [12.2, 21020.0], [12.3, 21021.0], [12.4, 21023.0], [12.5, 21023.0], [12.6, 21023.0], [12.7, 21023.0], [12.8, 21025.0], [12.9, 21025.0], [13.0, 21026.0], [13.1, 21026.0], [13.2, 21026.0], [13.3, 21026.0], [13.4, 21027.0], [13.5, 21027.0], [13.6, 21028.0], [13.7, 21028.0], [13.8, 21029.0], [13.9, 21029.0], [14.0, 21029.0], [14.1, 21029.0], [14.2, 21029.0], [14.3, 21029.0], [14.4, 21029.0], [14.5, 21029.0], [14.6, 21030.0], [14.7, 21030.0], [14.8, 21030.0], [14.9, 21031.0], [15.0, 21031.0], [15.1, 21031.0], [15.2, 21031.0], [15.3, 21031.0], [15.4, 21032.0], [15.5, 21032.0], [15.6, 21032.0], [15.7, 21032.0], [15.8, 21032.0], [15.9, 21032.0], [16.0, 21033.0], [16.1, 21033.0], [16.2, 21033.0], [16.3, 21033.0], [16.4, 21033.0], [16.5, 21033.0], [16.6, 21033.0], [16.7, 21034.0], [16.8, 21034.0], [16.9, 21034.0], [17.0, 21034.0], [17.1, 21034.0], [17.2, 21034.0], [17.3, 21035.0], [17.4, 21035.0], [17.5, 21035.0], [17.6, 21035.0], [17.7, 21035.0], [17.8, 21035.0], [17.9, 21035.0], [18.0, 21036.0], [18.1, 21036.0], [18.2, 21036.0], [18.3, 21036.0], [18.4, 21036.0], [18.5, 21036.0], [18.6, 21036.0], [18.7, 21036.0], [18.8, 21036.0], [18.9, 21036.0], [19.0, 21037.0], [19.1, 21037.0], [19.2, 21037.0], [19.3, 21037.0], [19.4, 21037.0], [19.5, 21037.0], [19.6, 21037.0], [19.7, 21037.0], [19.8, 21037.0], [19.9, 21037.0], [20.0, 21038.0], [20.1, 21038.0], [20.2, 21038.0], [20.3, 21038.0], [20.4, 21038.0], [20.5, 21038.0], [20.6, 21038.0], [20.7, 21038.0], [20.8, 21038.0], [20.9, 21038.0], [21.0, 21038.0], [21.1, 21038.0], [21.2, 21039.0], [21.3, 21039.0], [21.4, 21039.0], [21.5, 21039.0], [21.6, 21039.0], [21.7, 21039.0], [21.8, 21039.0], [21.9, 21039.0], [22.0, 21039.0], [22.1, 21039.0], [22.2, 21039.0], [22.3, 21040.0], [22.4, 21040.0], [22.5, 21040.0], [22.6, 21040.0], [22.7, 21040.0], [22.8, 21040.0], [22.9, 21040.0], [23.0, 21040.0], [23.1, 21040.0], [23.2, 21040.0], [23.3, 21040.0], [23.4, 21040.0], [23.5, 21041.0], [23.6, 21041.0], [23.7, 21041.0], [23.8, 21041.0], [23.9, 21041.0], [24.0, 21041.0], [24.1, 21041.0], [24.2, 21042.0], [24.3, 21042.0], [24.4, 21042.0], [24.5, 21042.0], [24.6, 21042.0], [24.7, 21042.0], [24.8, 21042.0], [24.9, 21042.0], [25.0, 21042.0], [25.1, 21042.0], [25.2, 21042.0], [25.3, 21043.0], [25.4, 21043.0], [25.5, 21043.0], [25.6, 21043.0], [25.7, 21043.0], [25.8, 21043.0], [25.9, 21043.0], [26.0, 21043.0], [26.1, 21043.0], [26.2, 21044.0], [26.3, 21044.0], [26.4, 21044.0], [26.5, 21044.0], [26.6, 21044.0], [26.7, 21045.0], [26.8, 21045.0], [26.9, 21045.0], [27.0, 21045.0], [27.1, 21045.0], [27.2, 21045.0], [27.3, 21045.0], [27.4, 21045.0], [27.5, 21045.0], [27.6, 21045.0], [27.7, 21045.0], [27.8, 21046.0], [27.9, 21046.0], [28.0, 21046.0], [28.1, 21046.0], [28.2, 21046.0], [28.3, 21046.0], [28.4, 21046.0], [28.5, 21047.0], [28.6, 21047.0], [28.7, 21047.0], [28.8, 21047.0], [28.9, 21047.0], [29.0, 21047.0], [29.1, 21047.0], [29.2, 21048.0], [29.3, 21048.0], [29.4, 21048.0], [29.5, 21048.0], [29.6, 21048.0], [29.7, 21048.0], [29.8, 21048.0], [29.9, 21048.0], [30.0, 21049.0], [30.1, 21049.0], [30.2, 21049.0], [30.3, 21049.0], [30.4, 21050.0], [30.5, 21050.0], [30.6, 21051.0], [30.7, 21051.0], [30.8, 21051.0], [30.9, 21051.0], [31.0, 21051.0], [31.1, 21051.0], [31.2, 21052.0], [31.3, 21053.0], [31.4, 21053.0], [31.5, 21053.0], [31.6, 21054.0], [31.7, 21055.0], [31.8, 21055.0], [31.9, 21056.0], [32.0, 21056.0], [32.1, 21058.0], [32.2, 21058.0], [32.3, 21058.0], [32.4, 21060.0], [32.5, 21062.0], [32.6, 21881.0], [32.7, 22308.0], [32.8, 22348.0], [32.9, 22349.0], [33.0, 22352.0], [33.1, 22356.0], [33.2, 22360.0], [33.3, 22360.0], [33.4, 22361.0], [33.5, 22362.0], [33.6, 22362.0], [33.7, 22363.0], [33.8, 22363.0], [33.9, 22363.0], [34.0, 22365.0], [34.1, 22366.0], [34.2, 22367.0], [34.3, 22368.0], [34.4, 22373.0], [34.5, 22374.0], [34.6, 22377.0], [34.7, 22378.0], [34.8, 22379.0], [34.9, 22382.0], [35.0, 22386.0], [35.1, 22895.0], [35.2, 23974.0], [35.3, 24194.0], [35.4, 24520.0], [35.5, 24555.0], [35.6, 25129.0], [35.7, 25595.0], [35.8, 25704.0], [35.9, 26328.0], [36.0, 26328.0], [36.1, 26329.0], [36.2, 26344.0], [36.3, 26345.0], [36.4, 26365.0], [36.5, 26367.0], [36.6, 26372.0], [36.7, 26373.0], [36.8, 26381.0], [36.9, 26383.0], [37.0, 26385.0], [37.1, 26387.0], [37.2, 26391.0], [37.3, 26410.0], [37.4, 26418.0], [37.5, 26421.0], [37.6, 26427.0], [37.7, 27223.0], [37.8, 28875.0], [37.9, 29990.0], [38.0, 30279.0], [38.1, 30760.0], [38.2, 31538.0], [38.3, 31906.0], [38.4, 32427.0], [38.5, 33294.0], [38.6, 33918.0], [38.7, 34172.0], [38.8, 34372.0], [38.9, 34378.0], [39.0, 34386.0], [39.1, 34387.0], [39.2, 34388.0], [39.3, 34389.0], [39.4, 34391.0], [39.5, 34394.0], [39.6, 34402.0], [39.7, 34404.0], [39.8, 35922.0], [39.9, 37931.0], [40.0, 43409.0], [40.1, 44681.0], [40.2, 45774.0], [40.3, 46099.0], [40.4, 47670.0], [40.5, 49124.0], [40.6, 50435.0], [40.7, 51525.0], [40.8, 51584.0], [40.9, 51585.0], [41.0, 51587.0], [41.1, 51597.0], [41.2, 51598.0], [41.3, 51598.0], [41.4, 51599.0], [41.5, 51599.0], [41.6, 51600.0], [41.7, 51603.0], [41.8, 51621.0], [41.9, 52245.0], [42.0, 53368.0], [42.1, 53588.0], [42.2, 54667.0], [42.3, 55804.0], [42.4, 57468.0], [42.5, 57910.0], [42.6, 58607.0], [42.7, 59734.0], [42.8, 60210.0], [42.9, 60343.0], [43.0, 61196.0], [43.1, 61564.0], [43.2, 62126.0], [43.3, 62428.0], [43.4, 62946.0], [43.5, 63923.0], [43.6, 64994.0], [43.7, 65577.0], [43.8, 65810.0], [43.9, 65908.0], [44.0, 66158.0], [44.1, 66478.0], [44.2, 66549.0], [44.3, 67569.0], [44.4, 68584.0], [44.5, 69734.0], [44.6, 70347.0], [44.7, 70864.0], [44.8, 71595.0], [44.9, 72084.0], [45.0, 72777.0], [45.1, 73975.0], [45.2, 74364.0], [45.3, 74891.0], [45.4, 75239.0], [45.5, 75258.0], [45.6, 75636.0], [45.7, 76624.0], [45.8, 77050.0], [45.9, 77175.0], [46.0, 77462.0], [46.1, 77490.0], [46.2, 77686.0], [46.3, 77738.0], [46.4, 77809.0], [46.5, 78235.0], [46.6, 78357.0], [46.7, 78372.0], [46.8, 78373.0], [46.9, 78378.0], [47.0, 78463.0], [47.1, 79224.0], [47.2, 81124.0], [47.3, 82402.0], [47.4, 82896.0], [47.5, 84613.0], [47.6, 85595.0], [47.7, 86014.0], [47.8, 86696.0], [47.9, 87465.0], [48.0, 90261.0], [48.1, 90926.0], [48.2, 91408.0], [48.3, 91675.0], [48.4, 91831.0], [48.5, 93331.0], [48.6, 93416.0], [48.7, 94052.0], [48.8, 94288.0], [48.9, 94312.0], [49.0, 94495.0], [49.1, 94731.0], [49.2, 95084.0], [49.3, 95244.0], [49.4, 95595.0], [49.5, 95617.0], [49.6, 95722.0], [49.7, 95886.0], [49.8, 96356.0], [49.9, 96374.0], [50.0, 96463.0], [50.1, 96503.0], [50.2, 96546.0], [50.3, 96578.0], [50.4, 96622.0], [50.5, 96782.0], [50.6, 96981.0], [50.7, 97032.0], [50.8, 97077.0], [50.9, 97114.0], [51.0, 97347.0], [51.1, 97410.0], [51.2, 97532.0], [51.3, 97555.0], [51.4, 97771.0], [51.5, 97849.0], [51.6, 97943.0], [51.7, 97950.0], [51.8, 98055.0], [51.9, 98061.0], [52.0, 98096.0], [52.1, 98164.0], [52.2, 98261.0], [52.3, 98280.0], [52.4, 98342.0], [52.5, 98387.0], [52.6, 98449.0], [52.7, 98504.0], [52.8, 98576.0], [52.9, 98587.0], [53.0, 98630.0], [53.1, 98651.0], [53.2, 98672.0], [53.3, 98750.0], [53.4, 98790.0], [53.5, 98838.0], [53.6, 98904.0], [53.7, 98993.0], [53.8, 99079.0], [53.9, 99123.0], [54.0, 99183.0], [54.1, 99203.0], [54.2, 99265.0], [54.3, 99306.0], [54.4, 99366.0], [54.5, 99376.0], [54.6, 99409.0], [54.7, 99582.0], [54.8, 99641.0], [54.9, 99699.0], [55.0, 99822.0], [55.1, 99935.0], [55.2, 99970.0], [55.3, 99988.0], [55.4, 100004.0], [55.5, 100043.0], [55.6, 100055.0], [55.7, 100096.0], [55.8, 100115.0], [55.9, 100166.0], [56.0, 100201.0], [56.1, 100209.0], [56.2, 100263.0], [56.3, 100282.0], [56.4, 100397.0], [56.5, 100417.0], [56.6, 100566.0], [56.7, 100591.0], [56.8, 100639.0], [56.9, 100739.0], [57.0, 100761.0], [57.1, 100768.0], [57.2, 100808.0], [57.3, 100845.0], [57.4, 100896.0], [57.5, 101004.0], [57.6, 101029.0], [57.7, 101044.0], [57.8, 101054.0], [57.9, 101111.0], [58.0, 101235.0], [58.1, 101325.0], [58.2, 101414.0], [58.3, 101537.0], [58.4, 101591.0], [58.5, 101629.0], [58.6, 101709.0], [58.7, 101816.0], [58.8, 101868.0], [58.9, 101994.0], [59.0, 102046.0], [59.1, 102075.0], [59.2, 102110.0], [59.3, 102157.0], [59.4, 102184.0], [59.5, 102217.0], [59.6, 102423.0], [59.7, 102433.0], [59.8, 102515.0], [59.9, 102567.0], [60.0, 102637.0], [60.1, 102655.0], [60.2, 102679.0], [60.3, 102747.0], [60.4, 102763.0], [60.5, 102823.0], [60.6, 102929.0], [60.7, 102960.0], [60.8, 102970.0], [60.9, 103169.0], [61.0, 103193.0], [61.1, 103214.0], [61.2, 103263.0], [61.3, 103295.0], [61.4, 103349.0], [61.5, 103387.0], [61.6, 103466.0], [61.7, 103548.0], [61.8, 103625.0], [61.9, 103652.0], [62.0, 103665.0], [62.1, 103724.0], [62.2, 103828.0], [62.3, 103847.0], [62.4, 103919.0], [62.5, 103961.0], [62.6, 103973.0], [62.7, 103982.0], [62.8, 104123.0], [62.9, 104139.0], [63.0, 104202.0], [63.1, 104281.0], [63.2, 104390.0], [63.3, 104428.0], [63.4, 104558.0], [63.5, 104624.0], [63.6, 104702.0], [63.7, 104794.0], [63.8, 104887.0], [63.9, 104962.0], [64.0, 105068.0], [64.1, 105147.0], [64.2, 105425.0], [64.3, 105476.0], [64.4, 105630.0], [64.5, 105684.0], [64.6, 105725.0], [64.7, 105736.0], [64.8, 105845.0], [64.9, 105941.0], [65.0, 105998.0], [65.1, 106126.0], [65.2, 106198.0], [65.3, 106347.0], [65.4, 106398.0], [65.5, 106431.0], [65.6, 106643.0], [65.7, 106793.0], [65.8, 106942.0], [65.9, 107277.0], [66.0, 107303.0], [66.1, 107460.0], [66.2, 107698.0], [66.3, 107814.0], [66.4, 108015.0], [66.5, 108221.0], [66.6, 108267.0], [66.7, 108383.0], [66.8, 108438.0], [66.9, 108600.0], [67.0, 108876.0], [67.1, 109021.0], [67.2, 109148.0], [67.3, 109164.0], [67.4, 109330.0], [67.5, 109473.0], [67.6, 109604.0], [67.7, 109664.0], [67.8, 109820.0], [67.9, 109928.0], [68.0, 110052.0], [68.1, 110156.0], [68.2, 110345.0], [68.3, 110598.0], [68.4, 110787.0], [68.5, 110880.0], [68.6, 111030.0], [68.7, 111133.0], [68.8, 111295.0], [68.9, 111569.0], [69.0, 111874.0], [69.1, 111937.0], [69.2, 112168.0], [69.3, 112398.0], [69.4, 112534.0], [69.5, 112678.0], [69.6, 112728.0], [69.7, 112903.0], [69.8, 113205.0], [69.9, 113294.0], [70.0, 113508.0], [70.1, 113626.0], [70.2, 113726.0], [70.3, 113926.0], [70.4, 114320.0], [70.5, 114731.0], [70.6, 114774.0], [70.7, 114940.0], [70.8, 115015.0], [70.9, 115061.0], [71.0, 115199.0], [71.1, 115273.0], [71.2, 115331.0], [71.3, 115745.0], [71.4, 116102.0], [71.5, 116232.0], [71.6, 116563.0], [71.7, 116869.0], [71.8, 116936.0], [71.9, 117083.0], [72.0, 117189.0], [72.1, 117601.0], [72.2, 117649.0], [72.3, 117958.0], [72.4, 118216.0], [72.5, 118627.0], [72.6, 118702.0], [72.7, 119508.0], [72.8, 119725.0], [72.9, 121016.0], [73.0, 121766.0], [73.1, 122690.0], [73.2, 122704.0], [73.3, 123559.0], [73.4, 124041.0], [73.5, 126924.0], [73.6, 127151.0], [73.7, 132542.0], [73.8, 134525.0], [73.9, 135519.0], [74.0, 137000.0], [74.1, 141478.0], [74.2, 144865.0], [74.3, 146666.0], [74.4, 149048.0], [74.5, 154331.0], [74.6, 155242.0], [74.7, 156458.0], [74.8, 158556.0], [74.9, 161364.0], [75.0, 162273.0], [75.1, 166083.0], [75.2, 168122.0], [75.3, 171065.0], [75.4, 171938.0], [75.5, 175092.0], [75.6, 176208.0], [75.7, 178518.0], [75.8, 179197.0], [75.9, 180306.0], [76.0, 180514.0], [76.1, 183503.0], [76.2, 184258.0], [76.3, 184932.0], [76.4, 185615.0], [76.5, 185850.0], [76.6, 186297.0], [76.7, 186817.0], [76.8, 187828.0], [76.9, 188994.0], [77.0, 189536.0], [77.1, 191057.0], [77.2, 191294.0], [77.3, 193989.0], [77.4, 195238.0], [77.5, 195401.0], [77.6, 196253.0], [77.7, 198040.0], [77.8, 198784.0], [77.9, 199175.0], [78.0, 199268.0], [78.1, 199925.0], [78.2, 201444.0], [78.3, 202182.0], [78.4, 204634.0], [78.5, 206578.0], [78.6, 206733.0], [78.7, 207700.0], [78.8, 209105.0], [78.9, 211544.0], [79.0, 211940.0], [79.1, 212946.0], [79.2, 213149.0], [79.3, 214866.0], [79.4, 215858.0], [79.5, 217084.0], [79.6, 218100.0], [79.7, 220834.0], [79.8, 221401.0], [79.9, 222263.0], [80.0, 224012.0], [80.1, 225172.0], [80.2, 226610.0], [80.3, 227339.0], [80.4, 227715.0], [80.5, 229320.0], [80.6, 229498.0], [80.7, 230556.0], [80.8, 230792.0], [80.9, 230990.0], [81.0, 231540.0], [81.1, 232575.0], [81.2, 232749.0], [81.3, 233189.0], [81.4, 233228.0], [81.5, 233545.0], [81.6, 233897.0], [81.7, 234308.0], [81.8, 234417.0], [81.9, 234760.0], [82.0, 234800.0], [82.1, 235243.0], [82.2, 235430.0], [82.3, 235491.0], [82.4, 235784.0], [82.5, 236255.0], [82.6, 236263.0], [82.7, 237029.0], [82.8, 237169.0], [82.9, 237522.0], [83.0, 237721.0], [83.1, 237958.0], [83.2, 238030.0], [83.3, 238467.0], [83.4, 238912.0], [83.5, 239120.0], [83.6, 239864.0], [83.7, 239982.0], [83.8, 240732.0], [83.9, 240880.0], [84.0, 241153.0], [84.1, 241250.0], [84.2, 241515.0], [84.3, 242225.0], [84.4, 242521.0], [84.5, 243282.0], [84.6, 243473.0], [84.7, 243936.0], [84.8, 244012.0], [84.9, 244266.0], [85.0, 244420.0], [85.1, 245036.0], [85.2, 245440.0], [85.3, 245808.0], [85.4, 246576.0], [85.5, 246944.0], [85.6, 247079.0], [85.7, 247757.0], [85.8, 248381.0], [85.9, 250569.0], [86.0, 250717.0], [86.1, 251209.0], [86.2, 251407.0], [86.3, 253033.0], [86.4, 253399.0], [86.5, 254184.0], [86.6, 254893.0], [86.7, 255252.0], [86.8, 256374.0], [86.9, 257260.0], [87.0, 258065.0], [87.1, 258347.0], [87.2, 259512.0], [87.3, 259853.0], [87.4, 260272.0], [87.5, 262924.0], [87.6, 263797.0], [87.7, 264799.0], [87.8, 265043.0], [87.9, 267427.0], [88.0, 267566.0], [88.1, 269273.0], [88.2, 269319.0], [88.3, 269401.0], [88.4, 270150.0], [88.5, 270650.0], [88.6, 271397.0], [88.7, 272384.0], [88.8, 273083.0], [88.9, 273923.0], [89.0, 274087.0], [89.1, 275023.0], [89.2, 275680.0], [89.3, 276623.0], [89.4, 276770.0], [89.5, 278027.0], [89.6, 278225.0], [89.7, 278945.0], [89.8, 279489.0], [89.9, 280577.0], [90.0, 281020.0], [90.1, 283086.0], [90.2, 283852.0], [90.3, 284358.0], [90.4, 284489.0], [90.5, 286719.0], [90.6, 287142.0], [90.7, 287483.0], [90.8, 287780.0], [90.9, 288731.0], [91.0, 289361.0], [91.1, 289836.0], [91.2, 289970.0], [91.3, 290377.0], [91.4, 290572.0], [91.5, 291624.0], [91.6, 291818.0], [91.7, 292036.0], [91.8, 292366.0], [91.9, 293059.0], [92.0, 293083.0], [92.1, 293308.0], [92.2, 293658.0], [92.3, 293999.0], [92.4, 294166.0], [92.5, 294885.0], [92.6, 294943.0], [92.7, 295196.0], [92.8, 295686.0], [92.9, 296006.0], [93.0, 297052.0], [93.1, 297574.0], [93.2, 298212.0], [93.3, 298957.0], [93.4, 299165.0], [93.5, 299344.0], [93.6, 299374.0], [93.7, 299884.0], [93.8, 300026.0], [93.9, 301258.0], [94.0, 301802.0], [94.1, 302041.0], [94.2, 302125.0], [94.3, 302394.0], [94.4, 302880.0], [94.5, 303269.0], [94.6, 303397.0], [94.7, 303659.0], [94.8, 303828.0], [94.9, 303919.0], [95.0, 303968.0], [95.1, 304649.0], [95.2, 305716.0], [95.3, 305936.0], [95.4, 305988.0], [95.5, 306016.0], [95.6, 306074.0], [95.7, 306368.0], [95.8, 306527.0], [95.9, 306972.0], [96.0, 307074.0], [96.1, 307452.0], [96.2, 308252.0], [96.3, 308563.0], [96.4, 309134.0], [96.5, 310134.0], [96.6, 310612.0], [96.7, 311164.0], [96.8, 311529.0], [96.9, 311640.0], [97.0, 311725.0], [97.1, 312064.0], [97.2, 312886.0], [97.3, 313322.0], [97.4, 313476.0], [97.5, 313997.0], [97.6, 315540.0], [97.7, 315751.0], [97.8, 316490.0], [97.9, 317100.0], [98.0, 317319.0], [98.1, 318788.0], [98.2, 319126.0], [98.3, 319795.0], [98.4, 321019.0], [98.5, 321664.0], [98.6, 323596.0], [98.7, 324038.0], [98.8, 325343.0], [98.9, 326287.0], [99.0, 326730.0], [99.1, 328548.0], [99.2, 332555.0], [99.3, 333939.0], [99.4, 336026.0], [99.5, 345141.0], [99.6, 356645.0], [99.7, 362706.0], [99.8, 370386.0], [99.9, 378373.0], [100.0, 382950.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 515.0, "series": [{"data": [[312900.0, 1.0], [160800.0, 1.0], [199200.0, 2.0], [212000.0, 1.0], [237600.0, 1.0], [244000.0, 2.0], [296000.0, 1.0], [321600.0, 1.0], [132900.0, 1.0], [158500.0, 1.0], [333900.0, 2.0], [235300.0, 1.0], [241700.0, 1.0], [254500.0, 1.0], [69900.0, 1.0], [95500.0, 1.0], [101900.0, 2.0], [98700.0, 4.0], [105100.0, 3.0], [108300.0, 3.0], [111500.0, 1.0], [114700.0, 4.0], [117900.0, 3.0], [121100.0, 1.0], [137000.0, 1.0], [278100.0, 1.0], [303700.0, 1.0], [316500.0, 1.0], [169000.0, 1.0], [226600.0, 1.0], [245800.0, 1.0], [274000.0, 2.0], [312400.0, 1.0], [299100.0, 2.0], [39300.0, 1.0], [45700.0, 2.0], [198700.0, 1.0], [211500.0, 1.0], [230700.0, 1.0], [237100.0, 2.0], [243500.0, 1.0], [63300.0, 1.0], [64900.0, 1.0], [256300.0, 1.0], [65800.0, 2.0], [269400.0, 1.0], [295000.0, 2.0], [91400.0, 2.0], [97800.0, 2.0], [94600.0, 1.0], [101000.0, 10.0], [104200.0, 3.0], [107400.0, 2.0], [110600.0, 1.0], [113800.0, 1.0], [117000.0, 2.0], [120200.0, 1.0], [500.0, 12.0], [151600.0, 1.0], [158000.0, 1.0], [371300.0, 1.0], [196400.0, 1.0], [800.0, 1.0], [900.0, 3.0], [234800.0, 2.0], [241200.0, 3.0], [247600.0, 1.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 7.0], [303200.0, 2.0], [1300.0, 3.0], [1500.0, 3.0], [1600.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [264300.0, 1.0], [289900.0, 2.0], [315500.0, 1.0], [2600.0, 6.0], [2700.0, 6.0], [2900.0, 4.0], [366700.0, 1.0], [3000.0, 14.0], [3100.0, 19.0], [3200.0, 6.0], [3300.0, 8.0], [3400.0, 15.0], [3500.0, 7.0], [3600.0, 1.0], [3700.0, 1.0], [232500.0, 1.0], [238900.0, 1.0], [251700.0, 1.0], [4200.0, 1.0], [273000.0, 1.0], [71300.0, 1.0], [74500.0, 1.0], [77700.0, 4.0], [80900.0, 1.0], [87300.0, 1.0], [96900.0, 3.0], [100100.0, 5.0], [103300.0, 4.0], [106500.0, 1.0], [109700.0, 2.0], [112900.0, 1.0], [7000.0, 1.0], [116100.0, 3.0], [122500.0, 1.0], [119300.0, 1.0], [7800.0, 1.0], [272500.0, 1.0], [9200.0, 1.0], [310900.0, 1.0], [323700.0, 1.0], [10800.0, 1.0], [185400.0, 1.0], [12000.0, 1.0], [204600.0, 1.0], [236600.0, 1.0], [294000.0, 1.0], [19200.0, 91.0], [306800.0, 1.0], [24000.0, 1.0], [26400.0, 10.0], [25600.0, 2.0], [27200.0, 1.0], [28800.0, 1.0], [293500.0, 1.0], [280700.0, 1.0], [306300.0, 1.0], [319100.0, 1.0], [357500.0, 1.0], [370300.0, 1.0], [189500.0, 1.0], [48000.0, 1.0], [51200.0, 1.0], [54400.0, 1.0], [227900.0, 1.0], [234300.0, 2.0], [240700.0, 2.0], [62400.0, 1.0], [259900.0, 1.0], [276600.0, 2.0], [73600.0, 1.0], [302200.0, 1.0], [99200.0, 5.0], [102400.0, 5.0], [105600.0, 5.0], [108800.0, 3.0], [118400.0, 2.0], [115200.0, 3.0], [311300.0, 1.0], [185600.0, 2.0], [224000.0, 1.0], [243200.0, 1.0], [281600.0, 1.0], [307200.0, 1.0], [345600.0, 1.0], [293900.0, 1.0], [345100.0, 1.0], [183300.0, 1.0], [196100.0, 1.0], [240900.0, 1.0], [264200.0, 1.0], [70300.0, 1.0], [289800.0, 1.0], [99100.0, 6.0], [105500.0, 1.0], [108700.0, 1.0], [111900.0, 3.0], [115100.0, 1.0], [263700.0, 1.0], [289300.0, 1.0], [149000.0, 1.0], [302100.0, 2.0], [200200.0, 1.0], [206600.0, 1.0], [213000.0, 1.0], [232200.0, 1.0], [245000.0, 1.0], [238600.0, 1.0], [251400.0, 1.0], [310800.0, 1.0], [362000.0, 1.0], [37900.0, 1.0], [297500.0, 2.0], [41100.0, 1.0], [335900.0, 1.0], [49100.0, 1.0], [53900.0, 1.0], [217100.0, 1.0], [57100.0, 1.0], [236300.0, 1.0], [60300.0, 1.0], [242700.0, 1.0], [61900.0, 1.0], [72600.0, 2.0], [319000.0, 1.0], [91800.0, 1.0], [95000.0, 2.0], [98200.0, 6.0], [101400.0, 3.0], [104600.0, 3.0], [107800.0, 1.0], [111000.0, 2.0], [114200.0, 1.0], [117400.0, 2.0], [127000.0, 1.0], [130200.0, 1.0], [305700.0, 2.0], [189200.0, 1.0], [214800.0, 1.0], [234000.0, 1.0], [161300.0, 1.0], [326700.0, 3.0], [313900.0, 1.0], [180500.0, 2.0], [193300.0, 1.0], [199700.0, 2.0], [206100.0, 1.0], [212500.0, 1.0], [225300.0, 1.0], [238100.0, 2.0], [257300.0, 1.0], [68500.0, 1.0], [74900.0, 2.0], [297000.0, 2.0], [81300.0, 1.0], [90900.0, 1.0], [97300.0, 3.0], [100500.0, 5.0], [103700.0, 3.0], [110100.0, 2.0], [106900.0, 1.0], [113300.0, 1.0], [116500.0, 2.0], [119700.0, 1.0], [122900.0, 1.0], [129300.0, 1.0], [309300.0, 1.0], [191000.0, 1.0], [216600.0, 1.0], [229400.0, 2.0], [242200.0, 1.0], [17700.0, 1.0], [20900.0, 1.0], [24100.0, 1.0], [25700.0, 1.0], [28100.0, 1.0], [31300.0, 1.0], [43400.0, 1.0], [381500.0, 1.0], [54600.0, 1.0], [233500.0, 1.0], [239900.0, 1.0], [67600.0, 1.0], [275000.0, 1.0], [70800.0, 1.0], [74000.0, 2.0], [326200.0, 1.0], [313400.0, 1.0], [96400.0, 3.0], [99600.0, 5.0], [102800.0, 3.0], [106000.0, 1.0], [109200.0, 1.0], [264900.0, 1.0], [290500.0, 2.0], [303300.0, 2.0], [156000.0, 2.0], [175200.0, 1.0], [232800.0, 1.0], [299200.0, 1.0], [312000.0, 3.0], [273100.0, 1.0], [134500.0, 1.0], [298700.0, 1.0], [311500.0, 3.0], [185700.0, 1.0], [362700.0, 1.0], [198500.0, 1.0], [230500.0, 2.0], [243300.0, 1.0], [67500.0, 1.0], [269000.0, 1.0], [70700.0, 1.0], [77100.0, 1.0], [73900.0, 1.0], [307400.0, 1.0], [333000.0, 1.0], [96300.0, 4.0], [99500.0, 1.0], [102700.0, 6.0], [105900.0, 5.0], [109100.0, 5.0], [112300.0, 1.0], [118700.0, 1.0], [115500.0, 1.0], [121900.0, 1.0], [294100.0, 1.0], [306900.0, 3.0], [319700.0, 3.0], [332500.0, 1.0], [196200.0, 1.0], [234600.0, 1.0], [247400.0, 1.0], [253800.0, 2.0], [260200.0, 1.0], [302800.0, 1.0], [315600.0, 2.0], [276700.0, 1.0], [302300.0, 2.0], [187500.0, 1.0], [193900.0, 1.0], [206700.0, 1.0], [213100.0, 1.0], [58900.0, 1.0], [245100.0, 1.0], [62100.0, 1.0], [298200.0, 1.0], [98600.0, 9.0], [101800.0, 5.0], [105000.0, 3.0], [108200.0, 4.0], [111400.0, 1.0], [121000.0, 1.0], [284900.0, 1.0], [310500.0, 1.0], [297700.0, 1.0], [323300.0, 1.0], [166000.0, 1.0], [198000.0, 2.0], [293600.0, 1.0], [306400.0, 1.0], [267500.0, 2.0], [305900.0, 5.0], [318700.0, 1.0], [331500.0, 1.0], [202100.0, 1.0], [221300.0, 1.0], [227700.0, 1.0], [253300.0, 2.0], [246900.0, 2.0], [65700.0, 1.0], [301800.0, 2.0], [84900.0, 1.0], [88100.0, 1.0], [91300.0, 1.0], [97700.0, 3.0], [100900.0, 1.0], [104100.0, 5.0], [110500.0, 1.0], [107300.0, 1.0], [113700.0, 2.0], [116900.0, 2.0], [123300.0, 1.0], [262900.0, 1.0], [275700.0, 2.0], [231800.0, 1.0], [14500.0, 1.0], [244600.0, 1.0], [16100.0, 1.0], [284400.0, 1.0], [19400.0, 1.0], [20200.0, 38.0], [21000.0, 515.0], [21800.0, 1.0], [22600.0, 1.0], [25000.0, 1.0], [27400.0, 1.0], [29800.0, 1.0], [30600.0, 1.0], [32200.0, 2.0], [171900.0, 1.0], [51600.0, 6.0], [242300.0, 1.0], [267000.0, 1.0], [71200.0, 1.0], [279800.0, 1.0], [77600.0, 3.0], [356600.0, 1.0], [90400.0, 1.0], [100000.0, 11.0], [103200.0, 7.0], [106400.0, 2.0], [109600.0, 4.0], [112800.0, 1.0], [155200.0, 1.0], [301700.0, 1.0], [206400.0, 1.0], [244800.0, 1.0], [238400.0, 1.0], [251200.0, 2.0], [336000.0, 1.0], [271500.0, 1.0], [284300.0, 2.0], [146500.0, 1.0], [152900.0, 1.0], [165700.0, 1.0], [178500.0, 2.0], [184900.0, 1.0], [236100.0, 1.0], [242500.0, 2.0], [248900.0, 1.0], [255300.0, 1.0], [267400.0, 1.0], [293000.0, 3.0], [74300.0, 1.0], [93500.0, 1.0], [96700.0, 2.0], [99900.0, 7.0], [106300.0, 4.0], [103100.0, 5.0], [109500.0, 1.0], [112700.0, 3.0], [115900.0, 1.0], [119100.0, 1.0], [279700.0, 1.0], [292500.0, 1.0], [176200.0, 1.0], [195400.0, 2.0], [201800.0, 1.0], [233800.0, 2.0], [246600.0, 1.0], [253000.0, 1.0], [275600.0, 1.0], [301200.0, 1.0], [135500.0, 1.0], [262300.0, 1.0], [313500.0, 1.0], [180300.0, 2.0], [225100.0, 1.0], [231500.0, 1.0], [237900.0, 2.0], [62300.0, 1.0], [250700.0, 2.0], [65500.0, 1.0], [63900.0, 1.0], [70200.0, 1.0], [283800.0, 1.0], [76600.0, 3.0], [296600.0, 1.0], [86200.0, 1.0], [95800.0, 1.0], [99000.0, 3.0], [102200.0, 4.0], [105400.0, 3.0], [108600.0, 1.0], [111800.0, 1.0], [115000.0, 5.0], [118200.0, 1.0], [146000.0, 1.0], [254800.0, 1.0], [279200.0, 1.0], [292000.0, 2.0], [317100.0, 1.0], [207700.0, 1.0], [233300.0, 1.0], [258900.0, 1.0], [66100.0, 1.0], [287400.0, 1.0], [300200.0, 1.0], [85300.0, 1.0], [91700.0, 1.0], [98100.0, 2.0], [101300.0, 2.0], [104500.0, 3.0], [107700.0, 1.0], [110900.0, 2.0], [126900.0, 2.0], [123700.0, 1.0], [141400.0, 1.0], [147800.0, 1.0], [325300.0, 2.0], [186200.0, 2.0], [199000.0, 1.0], [270000.0, 1.0], [282800.0, 1.0], [308400.0, 2.0], [295600.0, 1.0], [20300.0, 14.0], [19500.0, 1.0], [23500.0, 1.0], [25100.0, 1.0], [29900.0, 3.0], [30700.0, 1.0], [31500.0, 2.0], [295100.0, 1.0], [203100.0, 1.0], [58200.0, 1.0], [59800.0, 2.0], [241500.0, 1.0], [278200.0, 1.0], [303800.0, 2.0], [74800.0, 1.0], [316600.0, 1.0], [94000.0, 1.0], [100400.0, 2.0], [103600.0, 6.0], [110000.0, 2.0], [106800.0, 1.0], [113200.0, 4.0], [293700.0, 1.0], [144800.0, 1.0], [306500.0, 1.0], [170400.0, 1.0], [234400.0, 1.0], [240800.0, 2.0], [302400.0, 1.0], [161700.0, 1.0], [314700.0, 1.0], [168100.0, 1.0], [206500.0, 1.0], [212900.0, 1.0], [272200.0, 1.0], [71500.0, 1.0], [310600.0, 1.0], [81100.0, 1.0], [97100.0, 2.0], [100300.0, 3.0], [103500.0, 4.0], [106700.0, 3.0], [109900.0, 3.0], [119500.0, 2.0], [122700.0, 1.0], [146600.0, 1.0], [284500.0, 1.0], [310100.0, 1.0], [217000.0, 1.0], [236200.0, 3.0], [267600.0, 1.0], [293200.0, 2.0], [306000.0, 4.0], [318300.0, 1.0], [176300.0, 1.0], [49700.0, 2.0], [227500.0, 1.0], [57700.0, 1.0], [62500.0, 1.0], [246700.0, 1.0], [259500.0, 3.0], [77000.0, 2.0], [327000.0, 1.0], [86600.0, 1.0], [96200.0, 1.0], [99400.0, 3.0], [102600.0, 8.0], [105800.0, 1.0], [109000.0, 2.0], [112200.0, 1.0], [118600.0, 2.0], [262500.0, 1.0], [142000.0, 1.0], [288100.0, 1.0], [161200.0, 1.0], [313700.0, 1.0], [186800.0, 1.0], [244400.0, 2.0], [238000.0, 1.0], [257200.0, 1.0], [309100.0, 1.0], [229300.0, 1.0], [235700.0, 2.0], [242100.0, 1.0], [254900.0, 1.0], [66500.0, 3.0], [4300.0, 1.0], [69700.0, 1.0], [279400.0, 1.0], [92100.0, 1.0], [95300.0, 1.0], [101700.0, 1.0], [98500.0, 6.0], [104900.0, 2.0], [6500.0, 1.0], [111300.0, 1.0], [124100.0, 1.0], [278900.0, 1.0], [304500.0, 1.0], [317300.0, 1.0], [11000.0, 1.0], [11800.0, 1.0], [201400.0, 1.0], [207800.0, 1.0], [227000.0, 1.0], [233400.0, 1.0], [239800.0, 4.0], [15000.0, 1.0], [252600.0, 1.0], [16200.0, 1.0], [19600.0, 1.0], [20400.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [32400.0, 1.0], [34400.0, 5.0], [274300.0, 1.0], [287100.0, 2.0], [299900.0, 1.0], [154300.0, 1.0], [45600.0, 1.0], [186300.0, 1.0], [50400.0, 1.0], [199100.0, 1.0], [211900.0, 1.0], [237500.0, 2.0], [243900.0, 1.0], [256700.0, 1.0], [68800.0, 1.0], [65600.0, 1.0], [270200.0, 1.0], [72000.0, 1.0], [283000.0, 1.0], [75200.0, 4.0], [295800.0, 1.0], [308600.0, 1.0], [78400.0, 4.0], [321400.0, 1.0], [91200.0, 1.0], [94400.0, 2.0], [97600.0, 1.0], [100800.0, 6.0], [104000.0, 2.0], [107200.0, 3.0], [110400.0, 1.0], [113600.0, 2.0], [116800.0, 2.0], [137600.0, 1.0], [292100.0, 1.0], [195200.0, 1.0], [214400.0, 1.0], [220800.0, 1.0], [227200.0, 1.0], [240000.0, 1.0], [288000.0, 1.0], [274700.0, 1.0], [325900.0, 1.0], [237700.0, 2.0], [244100.0, 1.0], [250500.0, 1.0], [270600.0, 1.0], [283400.0, 1.0], [71900.0, 1.0], [78300.0, 10.0], [97500.0, 5.0], [94300.0, 2.0], [100700.0, 8.0], [103900.0, 8.0], [110300.0, 2.0], [113500.0, 3.0], [270100.0, 1.0], [308500.0, 1.0], [321300.0, 1.0], [171400.0, 1.0], [184200.0, 2.0], [190600.0, 1.0], [235400.0, 4.0], [291600.0, 2.0], [304400.0, 1.0], [317200.0, 1.0], [33900.0, 1.0], [303900.0, 4.0], [45100.0, 1.0], [194700.0, 1.0], [51500.0, 23.0], [54700.0, 1.0], [56300.0, 1.0], [57900.0, 1.0], [233100.0, 2.0], [61100.0, 2.0], [62700.0, 1.0], [64300.0, 1.0], [287000.0, 1.0], [77400.0, 3.0], [299800.0, 2.0], [83800.0, 1.0], [93400.0, 2.0], [90200.0, 1.0], [96600.0, 1.0], [99800.0, 2.0], [106200.0, 1.0], [103000.0, 1.0], [109400.0, 2.0], [112600.0, 3.0], [134800.0, 2.0], [299300.0, 4.0], [324900.0, 1.0], [179600.0, 1.0], [230800.0, 1.0], [243600.0, 1.0], [295200.0, 1.0], [132500.0, 1.0], [138900.0, 1.0], [307500.0, 1.0], [190100.0, 1.0], [234900.0, 1.0], [247700.0, 2.0], [254100.0, 1.0], [66900.0, 1.0], [265000.0, 1.0], [290600.0, 1.0], [76500.0, 1.0], [303400.0, 1.0], [86100.0, 1.0], [95700.0, 2.0], [102100.0, 7.0], [98900.0, 3.0], [108500.0, 1.0], [111700.0, 1.0], [114900.0, 2.0], [290100.0, 1.0], [302900.0, 1.0], [162200.0, 1.0], [315700.0, 1.0], [328500.0, 1.0], [175000.0, 2.0], [187800.0, 1.0], [232600.0, 1.0], [239000.0, 1.0], [245400.0, 1.0], [258200.0, 1.0], [17300.0, 1.0], [298800.0, 1.0], [18900.0, 1.0], [311600.0, 2.0], [19700.0, 1.0], [20500.0, 1.0], [24500.0, 4.0], [23700.0, 1.0], [311100.0, 1.0], [323900.0, 1.0], [336700.0, 1.0], [179100.0, 1.0], [52200.0, 2.0], [58600.0, 1.0], [230300.0, 1.0], [60200.0, 2.0], [61800.0, 1.0], [75600.0, 2.0], [307000.0, 2.0], [91600.0, 2.0], [371000.0, 1.0], [94800.0, 1.0], [98000.0, 6.0], [101200.0, 2.0], [104400.0, 3.0], [107600.0, 1.0], [110800.0, 2.0], [271300.0, 1.0], [284100.0, 2.0], [172000.0, 1.0], [178400.0, 1.0], [191200.0, 2.0], [236000.0, 1.0], [255200.0, 2.0], [292800.0, 1.0], [292300.0, 1.0], [305100.0, 1.0], [188900.0, 2.0], [195300.0, 1.0], [201700.0, 1.0], [227300.0, 1.0], [246500.0, 1.0], [65900.0, 3.0], [275400.0, 1.0], [97900.0, 6.0], [94700.0, 1.0], [101100.0, 3.0], [104300.0, 3.0], [107500.0, 2.0], [113900.0, 1.0], [110700.0, 2.0], [117100.0, 2.0], [123500.0, 1.0], [287700.0, 2.0], [300500.0, 1.0], [313300.0, 3.0], [186600.0, 1.0], [225000.0, 2.0], [231400.0, 1.0], [237800.0, 1.0], [244200.0, 2.0], [250600.0, 1.0], [257000.0, 1.0], [270800.0, 1.0], [309200.0, 1.0], [34100.0, 2.0], [270300.0, 1.0], [295900.0, 1.0], [184300.0, 2.0], [53300.0, 2.0], [229100.0, 1.0], [58100.0, 1.0], [61300.0, 1.0], [59700.0, 1.0], [62900.0, 1.0], [248300.0, 1.0], [64500.0, 1.0], [68200.0, 1.0], [266200.0, 1.0], [291800.0, 2.0], [77800.0, 1.0], [304600.0, 1.0], [317400.0, 1.0], [87400.0, 1.0], [97000.0, 6.0], [100200.0, 8.0], [103400.0, 3.0], [109800.0, 1.0], [106600.0, 2.0], [113000.0, 1.0], [116200.0, 1.0], [122600.0, 2.0], [278500.0, 1.0], [156400.0, 1.0], [233200.0, 2.0], [246000.0, 1.0], [287200.0, 1.0], [300000.0, 1.0], [312800.0, 1.0], [273900.0, 1.0], [286700.0, 1.0], [299500.0, 1.0], [179700.0, 1.0], [198900.0, 1.0], [211700.0, 1.0], [218100.0, 1.0], [230900.0, 2.0], [237300.0, 1.0], [308200.0, 1.0], [321000.0, 1.0], [89700.0, 1.0], [96100.0, 1.0], [99300.0, 7.0], [105700.0, 6.0], [102500.0, 3.0], [112100.0, 3.0], [115300.0, 3.0], [121700.0, 1.0], [269300.0, 3.0], [294900.0, 2.0], [171000.0, 1.0], [11100.0, 1.0], [215800.0, 1.0], [222200.0, 1.0], [278000.0, 1.0], [303600.0, 1.0], [316400.0, 1.0], [21400.0, 1.0], [30200.0, 1.0], [31000.0, 1.0], [33200.0, 2.0], [277500.0, 1.0], [264700.0, 1.0], [290300.0, 1.0], [46000.0, 1.0], [47600.0, 3.0], [207100.0, 2.0], [232700.0, 1.0], [60400.0, 1.0], [245500.0, 2.0], [239100.0, 2.0], [258300.0, 1.0], [66400.0, 1.0], [79200.0, 1.0], [85600.0, 1.0], [82400.0, 2.0], [95200.0, 2.0], [98400.0, 3.0], [101600.0, 3.0], [104800.0, 2.0], [108000.0, 2.0], [111200.0, 1.0], [117600.0, 3.0], [124000.0, 1.0], [209600.0, 1.0], [216000.0, 1.0], [235200.0, 1.0], [278400.0, 1.0], [290700.0, 1.0], [303500.0, 1.0], [188100.0, 1.0], [66300.0, 1.0], [72700.0, 1.0], [85500.0, 1.0], [337800.0, 1.0], [95100.0, 1.0], [98300.0, 5.0], [101500.0, 5.0], [104700.0, 4.0], [107900.0, 2.0], [114300.0, 2.0], [111100.0, 2.0], [120700.0, 1.0], [127100.0, 1.0], [273300.0, 1.0], [298900.0, 1.0], [311700.0, 1.0], [185800.0, 1.0], [237000.0, 1.0], [243400.0, 1.0], [249800.0, 1.0], [269200.0, 2.0], [294800.0, 1.0], [34300.0, 21.0], [35900.0, 3.0], [294300.0, 2.0], [319900.0, 1.0], [183500.0, 1.0], [209100.0, 2.0], [53500.0, 2.0], [215500.0, 1.0], [221900.0, 2.0], [234700.0, 3.0], [241100.0, 2.0], [61500.0, 1.0], [277400.0, 1.0], [290200.0, 1.0], [78200.0, 2.0], [315800.0, 1.0], [84600.0, 1.0], [94200.0, 4.0], [97400.0, 1.0], [100600.0, 4.0], [103800.0, 6.0], [110200.0, 1.0], [107000.0, 1.0], [116600.0, 2.0], [136400.0, 1.0], [289700.0, 2.0], [219600.0, 1.0], [213200.0, 1.0], [258000.0, 2.0], [324000.0, 1.0], [272300.0, 1.0], [323500.0, 1.0], [223700.0, 1.0], [230100.0, 1.0], [281000.0, 1.0], [293800.0, 1.0], [77300.0, 2.0], [93300.0, 2.0], [96500.0, 8.0], [99700.0, 2.0], [106100.0, 4.0], [102900.0, 6.0], [109300.0, 1.0], [112500.0, 2.0], [115700.0, 1.0], [280500.0, 1.0], [293300.0, 1.0], [306100.0, 2.0], [163800.0, 1.0], [382900.0, 1.0], [221400.0, 1.0], [234200.0, 1.0], [247000.0, 1.0], [259800.0, 1.0], [263600.0, 1.0], [16700.0, 1.0], [19100.0, 7.0], [302000.0, 2.0], [22300.0, 60.0], [23900.0, 1.0], [24700.0, 1.0], [25500.0, 2.0], [26300.0, 36.0], [31900.0, 1.0], [33400.0, 2.0], [288700.0, 2.0], [155100.0, 1.0], [167900.0, 1.0], [44600.0, 2.0], [193500.0, 1.0], [378300.0, 1.0], [199900.0, 1.0], [52600.0, 1.0], [219100.0, 1.0], [55800.0, 1.0], [57400.0, 1.0], [251100.0, 1.0], [65400.0, 1.0], [79600.0, 1.0], [82800.0, 2.0], [86000.0, 1.0], [95600.0, 4.0], [102000.0, 6.0], [98800.0, 4.0], [105200.0, 1.0], [108400.0, 2.0], [118000.0, 1.0], [114800.0, 2.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 382900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1139.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1361.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1361.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1139.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.85106382978723, "minX": 1.7123595E12, "maxY": 250.0, "series": [{"data": [[1.71236016E12, 190.8148148148148], [1.71235986E12, 247.8775510204082], [1.71235956E12, 250.0], [1.71236058E12, 149.31034482758625], [1.71236088E12, 86.55882352941175], [1.71236028E12, 182.5], [1.71235998E12, 222.70247933884295], [1.71236034E12, 176.49056603773587], [1.71236064E12, 141.54838709677418], [1.71236004E12, 201.73404255319147], [1.71235974E12, 250.0], [1.71236046E12, 161.7058823529412], [1.71236076E12, 114.67499999999998], [1.71236082E12, 102.45945945945942], [1.71236052E12, 155.61538461538464], [1.71236022E12, 186.5897435897436], [1.71235992E12, 235.58333333333334], [1.71235962E12, 250.0], [1.71236094E12, 70.6842105263158], [1.71235968E12, 250.0], [1.7123607E12, 131.72881355932205], [1.712361E12, 37.85106382978723], [1.7123604E12, 167.37499999999997], [1.7123601E12, 193.9880952380952], [1.7123598E12, 250.0], [1.7123595E12, 250.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.712361E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4381.0, "minX": 1.0, "maxY": 356645.0, "series": [{"data": [[2.0, 7040.0], [3.0, 6542.0], [4.0, 11095.0], [5.0, 7827.0], [6.0, 9242.0], [7.0, 11860.0], [8.0, 10842.0], [9.0, 14598.0], [10.0, 12038.0], [11.0, 15071.0], [13.0, 16448.0], [14.0, 17323.0], [15.0, 19574.0], [16.0, 19334.0], [17.0, 21452.0], [18.0, 20533.0], [19.0, 23706.0], [20.0, 32288.0], [21.0, 32220.0], [22.0, 23549.0], [24.0, 24255.666666666668], [25.0, 31316.0], [26.0, 27899.5], [27.0, 31001.0], [28.0, 99822.0], [29.0, 87667.0], [30.0, 103054.0], [31.0, 31906.0], [33.0, 28875.0], [32.0, 51525.0], [35.0, 105791.33333333333], [34.0, 71316.0], [37.0, 118689.0], [39.0, 122966.0], [38.0, 151437.5], [41.0, 135215.0], [40.0, 98647.0], [43.0, 138600.0], [42.0, 160849.0], [45.0, 180760.0], [44.0, 134525.0], [47.0, 195400.5], [46.0, 196253.0], [49.0, 180559.5], [48.0, 195238.0], [51.0, 200985.5], [50.0, 199925.0], [53.0, 199129.5], [55.0, 201196.5], [54.0, 197244.5], [57.0, 206826.6666666667], [56.0, 199268.0], [59.0, 223071.0], [58.0, 209105.0], [61.0, 115995.5], [60.0, 248630.0], [62.0, 269524.0], [67.0, 270150.0], [66.0, 264302.5], [65.0, 268611.5], [64.0, 245588.0], [71.0, 54413.0], [70.0, 65964.0], [69.0, 274591.25], [68.0, 273083.0], [75.0, 87465.0], [74.0, 242225.0], [73.0, 244011.5], [72.0, 234963.0], [79.0, 231400.0], [78.0, 234417.0], [77.0, 159294.5], [76.0, 237555.5], [83.0, 131986.28571428574], [86.0, 143407.0], [85.0, 220857.0], [84.0, 226974.5], [91.0, 231723.42857142858], [90.0, 218100.0], [89.0, 240880.0], [88.0, 99629.5], [95.0, 165050.0], [94.0, 245547.0], [93.0, 237278.0], [92.0, 174541.5], [99.0, 199728.4], [96.0, 126924.0], [103.0, 239059.8], [102.0, 179117.0], [101.0, 153196.0], [107.0, 210963.07692307694], [106.0, 244189.0], [105.0, 244469.0], [104.0, 109938.0], [111.0, 219598.125], [110.0, 152032.33333333334], [108.0, 102423.0], [115.0, 257257.5], [114.0, 261660.6], [113.0, 257386.0], [112.0, 240826.0], [119.0, 310129.0], [118.0, 278847.3333333333], [117.0, 274017.0], [116.0, 274392.0], [123.0, 147612.5], [122.0, 271514.0], [121.0, 273259.0], [120.0, 270342.0], [127.0, 210401.66666666666], [125.0, 206351.3333333333], [124.0, 266962.5], [135.0, 294782.5], [134.0, 293059.0], [133.0, 291932.0], [132.0, 287177.0], [131.0, 293308.0], [130.0, 288584.6666666667], [129.0, 237757.0], [128.0, 287508.99999999994], [143.0, 223857.0], [142.0, 270783.1], [141.0, 274805.71428571426], [140.0, 278225.0], [139.0, 263113.75], [138.0, 293167.92307692306], [137.0, 294494.5], [136.0, 268468.6], [151.0, 241063.4], [150.0, 229360.5], [149.0, 262924.0], [148.0, 269003.0], [147.0, 269308.5], [146.0, 269350.0], [145.0, 274213.4285714286], [144.0, 244416.0], [159.0, 304262.8571428571], [158.0, 293503.0], [157.0, 299365.0], [156.0, 288508.0], [155.0, 275896.8333333334], [154.0, 146338.5], [153.0, 279551.0], [152.0, 232876.76470588235], [167.0, 233176.8], [166.0, 306151.9090909091], [165.0, 312754.27272727276], [164.0, 267592.0], [163.0, 272881.30000000005], [161.0, 270839.2857142857], [160.0, 302007.0], [175.0, 289936.6666666667], [174.0, 249940.5], [173.0, 256244.8], [172.0, 290147.0], [171.0, 298760.3], [170.0, 300889.3333333334], [169.0, 267482.14285714284], [168.0, 254339.2], [183.0, 311277.0], [182.0, 301765.0], [181.0, 356645.0], [180.0, 323635.0833333333], [179.0, 298281.76470588235], [178.0, 314776.0], [177.0, 241515.0], [176.0, 242455.5], [191.0, 273720.36000000004], [190.0, 254965.66666666666], [189.0, 299953.5333333333], [188.0, 241267.0], [187.0, 246247.75], [186.0, 169098.0], [185.0, 19279.0], [184.0, 236728.5], [199.0, 71819.1739130435], [198.0, 144682.4210526316], [197.0, 49666.57142857143], [196.0, 21038.0], [195.0, 174933.42857142855], [194.0, 215270.5416666667], [193.0, 220562.6666666667], [192.0, 231870.5], [207.0, 121711.37500000001], [206.0, 21045.0], [204.0, 22382.0], [202.0, 20261.0], [201.0, 38407.5], [200.0, 21486.333333333332], [215.0, 21050.0], [214.0, 21046.0], [213.0, 20164.5], [212.0, 77020.66666666667], [210.0, 21034.0], [209.0, 101931.9], [208.0, 21037.5], [223.0, 21042.0], [222.0, 21042.0], [221.0, 21034.0], [219.0, 21036.5], [218.0, 122261.33333333334], [217.0, 126872.39130434782], [216.0, 103650.0], [231.0, 30373.5], [230.0, 77734.33333333333], [229.0, 37600.0], [228.0, 58323.166666666664], [227.0, 34690.34210526316], [225.0, 21038.304347826084], [224.0, 111399.5294117647], [239.0, 51271.83333333333], [238.0, 61183.45161290322], [237.0, 20453.25], [236.0, 19217.0], [235.0, 21039.25], [234.0, 43740.5], [233.0, 21045.666666666668], [232.0, 30296.833333333336], [247.0, 80690.70588235292], [246.0, 53282.88235294117], [245.0, 76612.5], [244.0, 59969.94117647058], [242.0, 68703.22222222222], [241.0, 57180.363636363625], [250.0, 57291.44113149844], [249.0, 73204.92307692308], [248.0, 63372.57894736843], [1.0, 4381.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}, {"data": [[214.50080000000005, 107398.154]], "isOverall": false, "label": "HTTP Request (Mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 44.8, "minX": 1.7123595E12, "maxY": 184324.2, "series": [{"data": [[1.71236016E12, 112.5], [1.71235986E12, 5857.6], [1.71235956E12, 5036.3], [1.71236058E12, 123.86666666666666], [1.71236088E12, 169.83333333333334], [1.71236028E12, 44.8], [1.71235998E12, 4121.9], [1.71236034E12, 283.2], [1.71236064E12, 150.83333333333334], [1.71236004E12, 2984.5666666666666], [1.71235974E12, 4925.666666666667], [1.71236046E12, 71.26666666666667], [1.71236076E12, 171.93333333333334], [1.71236082E12, 177.13333333333333], [1.71236052E12, 165.1], [1.71236022E12, 483.5], [1.71235992E12, 4914.116666666667], [1.71235962E12, 3626.266666666667], [1.71236094E12, 90.43333333333334], [1.71235968E12, 5529.016666666666], [1.7123607E12, 243.26666666666668], [1.712361E12, 354.8333333333333], [1.7123604E12, 349.3666666666667], [1.7123601E12, 796.5833333333334], [1.7123598E12, 4078.4], [1.7123595E12, 1523.9333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71236016E12, 34321.9], [1.71235986E12, 171615.35], [1.71235956E12, 184324.2], [1.71236058E12, 36865.5], [1.71236088E12, 43220.85], [1.71236028E12, 15254.2], [1.71235998E12, 41948.5], [1.71236034E12, 67375.25], [1.71236064E12, 39407.25], [1.71236004E12, 40678.15], [1.71235974E12, 169071.1], [1.71236046E12, 21609.7], [1.71236076E12, 50846.65], [1.71236082E12, 47034.7], [1.71236052E12, 49575.7], [1.71236022E12, 41947.45], [1.71235992E12, 55933.5], [1.71235962E12, 166525.45], [1.71236094E12, 24152.8], [1.71235968E12, 162711.9], [1.7123607E12, 75001.8], [1.712361E12, 119491.8], [1.7123604E12, 101696.85], [1.7123601E12, 92796.65], [1.7123598E12, 148731.1], [1.7123595E12, 144916.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.712361E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2798.4444444444453, "minX": 1.7123595E12, "maxY": 348480.9166666667, "series": [{"data": [[1.71236016E12, 278736.1481481481], [1.71235986E12, 66571.17142857143], [1.71235956E12, 40592.64255319149], [1.71236058E12, 245770.2758620689], [1.71236088E12, 187512.17647058825], [1.71236028E12, 348480.9166666667], [1.71235998E12, 63379.29752066116], [1.71236034E12, 292054.6037735849], [1.71236064E12, 268580.83870967745], [1.71236004E12, 81411.53191489363], [1.71235974E12, 69173.5088495575], [1.71236046E12, 261751.35294117648], [1.71236076E12, 241817.90000000005], [1.71236082E12, 203565.9189189189], [1.71236052E12, 275211.5384615385], [1.71236022E12, 239794.23076923075], [1.71235992E12, 47535.53472222224], [1.71235962E12, 72041.63020833331], [1.71236094E12, 207910.26315789478], [1.71235968E12, 64634.35344827586], [1.7123607E12, 267325.1186440678], [1.712361E12, 123831.77659574471], [1.7123604E12, 286728.0875000001], [1.7123601E12, 203901.02380952385], [1.7123598E12, 70591.37172774874], [1.7123595E12, 2798.4444444444453]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.712361E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2745.6825396825393, "minX": 1.7123595E12, "maxY": 348480.5833333334, "series": [{"data": [[1.71236016E12, 278735.8888888889], [1.71235986E12, 56878.167346938775], [1.71235956E12, 32652.70212765957], [1.71236058E12, 245770.17241379307], [1.71236088E12, 187511.94117647063], [1.71236028E12, 348480.5833333334], [1.71235998E12, 48116.446280991746], [1.71236034E12, 292054.49056603777], [1.71236064E12, 268580.7419354839], [1.71236004E12, 67361.38297872341], [1.71235974E12, 60305.73451327432], [1.71236046E12, 261751.23529411765], [1.71236076E12, 241817.85000000003], [1.71236082E12, 203565.86486486482], [1.71236052E12, 275211.38461538457], [1.71236022E12, 236831.43589743588], [1.71235992E12, 32430.07638888893], [1.71235962E12, 64646.11458333334], [1.71236094E12, 207910.1052631579], [1.71235968E12, 54715.30603448275], [1.7123607E12, 267325.0], [1.712361E12, 123831.6063829787], [1.7123604E12, 286727.99999999994], [1.7123601E12, 200987.01190476186], [1.7123598E12, 62258.56020942411], [1.7123595E12, 2745.6825396825393]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.712361E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 86.21052631578947, "minX": 1.7123595E12, "maxY": 14334.47933884298, "series": [{"data": [[1.71236016E12, 2760.3703703703713], [1.71235986E12, 8002.114285714283], [1.71235956E12, 4445.000000000002], [1.71236058E12, 91.75862068965517], [1.71236088E12, 97.73529411764709], [1.71236028E12, 4608.666666666667], [1.71235998E12, 14334.47933884298], [1.71236034E12, 2548.7358490566044], [1.71236064E12, 90.0967741935484], [1.71236004E12, 13214.40425531915], [1.71235974E12, 8988.11061946903], [1.71236046E12, 272.3529411764706], [1.71236076E12, 92.40000000000002], [1.71236082E12, 93.37837837837839], [1.71236052E12, 1119.5128205128203], [1.71236022E12, 1450.282051282051], [1.71235992E12, 11782.083333333336], [1.71235962E12, 4776.182291666667], [1.71236094E12, 86.21052631578947], [1.71235968E12, 8290.495689655176], [1.7123607E12, 89.81355932203391], [1.712361E12, 88.62765957446808], [1.7123604E12, 1440.6750000000002], [1.7123601E12, 4966.130952380952], [1.7123598E12, 7663.863874345549], [1.7123595E12, 271.57936507936506]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.712361E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4381.0, "minX": 1.7123595E12, "maxY": 382950.0, "series": [{"data": [[1.71236016E12, 303828.0], [1.71235986E12, 124041.0], [1.71235956E12, 79605.0], [1.71236058E12, 275765.0], [1.71236088E12, 257025.0], [1.71236028E12, 371359.0], [1.71235998E12, 198017.0], [1.71236034E12, 382950.0], [1.71236064E12, 301802.0], [1.71236004E12, 229320.0], [1.71235974E12, 124177.0], [1.71236046E12, 325952.0], [1.71236076E12, 315540.0], [1.71236082E12, 259853.0], [1.71236052E12, 318788.0], [1.71236022E12, 336740.0], [1.71235992E12, 137000.0], [1.71235962E12, 118216.0], [1.71236094E12, 278480.0], [1.71235968E12, 122564.0], [1.7123607E12, 299551.0], [1.712361E12, 278027.0], [1.7123604E12, 337834.0], [1.7123601E12, 265043.0], [1.7123598E12, 121016.0], [1.7123595E12, 16249.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71236016E12, 256709.0], [1.71235986E12, 94695.0], [1.71235956E12, 20925.0], [1.71236058E12, 229480.0], [1.71236088E12, 216631.0], [1.71236028E12, 301765.0], [1.71235998E12, 142079.0], [1.71236034E12, 295055.0], [1.71236064E12, 270825.0], [1.71236004E12, 188994.0], [1.71235974E12, 94316.0], [1.71236046E12, 255241.0], [1.71236076E12, 232653.0], [1.71236082E12, 198906.0], [1.71236052E12, 211940.0], [1.71236022E12, 303269.0], [1.71235992E12, 94445.0], [1.71235962E12, 80906.0], [1.71236094E12, 234963.0], [1.71235968E12, 90926.0], [1.7123607E12, 235491.0], [1.712361E12, 4381.0], [1.7123604E12, 237751.0], [1.7123601E12, 227715.0], [1.7123598E12, 96193.0], [1.7123595E12, 16249.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71236016E12, 303167.0], [1.71235986E12, 113740.8], [1.71235956E12, 78357.0], [1.71236058E12, 270474.8], [1.71236088E12, 253643.2], [1.71236028E12, 371280.7], [1.71235998E12, 188066.8], [1.71236034E12, 375115.0], [1.71236064E12, 292303.1], [1.71236004E12, 226016.8], [1.71235974E12, 115958.2], [1.71236046E12, 312626.60000000003], [1.71236076E12, 309723.0], [1.71236082E12, 255587.4], [1.71236052E12, 313402.0], [1.71236022E12, 325434.0], [1.71235992E12, 134990.2], [1.71235962E12, 111305.3], [1.71236094E12, 278322.5], [1.71235968E12, 114324.6], [1.7123607E12, 298364.8], [1.712361E12, 231029.80000000005], [1.7123604E12, 327916.8], [1.7123601E12, 248025.2], [1.7123598E12, 115213.0], [1.7123595E12, 16249.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71236016E12, 303828.0], [1.71235986E12, 123649.20999999999], [1.71235956E12, 79274.10999999999], [1.71236058E12, 275765.0], [1.71236088E12, 257025.0], [1.71236028E12, 371359.0], [1.71235998E12, 198017.0], [1.71236034E12, 382950.0], [1.71236064E12, 301802.0], [1.71236004E12, 229320.0], [1.71235974E12, 124041.04], [1.71236046E12, 325952.0], [1.71236076E12, 315540.0], [1.71236082E12, 259853.0], [1.71236052E12, 318788.0], [1.71236022E12, 336740.0], [1.71235992E12, 137000.0], [1.71235962E12, 118192.24], [1.71236094E12, 278480.0], [1.71235968E12, 122457.62], [1.7123607E12, 299551.0], [1.712361E12, 278027.0], [1.7123604E12, 337834.0], [1.7123601E12, 265043.0], [1.7123598E12, 120877.15999999999], [1.7123595E12, 16249.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71236016E12, 294355.0], [1.71235986E12, 104049.0], [1.71235956E12, 51598.5], [1.71236058E12, 259546.0], [1.71236088E12, 231400.0], [1.71236028E12, 357082.5], [1.71235998E12, 183902.0], [1.71236034E12, 319003.0], [1.71236064E12, 280671.0], [1.71236004E12, 212987.0], [1.71235974E12, 104887.0], [1.71236046E12, 275680.0], [1.71236076E12, 258206.0], [1.71236082E12, 238638.0], [1.71236052E12, 299955.0], [1.71236022E12, 311306.0], [1.71235992E12, 113280.0], [1.71235962E12, 100424.0], [1.71236094E12, 263948.5], [1.71235968E12, 100055.0], [1.7123607E12, 290688.0], [1.712361E12, 134525.0], [1.7123604E12, 306972.0], [1.7123601E12, 235784.0], [1.7123598E12, 103976.0], [1.7123595E12, 16249.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71236016E12, 303734.5], [1.71235986E12, 116274.9], [1.71235956E12, 78378.0], [1.71236058E12, 274230.5], [1.71236088E12, 256381.19999999998], [1.71236028E12, 371359.0], [1.71235998E12, 195548.6], [1.71236034E12, 382111.2], [1.71236064E12, 300408.35], [1.71236004E12, 229121.25], [1.71235974E12, 118607.09999999999], [1.71236046E12, 325952.0], [1.71236076E12, 312617.25], [1.71236082E12, 259230.6], [1.71236052E12, 317604.5], [1.71236022E12, 334282.4], [1.71235992E12, 136463.6], [1.71235962E12, 116360.5], [1.71236094E12, 278480.0], [1.71235968E12, 118006.8], [1.7123607E12, 299316.0], [1.712361E12, 270085.8], [1.7123604E12, 333548.0], [1.7123601E12, 251619.6], [1.7123598E12, 116803.8], [1.7123595E12, 16249.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.712361E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 908.0, "minX": 1.0, "maxY": 309254.0, "series": [{"data": [[2.0, 194064.5], [33.0, 51598.0], [8.0, 117636.5], [9.0, 109148.0], [10.0, 112791.0], [11.0, 99230.0], [3.0, 113504.5], [12.0, 309254.0], [13.0, 100055.0], [14.0, 78235.0], [15.0, 103454.0], [1.0, 245547.0], [4.0, 189862.5], [16.0, 102652.0], [17.0, 292254.5], [19.0, 103658.0], [5.0, 105129.0], [20.0, 70258.0], [21.0, 272595.0], [22.0, 105687.0], [23.0, 100081.0], [6.0, 105147.0], [25.0, 24538.0], [7.0, 104962.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21046.0], [33.0, 51016.5], [3.0, 21040.0], [57.0, 3071.0], [4.0, 21045.0], [5.0, 21042.0], [6.0, 21045.0], [7.0, 21042.0], [8.0, 23712.0], [9.0, 21037.0], [10.0, 21040.0], [11.0, 19243.0], [12.0, 21043.0], [13.0, 21037.0], [14.0, 34394.0], [15.0, 22363.0], [1.0, 21056.0], [16.0, 21038.0], [17.0, 21040.0], [19.0, 19260.0], [20.0, 19210.0], [21.0, 75258.0], [22.0, 70347.0], [23.0, 73975.0], [25.0, 21038.0], [27.0, 908.0], [31.0, 3426.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 57.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 309254.0, "series": [{"data": [[2.0, 194064.5], [33.0, 51598.0], [8.0, 117636.5], [9.0, 109148.0], [10.0, 112791.0], [11.0, 99230.0], [3.0, 113503.5], [12.0, 309254.0], [13.0, 100055.0], [14.0, 78235.0], [15.0, 103454.0], [1.0, 245547.0], [4.0, 189862.5], [16.0, 102651.0], [17.0, 292254.0], [19.0, 103657.0], [5.0, 105129.0], [20.0, 70258.0], [21.0, 272595.0], [22.0, 105687.0], [23.0, 100081.0], [6.0, 105147.0], [25.0, 24538.0], [7.0, 104962.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [33.0, 51016.5], [3.0, 0.0], [57.0, 3071.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [16.0, 0.0], [17.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 75258.0], [22.0, 70347.0], [23.0, 73975.0], [25.0, 0.0], [27.0, 907.0], [31.0, 3426.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 57.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.7123595E12, "maxY": 6.266666666666667, "series": [{"data": [[1.71236016E12, 0.4166666666666667], [1.71235986E12, 3.9833333333333334], [1.71235956E12, 3.9166666666666665], [1.71236058E12, 0.36666666666666664], [1.71236088E12, 0.2833333333333333], [1.71236028E12, 0.15], [1.71235998E12, 1.7833333333333334], [1.71236034E12, 0.7333333333333333], [1.71236064E12, 0.4], [1.71236004E12, 1.2833333333333334], [1.71235974E12, 3.7666666666666666], [1.71236046E12, 0.25], [1.71236076E12, 0.43333333333333335], [1.71236082E12, 0.38333333333333336], [1.71236052E12, 0.5], [1.71236022E12, 0.55], [1.71235992E12, 2.1166666666666667], [1.71235962E12, 3.2], [1.71236094E12, 0.13333333333333333], [1.71235968E12, 3.8666666666666667], [1.7123607E12, 0.7], [1.712361E12, 0.48333333333333334], [1.7123604E12, 1.2], [1.7123601E12, 1.3166666666666667], [1.7123598E12, 3.183333333333333], [1.7123595E12, 6.266666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.712361E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7123595E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.71236016E12, 0.4], [1.71235986E12, 2.1333333333333333], [1.71235956E12, 2.1333333333333333], [1.71236058E12, 0.4166666666666667], [1.71236088E12, 0.38333333333333336], [1.71236028E12, 0.2], [1.71235998E12, 0.5], [1.71236034E12, 0.5166666666666667], [1.71236064E12, 0.36666666666666664], [1.71236004E12, 0.36666666666666664], [1.71235974E12, 2.0166666666666666], [1.71236046E12, 0.25], [1.71236076E12, 0.5666666666666667], [1.71236082E12, 0.45], [1.71236052E12, 0.5666666666666667], [1.71236022E12, 0.4166666666666667], [1.71235992E12, 0.6166666666666667], [1.71235962E12, 1.8], [1.71236094E12, 0.23333333333333334], [1.71235968E12, 1.95], [1.7123607E12, 0.8833333333333333], [1.712361E12, 1.55], [1.7123604E12, 1.1166666666666667], [1.7123601E12, 1.0833333333333333], [1.7123598E12, 1.75], [1.7123595E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71236016E12, 0.05], [1.71235986E12, 0.11666666666666667], [1.71235956E12, 0.2833333333333333], [1.71236058E12, 0.06666666666666667], [1.71236088E12, 0.18333333333333332], [1.71235998E12, 0.05], [1.71236034E12, 0.36666666666666664], [1.71236064E12, 0.15], [1.71236004E12, 0.16666666666666666], [1.71235974E12, 0.2], [1.71236046E12, 0.03333333333333333], [1.71236076E12, 0.1], [1.71236082E12, 0.16666666666666666], [1.71236052E12, 0.08333333333333333], [1.71236022E12, 0.13333333333333333], [1.71235992E12, 0.11666666666666667], [1.71235962E12, 0.38333333333333336], [1.71236094E12, 0.08333333333333333], [1.71235968E12, 0.18333333333333332], [1.7123607E12, 0.1], [1.712361E12, 0.016666666666666666], [1.7123604E12, 0.21666666666666667], [1.7123601E12, 0.13333333333333333], [1.7123598E12, 0.2], [1.7123595E12, 1.8833333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71235968E12, 1.05], [1.71235986E12, 1.0666666666666667], [1.71235956E12, 0.7666666666666667], [1.71236004E12, 0.8666666666666667], [1.71235974E12, 1.0833333333333333], [1.71235992E12, 1.15], [1.71235962E12, 0.45], [1.7123601E12, 0.16666666666666666], [1.7123598E12, 0.7], [1.71235998E12, 1.2666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.71235968E12, 0.6833333333333333], [1.71235986E12, 0.7666666666666667], [1.71235956E12, 0.7333333333333333], [1.71236004E12, 0.16666666666666666], [1.71235974E12, 0.4666666666666667], [1.71236022E12, 0.1], [1.71235992E12, 0.5166666666666667], [1.71235962E12, 0.5666666666666667], [1.7123601E12, 0.016666666666666666], [1.7123598E12, 0.5333333333333333], [1.7123595E12, 0.2], [1.71235998E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.712361E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7123595E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.71236016E12, 0.4], [1.71235986E12, 2.1333333333333333], [1.71235956E12, 2.1333333333333333], [1.71236058E12, 0.4166666666666667], [1.71236088E12, 0.38333333333333336], [1.71236028E12, 0.2], [1.71235998E12, 0.5], [1.71236034E12, 0.5166666666666667], [1.71236064E12, 0.36666666666666664], [1.71236004E12, 0.36666666666666664], [1.71235974E12, 2.0166666666666666], [1.71236046E12, 0.25], [1.71236076E12, 0.5666666666666667], [1.71236082E12, 0.45], [1.71236052E12, 0.5666666666666667], [1.71236022E12, 0.4166666666666667], [1.71235992E12, 0.6166666666666667], [1.71235962E12, 1.8], [1.71236094E12, 0.23333333333333334], [1.71235968E12, 1.95], [1.7123607E12, 0.8833333333333333], [1.712361E12, 1.55], [1.7123604E12, 1.1166666666666667], [1.7123601E12, 1.0833333333333333], [1.7123598E12, 1.75], [1.7123595E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request (Mid image)-success", "isController": false}, {"data": [[1.71236016E12, 0.05], [1.71235986E12, 1.95], [1.71235956E12, 1.7833333333333334], [1.71236058E12, 0.06666666666666667], [1.71236088E12, 0.18333333333333332], [1.71235998E12, 1.5166666666666666], [1.71236034E12, 0.36666666666666664], [1.71236064E12, 0.15], [1.71236004E12, 1.2], [1.71235974E12, 1.75], [1.71236046E12, 0.03333333333333333], [1.71236076E12, 0.1], [1.71236082E12, 0.16666666666666666], [1.71236052E12, 0.08333333333333333], [1.71236022E12, 0.23333333333333334], [1.71235992E12, 1.7833333333333334], [1.71235962E12, 1.4], [1.71236094E12, 0.08333333333333333], [1.71235968E12, 1.9166666666666667], [1.7123607E12, 0.1], [1.712361E12, 0.016666666666666666], [1.7123604E12, 0.21666666666666667], [1.7123601E12, 0.31666666666666665], [1.7123598E12, 1.4333333333333333], [1.7123595E12, 2.0833333333333335]], "isOverall": false, "label": "HTTP Request (Mid image)-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.712361E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7123595E12, "maxY": 2.1333333333333333, "series": [{"data": [[1.71236016E12, 0.4], [1.71235986E12, 2.1333333333333333], [1.71235956E12, 2.1333333333333333], [1.71236058E12, 0.4166666666666667], [1.71236088E12, 0.38333333333333336], [1.71236028E12, 0.2], [1.71235998E12, 0.5], [1.71236034E12, 0.5166666666666667], [1.71236064E12, 0.36666666666666664], [1.71236004E12, 0.36666666666666664], [1.71235974E12, 2.0166666666666666], [1.71236046E12, 0.25], [1.71236076E12, 0.5666666666666667], [1.71236082E12, 0.45], [1.71236052E12, 0.5666666666666667], [1.71236022E12, 0.4166666666666667], [1.71235992E12, 0.6166666666666667], [1.71235962E12, 1.8], [1.71236094E12, 0.23333333333333334], [1.71235968E12, 1.95], [1.7123607E12, 0.8833333333333333], [1.712361E12, 1.55], [1.7123604E12, 1.1166666666666667], [1.7123601E12, 1.0833333333333333], [1.7123598E12, 1.75], [1.7123595E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71236016E12, 0.05], [1.71235986E12, 1.95], [1.71235956E12, 1.7833333333333334], [1.71236058E12, 0.06666666666666667], [1.71236088E12, 0.18333333333333332], [1.71235998E12, 1.5166666666666666], [1.71236034E12, 0.36666666666666664], [1.71236064E12, 0.15], [1.71236004E12, 1.2], [1.71235974E12, 1.75], [1.71236046E12, 0.03333333333333333], [1.71236076E12, 0.1], [1.71236082E12, 0.16666666666666666], [1.71236052E12, 0.08333333333333333], [1.71236022E12, 0.23333333333333334], [1.71235992E12, 1.7833333333333334], [1.71235962E12, 1.4], [1.71236094E12, 0.08333333333333333], [1.71235968E12, 1.9166666666666667], [1.7123607E12, 0.1], [1.712361E12, 0.016666666666666666], [1.7123604E12, 0.21666666666666667], [1.7123601E12, 0.31666666666666665], [1.7123598E12, 1.4333333333333333], [1.7123595E12, 2.0833333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.712361E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

