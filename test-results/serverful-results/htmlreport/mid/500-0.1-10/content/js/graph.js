/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 493.0, "minX": 0.0, "maxY": 455073.0, "series": [{"data": [[0.0, 493.0], [0.1, 504.0], [0.2, 508.0], [0.3, 510.0], [0.4, 525.0], [0.5, 526.0], [0.6, 531.0], [0.7, 533.0], [0.8, 536.0], [0.9, 538.0], [1.0, 556.0], [1.1, 560.0], [1.2, 565.0], [1.3, 566.0], [1.4, 570.0], [1.5, 572.0], [1.6, 575.0], [1.7, 577.0], [1.8, 589.0], [1.9, 591.0], [2.0, 594.0], [2.1, 596.0], [2.2, 598.0], [2.3, 598.0], [2.4, 601.0], [2.5, 602.0], [2.6, 603.0], [2.7, 604.0], [2.8, 605.0], [2.9, 606.0], [3.0, 608.0], [3.1, 609.0], [3.2, 612.0], [3.3, 613.0], [3.4, 615.0], [3.5, 616.0], [3.6, 619.0], [3.7, 621.0], [3.8, 629.0], [3.9, 632.0], [4.0, 633.0], [4.1, 635.0], [4.2, 636.0], [4.3, 636.0], [4.4, 637.0], [4.5, 638.0], [4.6, 640.0], [4.7, 641.0], [4.8, 643.0], [4.9, 644.0], [5.0, 645.0], [5.1, 647.0], [5.2, 648.0], [5.3, 649.0], [5.4, 654.0], [5.5, 678.0], [5.6, 681.0], [5.7, 688.0], [5.8, 699.0], [5.9, 1168.0], [6.0, 1171.0], [6.1, 1192.0], [6.2, 1207.0], [6.3, 1209.0], [6.4, 1210.0], [6.5, 1211.0], [6.6, 1212.0], [6.7, 1213.0], [6.8, 1214.0], [6.9, 1220.0], [7.0, 1225.0], [7.1, 1225.0], [7.2, 1226.0], [7.3, 1227.0], [7.4, 1228.0], [7.5, 1228.0], [7.6, 1229.0], [7.7, 1229.0], [7.8, 1230.0], [7.9, 1237.0], [8.0, 1831.0], [8.1, 3500.0], [8.2, 3511.0], [8.3, 3516.0], [8.4, 3532.0], [8.5, 3533.0], [8.6, 3537.0], [8.7, 3539.0], [8.8, 3540.0], [8.9, 3541.0], [9.0, 3541.0], [9.1, 3541.0], [9.2, 3542.0], [9.3, 3543.0], [9.4, 3544.0], [9.5, 3546.0], [9.6, 3547.0], [9.7, 3548.0], [9.8, 3549.0], [9.9, 3550.0], [10.0, 3551.0], [10.1, 3552.0], [10.2, 5726.0], [10.3, 7676.0], [10.4, 7707.0], [10.5, 9722.0], [10.6, 10536.0], [10.7, 10558.0], [10.8, 10579.0], [10.9, 10592.0], [11.0, 10597.0], [11.1, 10608.0], [11.2, 10614.0], [11.3, 10630.0], [11.4, 13706.0], [11.5, 17642.0], [11.6, 19187.0], [11.7, 19202.0], [11.8, 19204.0], [11.9, 19205.0], [12.0, 19208.0], [12.1, 19209.0], [12.2, 19214.0], [12.3, 19219.0], [12.4, 19223.0], [12.5, 19232.0], [12.6, 19261.0], [12.7, 19268.0], [12.8, 19270.0], [12.9, 19281.0], [13.0, 19290.0], [13.1, 19294.0], [13.2, 19300.0], [13.3, 19310.0], [13.4, 19314.0], [13.5, 20045.0], [13.6, 20263.0], [13.7, 20266.0], [13.8, 20278.0], [13.9, 20279.0], [14.0, 20279.0], [14.1, 20281.0], [14.2, 20292.0], [14.3, 20298.0], [14.4, 20306.0], [14.5, 20307.0], [14.6, 20574.0], [14.7, 21011.0], [14.8, 21016.0], [14.9, 21017.0], [15.0, 21018.0], [15.1, 21019.0], [15.2, 21019.0], [15.3, 21019.0], [15.4, 21019.0], [15.5, 21020.0], [15.6, 21020.0], [15.7, 21020.0], [15.8, 21020.0], [15.9, 21021.0], [16.0, 21021.0], [16.1, 21022.0], [16.2, 21022.0], [16.3, 21023.0], [16.4, 21023.0], [16.5, 21023.0], [16.6, 21024.0], [16.7, 21024.0], [16.8, 21024.0], [16.9, 21024.0], [17.0, 21025.0], [17.1, 21025.0], [17.2, 21026.0], [17.3, 21026.0], [17.4, 21026.0], [17.5, 21026.0], [17.6, 21026.0], [17.7, 21026.0], [17.8, 21027.0], [17.9, 21027.0], [18.0, 21027.0], [18.1, 21027.0], [18.2, 21027.0], [18.3, 21027.0], [18.4, 21027.0], [18.5, 21027.0], [18.6, 21027.0], [18.7, 21027.0], [18.8, 21027.0], [18.9, 21027.0], [19.0, 21027.0], [19.1, 21027.0], [19.2, 21028.0], [19.3, 21028.0], [19.4, 21028.0], [19.5, 21028.0], [19.6, 21028.0], [19.7, 21028.0], [19.8, 21028.0], [19.9, 21028.0], [20.0, 21029.0], [20.1, 21029.0], [20.2, 21029.0], [20.3, 21029.0], [20.4, 21029.0], [20.5, 21029.0], [20.6, 21029.0], [20.7, 21029.0], [20.8, 21029.0], [20.9, 21029.0], [21.0, 21030.0], [21.1, 21030.0], [21.2, 21030.0], [21.3, 21030.0], [21.4, 21030.0], [21.5, 21030.0], [21.6, 21030.0], [21.7, 21030.0], [21.8, 21030.0], [21.9, 21030.0], [22.0, 21030.0], [22.1, 21030.0], [22.2, 21030.0], [22.3, 21030.0], [22.4, 21030.0], [22.5, 21031.0], [22.6, 21031.0], [22.7, 21031.0], [22.8, 21031.0], [22.9, 21031.0], [23.0, 21031.0], [23.1, 21031.0], [23.2, 21031.0], [23.3, 21031.0], [23.4, 21031.0], [23.5, 21031.0], [23.6, 21031.0], [23.7, 21031.0], [23.8, 21031.0], [23.9, 21031.0], [24.0, 21031.0], [24.1, 21031.0], [24.2, 21031.0], [24.3, 21031.0], [24.4, 21031.0], [24.5, 21031.0], [24.6, 21031.0], [24.7, 21031.0], [24.8, 21031.0], [24.9, 21032.0], [25.0, 21032.0], [25.1, 21032.0], [25.2, 21032.0], [25.3, 21032.0], [25.4, 21032.0], [25.5, 21032.0], [25.6, 21032.0], [25.7, 21032.0], [25.8, 21032.0], [25.9, 21032.0], [26.0, 21032.0], [26.1, 21032.0], [26.2, 21032.0], [26.3, 21032.0], [26.4, 21032.0], [26.5, 21032.0], [26.6, 21032.0], [26.7, 21032.0], [26.8, 21032.0], [26.9, 21033.0], [27.0, 21033.0], [27.1, 21033.0], [27.2, 21033.0], [27.3, 21033.0], [27.4, 21033.0], [27.5, 21033.0], [27.6, 21033.0], [27.7, 21033.0], [27.8, 21033.0], [27.9, 21033.0], [28.0, 21033.0], [28.1, 21033.0], [28.2, 21033.0], [28.3, 21033.0], [28.4, 21034.0], [28.5, 21034.0], [28.6, 21034.0], [28.7, 21034.0], [28.8, 21034.0], [28.9, 21034.0], [29.0, 21034.0], [29.1, 21034.0], [29.2, 21034.0], [29.3, 21034.0], [29.4, 21034.0], [29.5, 21034.0], [29.6, 21034.0], [29.7, 21034.0], [29.8, 21034.0], [29.9, 21035.0], [30.0, 21035.0], [30.1, 21035.0], [30.2, 21035.0], [30.3, 21035.0], [30.4, 21035.0], [30.5, 21035.0], [30.6, 21035.0], [30.7, 21035.0], [30.8, 21035.0], [30.9, 21035.0], [31.0, 21035.0], [31.1, 21036.0], [31.2, 21036.0], [31.3, 21036.0], [31.4, 21036.0], [31.5, 21036.0], [31.6, 21036.0], [31.7, 21036.0], [31.8, 21036.0], [31.9, 21036.0], [32.0, 21036.0], [32.1, 21036.0], [32.2, 21036.0], [32.3, 21036.0], [32.4, 21036.0], [32.5, 21036.0], [32.6, 21037.0], [32.7, 21037.0], [32.8, 21037.0], [32.9, 21037.0], [33.0, 21037.0], [33.1, 21037.0], [33.2, 21037.0], [33.3, 21037.0], [33.4, 21037.0], [33.5, 21037.0], [33.6, 21037.0], [33.7, 21037.0], [33.8, 21037.0], [33.9, 21037.0], [34.0, 21037.0], [34.1, 21038.0], [34.2, 21038.0], [34.3, 21038.0], [34.4, 21038.0], [34.5, 21038.0], [34.6, 21038.0], [34.7, 21038.0], [34.8, 21038.0], [34.9, 21038.0], [35.0, 21038.0], [35.1, 21038.0], [35.2, 21038.0], [35.3, 21039.0], [35.4, 21039.0], [35.5, 21039.0], [35.6, 21039.0], [35.7, 21039.0], [35.8, 21039.0], [35.9, 21039.0], [36.0, 21039.0], [36.1, 21039.0], [36.2, 21039.0], [36.3, 21039.0], [36.4, 21039.0], [36.5, 21039.0], [36.6, 21039.0], [36.7, 21039.0], [36.8, 21039.0], [36.9, 21039.0], [37.0, 21039.0], [37.1, 21039.0], [37.2, 21039.0], [37.3, 21039.0], [37.4, 21039.0], [37.5, 21039.0], [37.6, 21039.0], [37.7, 21039.0], [37.8, 21039.0], [37.9, 21039.0], [38.0, 21040.0], [38.1, 21040.0], [38.2, 21040.0], [38.3, 21040.0], [38.4, 21040.0], [38.5, 21040.0], [38.6, 21040.0], [38.7, 21040.0], [38.8, 21040.0], [38.9, 21040.0], [39.0, 21040.0], [39.1, 21040.0], [39.2, 21040.0], [39.3, 21040.0], [39.4, 21040.0], [39.5, 21040.0], [39.6, 21040.0], [39.7, 21040.0], [39.8, 21040.0], [39.9, 21040.0], [40.0, 21040.0], [40.1, 21040.0], [40.2, 21040.0], [40.3, 21040.0], [40.4, 21041.0], [40.5, 21041.0], [40.6, 21041.0], [40.7, 21041.0], [40.8, 21041.0], [40.9, 21041.0], [41.0, 21041.0], [41.1, 21041.0], [41.2, 21041.0], [41.3, 21041.0], [41.4, 21041.0], [41.5, 21041.0], [41.6, 21041.0], [41.7, 21041.0], [41.8, 21041.0], [41.9, 21041.0], [42.0, 21041.0], [42.1, 21041.0], [42.2, 21041.0], [42.3, 21041.0], [42.4, 21041.0], [42.5, 21041.0], [42.6, 21041.0], [42.7, 21041.0], [42.8, 21041.0], [42.9, 21041.0], [43.0, 21041.0], [43.1, 21041.0], [43.2, 21041.0], [43.3, 21041.0], [43.4, 21041.0], [43.5, 21041.0], [43.6, 21041.0], [43.7, 21041.0], [43.8, 21042.0], [43.9, 21042.0], [44.0, 21042.0], [44.1, 21042.0], [44.2, 21042.0], [44.3, 21042.0], [44.4, 21042.0], [44.5, 21042.0], [44.6, 21042.0], [44.7, 21042.0], [44.8, 21042.0], [44.9, 21042.0], [45.0, 21042.0], [45.1, 21042.0], [45.2, 21042.0], [45.3, 21042.0], [45.4, 21042.0], [45.5, 21042.0], [45.6, 21042.0], [45.7, 21042.0], [45.8, 21042.0], [45.9, 21042.0], [46.0, 21042.0], [46.1, 21042.0], [46.2, 21042.0], [46.3, 21042.0], [46.4, 21042.0], [46.5, 21042.0], [46.6, 21043.0], [46.7, 21043.0], [46.8, 21043.0], [46.9, 21043.0], [47.0, 21043.0], [47.1, 21043.0], [47.2, 21043.0], [47.3, 21043.0], [47.4, 21043.0], [47.5, 21043.0], [47.6, 21043.0], [47.7, 21043.0], [47.8, 21043.0], [47.9, 21043.0], [48.0, 21043.0], [48.1, 21043.0], [48.2, 21043.0], [48.3, 21043.0], [48.4, 21043.0], [48.5, 21044.0], [48.6, 21044.0], [48.7, 21044.0], [48.8, 21044.0], [48.9, 21044.0], [49.0, 21044.0], [49.1, 21044.0], [49.2, 21044.0], [49.3, 21044.0], [49.4, 21044.0], [49.5, 21044.0], [49.6, 21044.0], [49.7, 21044.0], [49.8, 21044.0], [49.9, 21044.0], [50.0, 21044.0], [50.1, 21044.0], [50.2, 21044.0], [50.3, 21044.0], [50.4, 21044.0], [50.5, 21045.0], [50.6, 21045.0], [50.7, 21045.0], [50.8, 21045.0], [50.9, 21045.0], [51.0, 21045.0], [51.1, 21045.0], [51.2, 21045.0], [51.3, 21045.0], [51.4, 21045.0], [51.5, 21045.0], [51.6, 21045.0], [51.7, 21045.0], [51.8, 21045.0], [51.9, 21045.0], [52.0, 21045.0], [52.1, 21045.0], [52.2, 21045.0], [52.3, 21045.0], [52.4, 21045.0], [52.5, 21045.0], [52.6, 21045.0], [52.7, 21045.0], [52.8, 21045.0], [52.9, 21045.0], [53.0, 21046.0], [53.1, 21046.0], [53.2, 21046.0], [53.3, 21046.0], [53.4, 21046.0], [53.5, 21046.0], [53.6, 21046.0], [53.7, 21046.0], [53.8, 21046.0], [53.9, 21046.0], [54.0, 21046.0], [54.1, 21046.0], [54.2, 21046.0], [54.3, 21046.0], [54.4, 21046.0], [54.5, 21046.0], [54.6, 21046.0], [54.7, 21046.0], [54.8, 21046.0], [54.9, 21046.0], [55.0, 21046.0], [55.1, 21046.0], [55.2, 21046.0], [55.3, 21046.0], [55.4, 21046.0], [55.5, 21046.0], [55.6, 21046.0], [55.7, 21046.0], [55.8, 21046.0], [55.9, 21047.0], [56.0, 21047.0], [56.1, 21047.0], [56.2, 21047.0], [56.3, 21047.0], [56.4, 21047.0], [56.5, 21047.0], [56.6, 21047.0], [56.7, 21047.0], [56.8, 21047.0], [56.9, 21047.0], [57.0, 21047.0], [57.1, 21047.0], [57.2, 21047.0], [57.3, 21047.0], [57.4, 21047.0], [57.5, 21047.0], [57.6, 21047.0], [57.7, 21047.0], [57.8, 21048.0], [57.9, 21048.0], [58.0, 21048.0], [58.1, 21048.0], [58.2, 21048.0], [58.3, 21048.0], [58.4, 21048.0], [58.5, 21048.0], [58.6, 21048.0], [58.7, 21048.0], [58.8, 21048.0], [58.9, 21048.0], [59.0, 21049.0], [59.1, 21049.0], [59.2, 21049.0], [59.3, 21049.0], [59.4, 21049.0], [59.5, 21049.0], [59.6, 21049.0], [59.7, 21049.0], [59.8, 21049.0], [59.9, 21050.0], [60.0, 21050.0], [60.1, 21050.0], [60.2, 21050.0], [60.3, 21050.0], [60.4, 21050.0], [60.5, 21050.0], [60.6, 21050.0], [60.7, 21050.0], [60.8, 21050.0], [60.9, 21050.0], [61.0, 21050.0], [61.1, 21050.0], [61.2, 21050.0], [61.3, 21050.0], [61.4, 21051.0], [61.5, 21051.0], [61.6, 21051.0], [61.7, 21051.0], [61.8, 21051.0], [61.9, 21051.0], [62.0, 21051.0], [62.1, 21051.0], [62.2, 21051.0], [62.3, 21051.0], [62.4, 21051.0], [62.5, 21051.0], [62.6, 21051.0], [62.7, 21052.0], [62.8, 21052.0], [62.9, 21052.0], [63.0, 21052.0], [63.1, 21052.0], [63.2, 21052.0], [63.3, 21052.0], [63.4, 21052.0], [63.5, 21052.0], [63.6, 21052.0], [63.7, 21052.0], [63.8, 21053.0], [63.9, 21053.0], [64.0, 21053.0], [64.1, 21053.0], [64.2, 21053.0], [64.3, 21053.0], [64.4, 21053.0], [64.5, 21053.0], [64.6, 21054.0], [64.7, 21054.0], [64.8, 21054.0], [64.9, 21054.0], [65.0, 21054.0], [65.1, 21054.0], [65.2, 21054.0], [65.3, 21054.0], [65.4, 21054.0], [65.5, 21054.0], [65.6, 21055.0], [65.7, 21055.0], [65.8, 21055.0], [65.9, 21055.0], [66.0, 21055.0], [66.1, 21055.0], [66.2, 21055.0], [66.3, 21055.0], [66.4, 21055.0], [66.5, 21055.0], [66.6, 21055.0], [66.7, 21055.0], [66.8, 21055.0], [66.9, 21055.0], [67.0, 21055.0], [67.1, 21055.0], [67.2, 21056.0], [67.3, 21056.0], [67.4, 21056.0], [67.5, 21056.0], [67.6, 21056.0], [67.7, 21056.0], [67.8, 21056.0], [67.9, 21057.0], [68.0, 21058.0], [68.1, 21058.0], [68.2, 21058.0], [68.3, 21059.0], [68.4, 21059.0], [68.5, 21060.0], [68.6, 21060.0], [68.7, 21061.0], [68.8, 21062.0], [68.9, 21084.0], [69.0, 22353.0], [69.1, 22361.0], [69.2, 22366.0], [69.3, 22366.0], [69.4, 22366.0], [69.5, 22367.0], [69.6, 22367.0], [69.7, 22369.0], [69.8, 22370.0], [69.9, 22372.0], [70.0, 22374.0], [70.1, 22376.0], [70.2, 22376.0], [70.3, 22379.0], [70.4, 22382.0], [70.5, 22383.0], [70.6, 22383.0], [70.7, 22384.0], [70.8, 22385.0], [70.9, 23086.0], [71.0, 23591.0], [71.1, 24467.0], [71.2, 26308.0], [71.3, 26364.0], [71.4, 26369.0], [71.5, 26375.0], [71.6, 26381.0], [71.7, 26389.0], [71.8, 26391.0], [71.9, 26430.0], [72.0, 26441.0], [72.1, 27228.0], [72.2, 28482.0], [72.3, 28530.0], [72.4, 28606.0], [72.5, 30136.0], [72.6, 34380.0], [72.7, 34381.0], [72.8, 34409.0], [72.9, 34410.0], [73.0, 34411.0], [73.1, 36537.0], [73.2, 43751.0], [73.3, 44888.0], [73.4, 46893.0], [73.5, 51015.0], [73.6, 53747.0], [73.7, 67498.0], [73.8, 73641.0], [73.9, 74546.0], [74.0, 81277.0], [74.1, 90988.0], [74.2, 93147.0], [74.3, 107485.0], [74.4, 111504.0], [74.5, 121661.0], [74.6, 126731.0], [74.7, 132019.0], [74.8, 134005.0], [74.9, 136110.0], [75.0, 136590.0], [75.1, 137338.0], [75.2, 137751.0], [75.3, 139321.0], [75.4, 140077.0], [75.5, 141909.0], [75.6, 143015.0], [75.7, 144919.0], [75.8, 145609.0], [75.9, 147737.0], [76.0, 149187.0], [76.1, 149919.0], [76.2, 150579.0], [76.3, 150736.0], [76.4, 150742.0], [76.5, 150755.0], [76.6, 150759.0], [76.7, 150769.0], [76.8, 150888.0], [76.9, 151410.0], [77.0, 152413.0], [77.1, 152986.0], [77.2, 153999.0], [77.3, 154396.0], [77.4, 155486.0], [77.5, 155831.0], [77.6, 156852.0], [77.7, 157197.0], [77.8, 159999.0], [77.9, 160650.0], [78.0, 161795.0], [78.1, 162795.0], [78.2, 163489.0], [78.3, 164450.0], [78.4, 165869.0], [78.5, 166710.0], [78.6, 168159.0], [78.7, 168950.0], [78.8, 169776.0], [78.9, 171576.0], [79.0, 172019.0], [79.1, 172027.0], [79.2, 172031.0], [79.3, 172045.0], [79.4, 172392.0], [79.5, 173587.0], [79.6, 174643.0], [79.7, 175292.0], [79.8, 176010.0], [79.9, 178378.0], [80.0, 179697.0], [80.1, 181878.0], [80.2, 182651.0], [80.3, 183341.0], [80.4, 184667.0], [80.5, 185522.0], [80.6, 186356.0], [80.7, 186900.0], [80.8, 187323.0], [80.9, 187794.0], [81.0, 188750.0], [81.1, 189700.0], [81.2, 190351.0], [81.3, 190917.0], [81.4, 192014.0], [81.5, 193383.0], [81.6, 194883.0], [81.7, 196923.0], [81.8, 199179.0], [81.9, 199978.0], [82.0, 201837.0], [82.1, 202441.0], [82.2, 204318.0], [82.3, 207182.0], [82.4, 209858.0], [82.5, 211235.0], [82.6, 212977.0], [82.7, 214059.0], [82.8, 215446.0], [82.9, 216544.0], [83.0, 218512.0], [83.1, 220420.0], [83.2, 222803.0], [83.3, 224216.0], [83.4, 225460.0], [83.5, 226802.0], [83.6, 228531.0], [83.7, 230552.0], [83.8, 231566.0], [83.9, 233845.0], [84.0, 235866.0], [84.1, 236532.0], [84.2, 238306.0], [84.3, 240551.0], [84.4, 242061.0], [84.5, 243925.0], [84.6, 246308.0], [84.7, 247649.0], [84.8, 250608.0], [84.9, 252450.0], [85.0, 255293.0], [85.1, 256692.0], [85.2, 258267.0], [85.3, 261011.0], [85.4, 263241.0], [85.5, 263845.0], [85.6, 265113.0], [85.7, 266096.0], [85.8, 267384.0], [85.9, 268097.0], [86.0, 268586.0], [86.1, 269146.0], [86.2, 269561.0], [86.3, 270235.0], [86.4, 271351.0], [86.5, 272799.0], [86.6, 273410.0], [86.7, 274461.0], [86.8, 276841.0], [86.9, 277701.0], [87.0, 278244.0], [87.1, 280096.0], [87.2, 281605.0], [87.3, 281808.0], [87.4, 281993.0], [87.5, 282759.0], [87.6, 284301.0], [87.7, 286171.0], [87.8, 287014.0], [87.9, 287649.0], [88.0, 288473.0], [88.1, 289174.0], [88.2, 289890.0], [88.3, 291049.0], [88.4, 291821.0], [88.5, 292985.0], [88.6, 293924.0], [88.7, 294643.0], [88.8, 295462.0], [88.9, 296182.0], [89.0, 297047.0], [89.1, 298084.0], [89.2, 299101.0], [89.3, 300167.0], [89.4, 300785.0], [89.5, 300991.0], [89.6, 301722.0], [89.7, 302391.0], [89.8, 302648.0], [89.9, 303342.0], [90.0, 303669.0], [90.1, 304788.0], [90.2, 305252.0], [90.3, 306076.0], [90.4, 306380.0], [90.5, 306919.0], [90.6, 307168.0], [90.7, 307280.0], [90.8, 307392.0], [90.9, 307507.0], [91.0, 307550.0], [91.1, 307747.0], [91.2, 307793.0], [91.3, 307942.0], [91.4, 308139.0], [91.5, 308291.0], [91.6, 308586.0], [91.7, 309030.0], [91.8, 309190.0], [91.9, 309313.0], [92.0, 309546.0], [92.1, 309973.0], [92.2, 310348.0], [92.3, 310679.0], [92.4, 311464.0], [92.5, 311784.0], [92.6, 312451.0], [92.7, 312601.0], [92.8, 313020.0], [92.9, 313741.0], [93.0, 314142.0], [93.1, 314389.0], [93.2, 314761.0], [93.3, 315308.0], [93.4, 316085.0], [93.5, 316514.0], [93.6, 316930.0], [93.7, 317535.0], [93.8, 317976.0], [93.9, 318654.0], [94.0, 319635.0], [94.1, 319798.0], [94.2, 320462.0], [94.3, 321249.0], [94.4, 321830.0], [94.5, 321944.0], [94.6, 322497.0], [94.7, 323181.0], [94.8, 323750.0], [94.9, 324665.0], [95.0, 325405.0], [95.1, 326637.0], [95.2, 327687.0], [95.3, 328405.0], [95.4, 329149.0], [95.5, 330977.0], [95.6, 333295.0], [95.7, 334597.0], [95.8, 336643.0], [95.9, 338744.0], [96.0, 339533.0], [96.1, 341837.0], [96.2, 342934.0], [96.3, 344879.0], [96.4, 347863.0], [96.5, 350673.0], [96.6, 352053.0], [96.7, 353058.0], [96.8, 354459.0], [96.9, 357193.0], [97.0, 359032.0], [97.1, 360764.0], [97.2, 362872.0], [97.3, 363639.0], [97.4, 364790.0], [97.5, 365300.0], [97.6, 367456.0], [97.7, 371067.0], [97.8, 372489.0], [97.9, 373231.0], [98.0, 377538.0], [98.1, 379205.0], [98.2, 380179.0], [98.3, 382479.0], [98.4, 385875.0], [98.5, 388608.0], [98.6, 390435.0], [98.7, 393218.0], [98.8, 395276.0], [98.9, 396727.0], [99.0, 400498.0], [99.1, 409235.0], [99.2, 413838.0], [99.3, 416901.0], [99.4, 417457.0], [99.5, 425259.0], [99.6, 432541.0], [99.7, 437730.0], [99.8, 442746.0], [99.9, 444855.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 2714.0, "series": [{"data": [[135200.0, 1.0], [300100.0, 3.0], [312900.0, 2.0], [180000.0, 1.0], [364100.0, 2.0], [389700.0, 1.0], [199200.0, 1.0], [308800.0, 1.0], [321600.0, 1.0], [398400.0, 1.0], [269900.0, 1.0], [282700.0, 2.0], [139300.0, 2.0], [308300.0, 2.0], [295500.0, 1.0], [164900.0, 1.0], [359500.0, 3.0], [346700.0, 1.0], [184100.0, 2.0], [190500.0, 1.0], [196900.0, 1.0], [216100.0, 1.0], [254500.0, 1.0], [291400.0, 1.0], [342600.0, 1.0], [111500.0, 1.0], [149800.0, 1.0], [316500.0, 1.0], [156200.0, 1.0], [181800.0, 2.0], [188200.0, 1.0], [393300.0, 1.0], [207400.0, 1.0], [444500.0, 1.0], [286800.0, 1.0], [299600.0, 1.0], [312400.0, 3.0], [338000.0, 1.0], [350800.0, 1.0], [363600.0, 2.0], [376400.0, 1.0], [273500.0, 1.0], [299100.0, 1.0], [153900.0, 1.0], [324700.0, 2.0], [166700.0, 1.0], [173100.0, 1.0], [44100.0, 1.0], [179500.0, 1.0], [198700.0, 1.0], [211500.0, 1.0], [53700.0, 1.0], [230700.0, 2.0], [282200.0, 2.0], [307800.0, 3.0], [320600.0, 1.0], [333400.0, 1.0], [359000.0, 1.0], [371800.0, 1.0], [91400.0, 1.0], [400.0, 4.0], [107400.0, 1.0], [113800.0, 1.0], [500.0, 114.0], [129800.0, 1.0], [268900.0, 1.0], [138800.0, 1.0], [281700.0, 1.0], [600.0, 173.0], [151600.0, 2.0], [307300.0, 4.0], [320100.0, 1.0], [164400.0, 2.0], [700.0, 4.0], [177200.0, 1.0], [196400.0, 1.0], [247600.0, 2.0], [277600.0, 1.0], [1100.0, 14.0], [290400.0, 1.0], [1200.0, 89.0], [316000.0, 1.0], [1400.0, 1.0], [354400.0, 1.0], [1500.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [136500.0, 1.0], [149300.0, 2.0], [2500.0, 1.0], [187700.0, 1.0], [3400.0, 1.0], [219700.0, 1.0], [213300.0, 1.0], [3500.0, 105.0], [285800.0, 1.0], [298600.0, 2.0], [74500.0, 1.0], [311400.0, 3.0], [6000.0, 1.0], [413800.0, 1.0], [6600.0, 1.0], [106500.0, 1.0], [7600.0, 2.0], [122500.0, 1.0], [147000.0, 1.0], [9600.0, 1.0], [323700.0, 1.0], [10400.0, 1.0], [185400.0, 2.0], [400500.0, 1.0], [413300.0, 1.0], [13600.0, 2.0], [243000.0, 1.0], [15600.0, 1.0], [281200.0, 1.0], [294000.0, 1.0], [17600.0, 1.0], [19200.0, 74.0], [319600.0, 3.0], [20000.0, 1.0], [409200.0, 1.0], [26400.0, 9.0], [27200.0, 1.0], [28000.0, 1.0], [29600.0, 1.0], [267900.0, 1.0], [144700.0, 1.0], [293500.0, 1.0], [306300.0, 1.0], [151100.0, 1.0], [319100.0, 1.0], [170300.0, 1.0], [44800.0, 1.0], [183100.0, 1.0], [395900.0, 1.0], [215100.0, 1.0], [447100.0, 1.0], [234300.0, 2.0], [247100.0, 1.0], [259900.0, 1.0], [263800.0, 2.0], [276600.0, 1.0], [73600.0, 2.0], [327800.0, 1.0], [417400.0, 2.0], [121600.0, 1.0], [272900.0, 1.0], [147200.0, 1.0], [153600.0, 1.0], [160000.0, 1.0], [349700.0, 1.0], [179200.0, 2.0], [362500.0, 1.0], [192000.0, 1.0], [211200.0, 2.0], [236800.0, 1.0], [281600.0, 3.0], [307200.0, 7.0], [320000.0, 1.0], [396800.0, 1.0], [268300.0, 1.0], [293900.0, 1.0], [144900.0, 2.0], [306700.0, 1.0], [157700.0, 1.0], [183300.0, 1.0], [383500.0, 1.0], [189700.0, 2.0], [240900.0, 1.0], [260100.0, 1.0], [277000.0, 1.0], [289800.0, 3.0], [73500.0, 1.0], [302600.0, 3.0], [353800.0, 2.0], [263700.0, 1.0], [136200.0, 3.0], [289300.0, 1.0], [155400.0, 1.0], [302100.0, 1.0], [314900.0, 1.0], [161800.0, 2.0], [168200.0, 1.0], [174600.0, 1.0], [366100.0, 1.0], [187400.0, 3.0], [391700.0, 1.0], [417300.0, 1.0], [213000.0, 1.0], [219400.0, 1.0], [245000.0, 1.0], [285200.0, 1.0], [310800.0, 1.0], [298000.0, 1.0], [336400.0, 1.0], [362000.0, 2.0], [387600.0, 1.0], [400400.0, 1.0], [140300.0, 2.0], [284700.0, 1.0], [153100.0, 1.0], [297500.0, 1.0], [310300.0, 2.0], [323100.0, 2.0], [165900.0, 1.0], [172300.0, 1.0], [45900.0, 1.0], [49100.0, 1.0], [204300.0, 1.0], [210700.0, 1.0], [223500.0, 1.0], [236300.0, 1.0], [242700.0, 1.0], [267800.0, 1.0], [293400.0, 1.0], [306200.0, 1.0], [319000.0, 1.0], [85400.0, 1.0], [123800.0, 1.0], [267300.0, 2.0], [292900.0, 1.0], [280100.0, 1.0], [150800.0, 2.0], [305700.0, 1.0], [331300.0, 1.0], [195600.0, 1.0], [202000.0, 2.0], [246800.0, 1.0], [263200.0, 1.0], [327200.0, 1.0], [314400.0, 1.0], [352800.0, 1.0], [378400.0, 1.0], [416800.0, 1.0], [135700.0, 1.0], [288300.0, 1.0], [301100.0, 1.0], [313900.0, 1.0], [339500.0, 2.0], [174100.0, 1.0], [365100.0, 2.0], [186900.0, 4.0], [193300.0, 1.0], [199700.0, 1.0], [212500.0, 2.0], [225300.0, 1.0], [271400.0, 2.0], [309800.0, 1.0], [297000.0, 1.0], [322600.0, 2.0], [90900.0, 1.0], [129300.0, 1.0], [270900.0, 1.0], [139800.0, 1.0], [309300.0, 3.0], [152600.0, 2.0], [322100.0, 1.0], [159000.0, 1.0], [347700.0, 1.0], [184600.0, 1.0], [216600.0, 1.0], [223000.0, 1.0], [229400.0, 2.0], [235800.0, 1.0], [248600.0, 1.0], [19300.0, 14.0], [305200.0, 3.0], [330800.0, 1.0], [22500.0, 1.0], [23300.0, 1.0], [25700.0, 2.0], [27300.0, 3.0], [266300.0, 1.0], [304700.0, 1.0], [37000.0, 1.0], [317500.0, 1.0], [156700.0, 1.0], [163100.0, 2.0], [169500.0, 1.0], [43400.0, 1.0], [188700.0, 1.0], [48200.0, 1.0], [227100.0, 2.0], [246300.0, 1.0], [287800.0, 1.0], [70800.0, 1.0], [364600.0, 2.0], [390200.0, 2.0], [377400.0, 1.0], [277700.0, 1.0], [136800.0, 2.0], [143200.0, 1.0], [303300.0, 3.0], [316100.0, 1.0], [156000.0, 1.0], [175200.0, 1.0], [392900.0, 1.0], [380100.0, 1.0], [194400.0, 1.0], [213600.0, 1.0], [226400.0, 1.0], [273600.0, 1.0], [299200.0, 1.0], [312000.0, 1.0], [376000.0, 1.0], [363200.0, 1.0], [273100.0, 2.0], [298700.0, 1.0], [324300.0, 1.0], [311500.0, 1.0], [166500.0, 1.0], [192100.0, 1.0], [230500.0, 1.0], [294600.0, 3.0], [281800.0, 4.0], [307400.0, 3.0], [73900.0, 1.0], [93100.0, 1.0], [384200.0, 2.0], [268500.0, 2.0], [145000.0, 1.0], [294100.0, 1.0], [151400.0, 2.0], [306900.0, 1.0], [319700.0, 3.0], [164200.0, 1.0], [345300.0, 1.0], [396500.0, 1.0], [215400.0, 1.0], [315600.0, 1.0], [328400.0, 2.0], [379600.0, 1.0], [443600.0, 1.0], [136300.0, 1.0], [36500.0, 2.0], [142700.0, 2.0], [155500.0, 3.0], [302300.0, 2.0], [149100.0, 1.0], [315100.0, 2.0], [161900.0, 1.0], [327900.0, 2.0], [42900.0, 1.0], [168300.0, 1.0], [174700.0, 2.0], [366300.0, 1.0], [219500.0, 1.0], [298200.0, 1.0], [323800.0, 3.0], [336600.0, 1.0], [105000.0, 1.0], [111400.0, 1.0], [134000.0, 1.0], [146800.0, 1.0], [297700.0, 1.0], [153200.0, 1.0], [323300.0, 1.0], [185200.0, 1.0], [387300.0, 1.0], [191600.0, 1.0], [262000.0, 1.0], [268000.0, 1.0], [280800.0, 1.0], [293600.0, 1.0], [306400.0, 2.0], [319200.0, 1.0], [332000.0, 1.0], [344800.0, 1.0], [421600.0, 1.0], [267500.0, 1.0], [150900.0, 2.0], [344300.0, 1.0], [357100.0, 1.0], [182900.0, 2.0], [202100.0, 1.0], [227700.0, 1.0], [240500.0, 4.0], [259700.0, 1.0], [263400.0, 1.0], [340200.0, 1.0], [84900.0, 1.0], [353000.0, 1.0], [275700.0, 1.0], [9700.0, 3.0], [155000.0, 1.0], [148600.0, 1.0], [161400.0, 1.0], [314100.0, 1.0], [10500.0, 24.0], [339700.0, 1.0], [174200.0, 1.0], [365300.0, 2.0], [193400.0, 1.0], [13700.0, 1.0], [225400.0, 1.0], [251000.0, 1.0], [297200.0, 2.0], [19400.0, 1.0], [20200.0, 40.0], [322800.0, 1.0], [21000.0, 2714.0], [25800.0, 1.0], [425200.0, 1.0], [296700.0, 1.0], [309500.0, 2.0], [322300.0, 1.0], [171900.0, 1.0], [347900.0, 1.0], [178300.0, 1.0], [360700.0, 1.0], [46800.0, 2.0], [184700.0, 1.0], [386300.0, 1.0], [399100.0, 1.0], [203900.0, 1.0], [216700.0, 2.0], [223100.0, 2.0], [242300.0, 1.0], [292600.0, 1.0], [279800.0, 1.0], [305400.0, 1.0], [74400.0, 1.0], [343800.0, 1.0], [356600.0, 1.0], [109600.0, 1.0], [263300.0, 1.0], [136000.0, 1.0], [288900.0, 2.0], [301700.0, 1.0], [314500.0, 2.0], [174400.0, 1.0], [378500.0, 2.0], [416900.0, 4.0], [225600.0, 1.0], [238400.0, 1.0], [244800.0, 1.0], [257600.0, 1.0], [310400.0, 2.0], [323200.0, 1.0], [146500.0, 1.0], [284300.0, 1.0], [309900.0, 4.0], [152900.0, 1.0], [386700.0, 1.0], [412300.0, 1.0], [236100.0, 3.0], [293000.0, 1.0], [318600.0, 3.0], [80700.0, 1.0], [93500.0, 1.0], [137800.0, 1.0], [292500.0, 1.0], [150600.0, 1.0], [318100.0, 1.0], [163400.0, 1.0], [157000.0, 1.0], [330900.0, 1.0], [176200.0, 1.0], [182600.0, 1.0], [189000.0, 2.0], [407700.0, 1.0], [201800.0, 1.0], [214600.0, 1.0], [221000.0, 1.0], [233800.0, 1.0], [288400.0, 1.0], [301200.0, 1.0], [314000.0, 2.0], [365200.0, 2.0], [390800.0, 1.0], [141900.0, 1.0], [300700.0, 2.0], [326300.0, 3.0], [167500.0, 1.0], [44700.0, 1.0], [364700.0, 1.0], [377500.0, 1.0], [49500.0, 1.0], [51100.0, 1.0], [205900.0, 2.0], [218700.0, 1.0], [231500.0, 1.0], [244300.0, 1.0], [250700.0, 1.0], [309400.0, 2.0], [347800.0, 1.0], [89400.0, 1.0], [115000.0, 1.0], [131000.0, 1.0], [270500.0, 2.0], [139600.0, 1.0], [152400.0, 3.0], [308900.0, 1.0], [296100.0, 2.0], [321700.0, 1.0], [334500.0, 1.0], [165200.0, 1.0], [360100.0, 1.0], [190800.0, 2.0], [210000.0, 1.0], [222800.0, 1.0], [242000.0, 1.0], [261200.0, 1.0], [292000.0, 1.0], [343200.0, 1.0], [330400.0, 1.0], [381600.0, 1.0], [394400.0, 1.0], [137300.0, 5.0], [265900.0, 1.0], [291500.0, 2.0], [143700.0, 1.0], [150100.0, 3.0], [175700.0, 1.0], [381100.0, 2.0], [188500.0, 1.0], [406700.0, 1.0], [207700.0, 1.0], [214100.0, 1.0], [313000.0, 3.0], [338600.0, 1.0], [274100.0, 1.0], [286900.0, 1.0], [154200.0, 3.0], [160600.0, 1.0], [325300.0, 1.0], [312500.0, 3.0], [338100.0, 1.0], [350900.0, 1.0], [205400.0, 2.0], [256600.0, 1.0], [308400.0, 1.0], [295600.0, 1.0], [20300.0, 14.0], [321200.0, 2.0], [19500.0, 1.0], [21100.0, 1.0], [23500.0, 3.0], [372400.0, 2.0], [24300.0, 2.0], [410800.0, 1.0], [269500.0, 2.0], [132700.0, 1.0], [307900.0, 2.0], [320700.0, 1.0], [47000.0, 1.0], [190300.0, 1.0], [228700.0, 1.0], [56600.0, 1.0], [241500.0, 1.0], [265400.0, 1.0], [278200.0, 1.0], [291000.0, 1.0], [71600.0, 1.0], [303800.0, 1.0], [316600.0, 1.0], [81200.0, 1.0], [110000.0, 1.0], [268100.0, 1.0], [132000.0, 1.0], [157600.0, 1.0], [189600.0, 1.0], [202400.0, 1.0], [208800.0, 1.0], [215200.0, 1.0], [228000.0, 1.0], [253600.0, 1.0], [276800.0, 1.0], [264000.0, 1.0], [289600.0, 1.0], [302400.0, 1.0], [328000.0, 1.0], [379200.0, 1.0], [263500.0, 1.0], [136100.0, 2.0], [289100.0, 1.0], [142500.0, 2.0], [155300.0, 1.0], [301900.0, 2.0], [148900.0, 1.0], [327500.0, 3.0], [314700.0, 2.0], [161700.0, 1.0], [168100.0, 2.0], [353100.0, 1.0], [174500.0, 1.0], [187300.0, 1.0], [378700.0, 1.0], [200100.0, 1.0], [212900.0, 1.0], [442700.0, 1.0], [225700.0, 1.0], [310600.0, 2.0], [323400.0, 1.0], [400200.0, 1.0], [271700.0, 1.0], [133800.0, 1.0], [310100.0, 1.0], [165800.0, 2.0], [172200.0, 1.0], [450900.0, 1.0], [242600.0, 1.0], [306000.0, 2.0], [357200.0, 1.0], [395600.0, 2.0], [279900.0, 2.0], [150700.0, 27.0], [305500.0, 1.0], [157100.0, 2.0], [318300.0, 2.0], [163500.0, 1.0], [169900.0, 1.0], [356700.0, 2.0], [44900.0, 1.0], [195500.0, 1.0], [51300.0, 1.0], [253100.0, 1.0], [263000.0, 1.0], [67400.0, 1.0], [288600.0, 1.0], [77000.0, 1.0], [73800.0, 1.0], [314200.0, 3.0], [93000.0, 1.0], [455000.0, 1.0], [118600.0, 1.0], [300900.0, 4.0], [313700.0, 2.0], [339300.0, 1.0], [352100.0, 1.0], [186800.0, 4.0], [199600.0, 2.0], [257200.0, 2.0], [322400.0, 2.0], [360800.0, 1.0], [309100.0, 6.0], [296300.0, 1.0], [321900.0, 3.0], [373100.0, 1.0], [190900.0, 2.0], [210100.0, 1.0], [216500.0, 1.0], [229300.0, 1.0], [279400.0, 1.0], [317800.0, 2.0], [5700.0, 1.0], [6500.0, 1.0], [7700.0, 8.0], [266100.0, 1.0], [137400.0, 1.0], [304500.0, 1.0], [150200.0, 1.0], [317300.0, 1.0], [10600.0, 14.0], [169400.0, 2.0], [342900.0, 1.0], [330100.0, 1.0], [368500.0, 2.0], [432500.0, 1.0], [220600.0, 2.0], [13400.0, 1.0], [15400.0, 1.0], [274800.0, 1.0], [287600.0, 3.0], [300400.0, 1.0], [19600.0, 1.0], [313200.0, 1.0], [338800.0, 2.0], [24400.0, 3.0], [28400.0, 3.0], [29200.0, 1.0], [34400.0, 13.0], [274300.0, 1.0], [287100.0, 1.0], [154300.0, 2.0], [147900.0, 1.0], [173500.0, 1.0], [186300.0, 1.0], [192700.0, 1.0], [199100.0, 1.0], [224700.0, 2.0], [243900.0, 1.0], [63200.0, 1.0], [256700.0, 1.0], [270200.0, 2.0], [283000.0, 1.0], [321400.0, 1.0], [126400.0, 1.0], [304900.0, 2.0], [156800.0, 2.0], [317700.0, 1.0], [343300.0, 1.0], [176000.0, 1.0], [368900.0, 1.0], [182400.0, 2.0], [246400.0, 1.0], [288000.0, 1.0], [300800.0, 2.0], [313600.0, 1.0], [352000.0, 1.0], [390400.0, 1.0], [274700.0, 1.0], [287500.0, 1.0], [313100.0, 1.0], [160900.0, 1.0], [338700.0, 1.0], [167300.0, 1.0], [389900.0, 1.0], [218500.0, 1.0], [283400.0, 1.0], [296200.0, 2.0], [309000.0, 3.0], [321800.0, 3.0], [334600.0, 1.0], [373000.0, 2.0], [385800.0, 1.0], [110300.0, 1.0], [282900.0, 1.0], [139400.0, 1.0], [308500.0, 2.0], [152200.0, 1.0], [321300.0, 1.0], [209800.0, 1.0], [216200.0, 1.0], [449300.0, 1.0], [261000.0, 1.0], [266000.0, 1.0], [304400.0, 1.0], [317200.0, 1.0], [381200.0, 1.0], [394000.0, 1.0], [149900.0, 1.0], [162700.0, 1.0], [342300.0, 1.0], [46700.0, 1.0], [201100.0, 1.0], [51500.0, 1.0], [233100.0, 1.0], [287000.0, 1.0], [299800.0, 1.0], [325400.0, 2.0], [312600.0, 1.0], [80600.0, 1.0], [99800.0, 1.0], [160400.0, 1.0], [337700.0, 1.0], [166800.0, 1.0], [173200.0, 3.0], [179600.0, 1.0], [186000.0, 2.0], [198800.0, 2.0], [440100.0, 1.0], [218000.0, 1.0], [230800.0, 1.0], [256400.0, 1.0], [269600.0, 1.0], [308000.0, 3.0], [295200.0, 1.0], [333600.0, 1.0], [372000.0, 2.0], [269100.0, 7.0], [138900.0, 1.0], [294700.0, 1.0], [281900.0, 3.0], [307500.0, 6.0], [158100.0, 1.0], [177300.0, 1.0], [183700.0, 1.0], [422700.0, 1.0], [215700.0, 1.0], [228500.0, 1.0], [260500.0, 1.0], [277800.0, 2.0], [290600.0, 1.0], [303400.0, 2.0], [316200.0, 1.0], [341800.0, 1.0], [367400.0, 1.0], [393000.0, 1.0], [405800.0, 1.0], [264500.0, 1.0], [277300.0, 1.0], [143000.0, 1.0], [302900.0, 1.0], [315700.0, 1.0], [155800.0, 1.0], [175000.0, 1.0], [187800.0, 1.0], [443700.0, 1.0], [226200.0, 1.0], [232600.0, 1.0], [251800.0, 1.0], [258200.0, 1.0], [286000.0, 1.0], [18900.0, 1.0], [311600.0, 2.0], [20500.0, 1.0], [362800.0, 1.0], [26900.0, 1.0], [28500.0, 6.0], [30100.0, 1.0], [272700.0, 1.0], [153500.0, 1.0], [159900.0, 1.0], [166300.0, 2.0], [179100.0, 1.0], [44200.0, 2.0], [185500.0, 2.0], [375100.0, 1.0], [236700.0, 1.0], [249500.0, 1.0], [255900.0, 1.0], [294200.0, 1.0], [307000.0, 2.0], [78800.0, 1.0], [371000.0, 1.0], [91600.0, 1.0], [435000.0, 1.0], [123600.0, 1.0], [271300.0, 1.0], [133600.0, 1.0], [284100.0, 1.0], [140000.0, 1.0], [172000.0, 22.0], [335300.0, 1.0], [191200.0, 1.0], [204000.0, 1.0], [437700.0, 2.0], [255200.0, 1.0], [292800.0, 1.0], [280000.0, 1.0], [382400.0, 1.0], [395200.0, 2.0], [266700.0, 2.0], [137700.0, 1.0], [150500.0, 1.0], [163300.0, 2.0], [317900.0, 2.0], [156900.0, 1.0], [169700.0, 1.0], [208100.0, 1.0], [220900.0, 1.0], [262600.0, 1.0], [301000.0, 1.0], [326600.0, 1.0], [352200.0, 2.0], [416200.0, 1.0], [126700.0, 1.0], [141800.0, 1.0], [148200.0, 1.0], [313300.0, 1.0], [161000.0, 1.0], [338900.0, 1.0], [351700.0, 1.0], [193000.0, 2.0], [441300.0, 1.0], [225000.0, 1.0], [250600.0, 1.0], [309200.0, 2.0], [322000.0, 1.0], [334800.0, 1.0], [373200.0, 1.0], [437200.0, 1.0], [270300.0, 1.0], [35700.0, 1.0], [308700.0, 1.0], [295900.0, 1.0], [152300.0, 1.0], [40500.0, 1.0], [334300.0, 1.0], [171500.0, 1.0], [347100.0, 1.0], [43700.0, 1.0], [372700.0, 1.0], [190700.0, 1.0], [216300.0, 1.0], [59700.0, 1.0], [291800.0, 2.0], [304600.0, 1.0], [317400.0, 1.0], [368600.0, 1.0], [316900.0, 2.0], [156400.0, 1.0], [169200.0, 1.0], [329700.0, 1.0], [175600.0, 2.0], [355300.0, 1.0], [182000.0, 2.0], [194800.0, 2.0], [214000.0, 2.0], [220400.0, 1.0], [226800.0, 1.0], [252400.0, 2.0], [274400.0, 1.0], [287200.0, 1.0], [300000.0, 1.0], [351200.0, 1.0], [141300.0, 1.0], [147700.0, 1.0], [160500.0, 2.0], [312300.0, 2.0], [363500.0, 2.0], [211700.0, 1.0], [237300.0, 1.0], [230900.0, 1.0], [256500.0, 1.0], [308200.0, 1.0], [295400.0, 1.0], [86500.0, 1.0], [410600.0, 1.0], [139000.0, 1.0], [132600.0, 1.0], [307700.0, 10.0], [333300.0, 1.0], [171000.0, 1.0], [196600.0, 1.0], [190200.0, 1.0], [15100.0, 1.0], [278000.0, 1.0], [265200.0, 2.0], [17400.0, 1.0], [303600.0, 1.0], [316400.0, 1.0], [20600.0, 1.0], [342000.0, 1.0], [23000.0, 3.0], [393200.0, 1.0], [28600.0, 3.0], [30200.0, 1.0], [264700.0, 1.0], [136700.0, 1.0], [303100.0, 1.0], [328700.0, 1.0], [168700.0, 1.0], [175100.0, 1.0], [187900.0, 1.0], [181500.0, 1.0], [379900.0, 2.0], [207100.0, 1.0], [54000.0, 1.0], [245500.0, 1.0], [251900.0, 1.0], [273400.0, 1.0], [324600.0, 1.0], [350200.0, 1.0], [388600.0, 1.0], [120800.0, 1.0], [269700.0, 1.0], [282500.0, 1.0], [145600.0, 1.0], [308100.0, 6.0], [320900.0, 1.0], [203200.0, 1.0], [235200.0, 1.0], [248000.0, 1.0], [316800.0, 3.0], [342400.0, 1.0], [444800.0, 1.0], [277900.0, 1.0], [265100.0, 1.0], [290700.0, 1.0], [149700.0, 1.0], [316300.0, 1.0], [168900.0, 1.0], [329100.0, 1.0], [175300.0, 1.0], [181700.0, 1.0], [200900.0, 2.0], [444300.0, 1.0], [232900.0, 1.0], [286600.0, 1.0], [325000.0, 1.0], [350600.0, 1.0], [273300.0, 1.0], [286100.0, 2.0], [311700.0, 2.0], [185800.0, 1.0], [198600.0, 1.0], [426900.0, 1.0], [224200.0, 1.0], [237000.0, 1.0], [256200.0, 1.0], [294800.0, 1.0], [320400.0, 3.0], [333200.0, 1.0], [358800.0, 1.0], [34300.0, 12.0], [145100.0, 2.0], [307100.0, 3.0], [164300.0, 2.0], [358300.0, 1.0], [183500.0, 1.0], [189900.0, 2.0], [396700.0, 1.0], [202700.0, 1.0], [53500.0, 1.0], [234700.0, 1.0], [277400.0, 1.0], [290200.0, 1.0], [315800.0, 1.0], [328600.0, 2.0], [354200.0, 1.0], [367000.0, 1.0], [91000.0, 1.0], [379800.0, 1.0], [302500.0, 3.0], [155600.0, 1.0], [315300.0, 2.0], [162000.0, 1.0], [340900.0, 1.0], [168400.0, 1.0], [187600.0, 1.0], [430500.0, 2.0], [232400.0, 1.0], [311200.0, 1.0], [439200.0, 1.0], [272300.0, 1.0], [323500.0, 1.0], [349100.0, 1.0], [191700.0, 1.0], [425900.0, 1.0], [236500.0, 1.0], [268200.0, 1.0], [67700.0, 1.0], [281000.0, 1.0], [306600.0, 1.0], [332200.0, 2.0], [383400.0, 1.0], [421800.0, 1.0], [434600.0, 1.0], [131800.0, 1.0], [144600.0, 1.0], [306100.0, 3.0], [170200.0, 1.0], [176600.0, 1.0], [357300.0, 1.0], [183000.0, 1.0], [189400.0, 1.0], [202200.0, 1.0], [434100.0, 1.0], [240600.0, 2.0], [247000.0, 1.0], [18300.0, 1.0], [19100.0, 6.0], [327600.0, 1.0], [314800.0, 1.0], [21500.0, 1.0], [22300.0, 95.0], [26300.0, 34.0], [27100.0, 2.0], [29500.0, 1.0], [30300.0, 1.0], [288700.0, 1.0], [155100.0, 2.0], [161500.0, 1.0], [314300.0, 2.0], [187100.0, 1.0], [193500.0, 1.0], [199900.0, 1.0], [51000.0, 1.0], [416700.0, 2.0], [238300.0, 1.0], [310200.0, 2.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 455000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1174.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3826.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1174.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3826.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.900000000000002, "minX": 1.71236112E12, "maxY": 500.0, "series": [{"data": [[1.7123634E12, 14.900000000000002], [1.71236178E12, 191.61538461538464], [1.7123631E12, 93.05263157894738], [1.71236208E12, 176.0], [1.71236118E12, 500.0], [1.71236148E12, 259.29468599033805], [1.7123628E12, 124.14736842105262], [1.7123619E12, 187.38461538461542], [1.7123625E12, 140.56074766355147], [1.7123622E12, 160.36619718309862], [1.71236226E12, 152.05555555555557], [1.71236256E12, 136.0], [1.71236166E12, 209.48437500000009], [1.71236196E12, 182.39473684210532], [1.71236268E12, 131.63043478260866], [1.71236238E12, 147.0], [1.71236136E12, 272.9244186046513], [1.71236328E12, 52.333333333333336], [1.71236298E12, 111.77049180327869], [1.71236244E12, 144.88372093023256], [1.71236112E12, 500.0], [1.71236304E12, 105.96428571428572], [1.71236214E12, 172.39473684210523], [1.71236274E12, 131.0], [1.71236316E12, 74.32432432432435], [1.71236154E12, 235.39333333333326], [1.71236286E12, 117.25], [1.71236184E12, 190.61904761904765], [1.71236124E12, 500.0], [1.7123613E12, 420.67545076282977], [1.71236292E12, 114.72222222222224], [1.71236262E12, 133.7857142857143], [1.7123616E12, 230.23999999999995], [1.71236322E12, 63.77777777777778], [1.71236202E12, 176.07692307692307], [1.71236334E12, 36.15624999999999], [1.71236232E12, 148.34615384615387], [1.71236142E12, 272.0], [1.71236172E12, 194.47169811320754]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123634E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1286.0, "minX": 1.0, "maxY": 390088.0, "series": [{"data": [[2.0, 6073.0], [3.0, 6655.0], [4.0, 6530.0], [5.0, 21574.0], [6.0, 23086.0], [7.0, 21149.0], [8.0, 29244.0], [9.0, 37029.0], [10.0, 40554.0], [11.0, 45982.0], [12.0, 49170.0], [13.0, 46796.0], [14.0, 67498.0], [15.0, 51015.0], [16.0, 53542.0], [17.0, 73972.0], [18.0, 74546.0], [19.0, 54000.0], [20.0, 84930.0], [21.0, 91671.0], [22.0, 110124.0], [23.0, 99800.0], [24.0, 91245.0], [25.0, 105285.66666666667], [26.0, 132724.0], [27.0, 176010.0], [28.0, 170316.33333333334], [29.0, 165169.0], [30.0, 152271.0], [31.0, 161011.0], [33.0, 182348.5], [32.0, 168159.0], [35.0, 159967.0], [34.0, 161908.0], [37.0, 169304.66666666666], [39.0, 193785.0], [38.0, 174160.33333333334], [41.0, 174723.0], [40.0, 143206.0], [43.0, 168363.0], [42.0, 181375.0], [45.0, 195476.0], [44.0, 181683.5], [47.0, 186092.0], [46.0, 186943.0], [49.0, 182099.0], [48.0, 2048.0], [51.0, 189986.0], [50.0, 1286.0], [53.0, 202759.0], [52.0, 142207.5], [55.0, 186270.0], [54.0, 185254.0], [57.0, 185466.0], [56.0, 189500.0], [59.0, 168048.5], [58.0, 35740.0], [61.0, 151497.5], [60.0, 163129.5], [63.0, 136705.0], [62.0, 149847.75], [67.0, 140031.5], [66.0, 136123.5], [65.0, 135786.0], [64.0, 139885.0], [71.0, 121136.0], [69.0, 155887.27272727274], [68.0, 145139.0], [75.0, 165285.0], [74.0, 155141.0], [73.0, 63289.0], [72.0, 141625.5], [78.0, 107583.6], [77.0, 164350.5], [76.0, 151180.0], [83.0, 157479.5], [82.0, 116599.0], [81.0, 115615.33333333334], [80.0, 173614.0], [87.0, 97833.33333333333], [86.0, 139336.0], [85.0, 142635.5], [84.0, 107318.0], [91.0, 126407.09090909091], [90.0, 139436.0], [89.0, 75896.5], [88.0, 117669.83333333333], [95.0, 100245.0], [94.0, 111815.0], [92.0, 115113.4], [99.0, 178378.0], [98.0, 192044.8333333333], [97.0, 144766.75000000003], [96.0, 19491.0], [103.0, 213440.5], [102.0, 261766.66666666666], [101.0, 270343.0], [100.0, 237277.3333333333], [107.0, 153941.5], [106.0, 240856.2], [105.0, 80631.0], [104.0, 251068.0], [110.0, 177051.08333333334], [109.0, 221062.0], [108.0, 218918.08333333334], [115.0, 268148.1818181818], [114.0, 248906.85000000006], [113.0, 209756.99999999997], [112.0, 193281.6923076923], [119.0, 170035.0], [118.0, 144248.8], [117.0, 213732.1666666667], [116.0, 247196.0], [123.0, 218985.68181818177], [121.0, 281933.0], [120.0, 212927.4], [127.0, 230164.7333333333], [126.0, 237570.72727272726], [125.0, 178330.0], [124.0, 271351.0], [135.0, 165115.0], [134.0, 196436.61538461538], [133.0, 212536.0], [132.0, 220976.46666666665], [131.0, 212769.19230769228], [130.0, 277701.0], [129.0, 275377.85714285716], [128.0, 285253.8], [143.0, 261060.56249999988], [141.0, 290786.0], [140.0, 144748.33333333334], [139.0, 236840.25000000003], [138.0, 94496.5], [137.0, 112904.625], [136.0, 235599.5], [151.0, 304077.0], [150.0, 281104.5625], [149.0, 256451.0952380952], [148.0, 331334.0], [147.0, 327517.70833333343], [146.0, 331487.0], [145.0, 307640.71428571426], [144.0, 263916.8333333334], [159.0, 295953.0], [158.0, 292986.3333333334], [157.0, 277908.5294117647], [156.0, 273353.75], [155.0, 250627.33333333334], [153.0, 313400.3333333333], [167.0, 288159.0], [166.0, 355399.0], [165.0, 319318.0], [164.0, 325808.7142857143], [163.0, 319430.0], [162.0, 317803.0], [161.0, 313467.64705882355], [175.0, 345660.5], [174.0, 343896.8333333334], [173.0, 323835.0], [172.0, 297749.5714285714], [171.0, 311180.0], [169.0, 255820.0], [168.0, 282815.0], [183.0, 359599.4285714286], [182.0, 301586.0], [181.0, 335999.14285714284], [179.0, 330918.0], [178.0, 242711.0], [177.0, 299702.4], [176.0, 321978.58536585374], [191.0, 359613.13513513515], [190.0, 284990.25], [189.0, 202778.91666666672], [188.0, 286662.8888888889], [187.0, 296838.50000000006], [186.0, 322267.3888888889], [185.0, 340770.0], [184.0, 350936.2], [199.0, 170546.0], [198.0, 21045.0], [197.0, 95483.2], [196.0, 189139.14285714287], [195.0, 188006.5], [194.0, 389997.0], [193.0, 178809.34782608697], [192.0, 282855.25], [207.0, 383662.0], [206.0, 343166.0], [205.0, 372077.0], [204.0, 372438.0], [203.0, 381934.3333333333], [202.0, 21043.333333333332], [201.0, 390088.0], [200.0, 261129.33333333334], [215.0, 21050.666666666668], [213.0, 21060.0], [212.0, 254328.33333333334], [211.0, 259897.1666666667], [210.0, 193682.5], [209.0, 113101.75], [208.0, 379959.0], [223.0, 21033.0], [222.0, 21034.0], [221.0, 20152.333333333332], [220.0, 21049.0], [219.0, 21046.0], [218.0, 342961.0], [217.0, 21054.0], [216.0, 218245.4], [231.0, 166898.0], [230.0, 296749.75], [229.0, 299426.0], [228.0, 173707.14893617024], [227.0, 19208.0], [226.0, 19208.0], [225.0, 19255.0], [224.0, 21045.333333333332], [239.0, 21040.0], [238.0, 278837.0], [237.0, 56823.57499999999], [236.0, 40413.75862068966], [235.0, 102523.48809523808], [234.0, 23333.14285714286], [233.0, 205639.30434782605], [232.0, 351218.375], [247.0, 21061.0], [245.0, 21050.0], [244.0, 21061.0], [243.0, 21034.0], [242.0, 124185.99999999999], [241.0, 21040.0], [255.0, 21045.0], [254.0, 21049.0], [253.0, 21057.0], [251.0, 21061.333333333332], [248.0, 21062.0], [269.0, 21041.0], [271.0, 21041.0], [268.0, 21041.0], [258.0, 21044.5], [256.0, 21045.0], [266.0, 39158.083333333336], [265.0, 21051.333333333332], [264.0, 31181.600000000006], [263.0, 187322.125], [262.0, 21050.0], [261.0, 21050.0], [260.0, 21049.333333333332], [275.0, 30072.0], [287.0, 19214.0], [285.0, 19214.0], [282.0, 21040.0], [281.0, 21039.333333333332], [279.0, 21041.0], [278.0, 56595.59999999999], [277.0, 30227.5], [276.0, 34403.5], [274.0, 21056.0], [273.0, 27876.87719298246], [272.0, 66459.30104712042], [290.0, 26382.0], [301.0, 22374.5], [303.0, 22376.0], [300.0, 22376.0], [298.0, 22376.0], [297.0, 20952.000000000004], [294.0, 23319.85714285714], [293.0, 26364.0], [289.0, 26381.0], [288.0, 19197.0], [318.0, 21042.0], [319.0, 19829.0], [317.0, 22367.0], [315.0, 22370.0], [314.0, 22370.5], [312.0, 22365.333333333332], [309.0, 22373.0], [308.0, 22371.0], [307.0, 22375.0], [306.0, 22374.0], [304.0, 22374.0], [334.0, 21039.0], [335.0, 21038.0], [333.0, 21038.5], [323.0, 21036.0], [331.0, 21036.0], [330.0, 21039.0], [329.0, 21036.0], [328.0, 21037.0], [327.0, 21037.0], [326.0, 19826.333333333332], [325.0, 21036.0], [324.0, 20673.6], [351.0, 21033.57142857143], [350.0, 21035.0], [338.0, 21036.25], [337.0, 21038.0], [336.0, 21039.0], [367.0, 21047.0], [366.0, 21042.5], [363.0, 21044.5], [362.0, 21043.5], [355.0, 21035.0], [353.0, 21034.4], [352.0, 21034.0], [370.0, 21042.0], [378.0, 21042.0], [377.0, 21044.0], [376.0, 21046.0], [375.0, 21045.0], [374.0, 21030.0], [373.0, 21043.333333333332], [369.0, 21043.5], [368.0, 21037.5], [398.0, 21040.0], [396.0, 21040.0], [395.0, 21040.0], [394.0, 21042.0], [393.0, 21041.8], [391.0, 21041.5], [390.0, 21043.0], [385.0, 21042.0], [384.0, 21043.0], [402.0, 51361.829090909094], [401.0, 21028.0], [400.0, 21040.333333333332], [451.0, 21044.818181818184], [461.0, 21051.0], [459.0, 21046.666666666668], [456.0, 21048.0], [455.0, 21046.555555555555], [454.0, 21047.0], [452.0, 21046.11111111111], [450.0, 21048.25], [449.0, 21047.266666666666], [448.0, 21050.0], [479.0, 21051.0], [478.0, 21044.666666666668], [477.0, 21047.333333333332], [476.0, 21050.0], [475.0, 21050.0], [474.0, 21046.0], [469.0, 21051.0], [465.0, 21051.0], [494.0, 21041.5], [492.0, 21041.6], [487.0, 21036.0], [486.0, 21039.0], [485.0, 21037.0], [482.0, 21050.3], [500.0, 18923.885442514467], [499.0, 21040.666666666668], [498.0, 21041.0], [496.0, 21041.0], [1.0, 5726.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}, {"data": [[361.4334000000007, 81956.83959999985]], "isOverall": false, "label": "HTTP Request (Mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.71236112E12, "maxY": 136022.4, "series": [{"data": [[1.7123634E12, 112.0], [1.71236178E12, 52.43333333333333], [1.7123631E12, 326.6333333333333], [1.71236208E12, 44.8], [1.71236118E12, 38490.1], [1.71236148E12, 8558.233333333334], [1.7123628E12, 432.6666666666667], [1.7123619E12, 564.9666666666667], [1.7123625E12, 500.65], [1.7123622E12, 280.26666666666665], [1.71236226E12, 157.8], [1.71236256E12, 68.03333333333333], [1.71236166E12, 1318.6166666666666], [1.71236196E12, 145.76666666666668], [1.71236268E12, 199.03333333333333], [1.71236238E12, 22.4], [1.71236136E12, 7563.183333333333], [1.71236328E12, 120.3], [1.71236298E12, 262.8333333333333], [1.71236244E12, 199.53333333333333], [1.71236112E12, 30368.8], [1.71236304E12, 120.13333333333334], [1.71236214E12, 188.66666666666666], [1.71236274E12, 37.5], [1.71236316E12, 165.43333333333334], [1.71236154E12, 5857.95], [1.71236286E12, 29.866666666666667], [1.71236184E12, 191.9], [1.71236124E12, 36005.2], [1.7123613E12, 28659.433333333334], [1.71236292E12, 67.2], [1.71236262E12, 52.266666666666666], [1.7123616E12, 3807.6833333333334], [1.71236322E12, 67.2], [1.71236202E12, 104.86666666666666], [1.71236334E12, 119.46666666666667], [1.71236232E12, 124.36666666666666], [1.71236142E12, 7738.566666666667], [1.71236172E12, 1112.0666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7123634E12, 38135.05], [1.71236178E12, 16526.05], [1.7123631E12, 96611.9], [1.71236208E12, 15253.85], [1.71236118E12, 0.0], [1.71236148E12, 27965.15], [1.7123628E12, 120762.35], [1.7123619E12, 75001.4], [1.7123625E12, 136022.4], [1.7123622E12, 90254.0], [1.71236226E12, 45763.15], [1.71236256E12, 16525.5], [1.71236166E12, 48306.45], [1.71236196E12, 48305.6], [1.71236268E12, 58474.8], [1.71236238E12, 7627.15], [1.71236136E12, 8898.95], [1.71236328E12, 34320.1], [1.71236298E12, 77542.8], [1.71236244E12, 54661.8], [1.71236112E12, 15255.15], [1.71236304E12, 35592.95], [1.71236214E12, 48306.7], [1.71236274E12, 11441.65], [1.71236316E12, 47033.55], [1.71236154E12, 26695.95], [1.71236286E12, 10169.7], [1.71236184E12, 53391.75], [1.71236124E12, 0.0], [1.7123613E12, 122035.3], [1.71236292E12, 22880.35], [1.71236262E12, 17796.9], [1.7123616E12, 96614.15], [1.71236322E12, 22881.05], [1.71236202E12, 33051.35], [1.71236334E12, 40679.9], [1.71236232E12, 33050.65], [1.71236142E12, 67373.65], [1.71236172E12, 40677.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123634E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2247.430851063831, "minX": 1.71236112E12, "maxY": 366142.1666666666, "series": [{"data": [[1.7123634E12, 61395.36666666667], [1.71236178E12, 320432.53846153844], [1.7123631E12, 149867.01315789475], [1.71236208E12, 366142.1666666666], [1.71236118E12, 21394.81389870437], [1.71236148E12, 53998.90338164253], [1.7123628E12, 222639.36842105258], [1.7123619E12, 280316.2615384615], [1.7123625E12, 234925.31775700932], [1.7123622E12, 304307.3943661972], [1.71236226E12, 284890.5833333334], [1.71236256E12, 155979.38461538462], [1.71236166E12, 221271.42187499997], [1.71236196E12, 332773.2631578947], [1.71236268E12, 209080.5217391305], [1.71236238E12, 351878.8333333334], [1.71236136E12, 30648.83720930234], [1.71236328E12, 157797.85185185182], [1.71236298E12, 202763.0163934427], [1.71236244E12, 284712.3488372093], [1.71236112E12, 2247.430851063831], [1.71236304E12, 218212.21428571426], [1.71236214E12, 308890.18421052623], [1.71236274E12, 255696.11111111112], [1.71236316E12, 139344.59459459462], [1.71236154E12, 74268.76666666666], [1.71236286E12, 209497.625], [1.71236184E12, 344017.9285714286], [1.71236124E12, 21050.539119804376], [1.7123613E12, 39830.669902912596], [1.71236292E12, 259843.4444444444], [1.71236262E12, 209089.92857142858], [1.7123616E12, 188049.8199999999], [1.71236322E12, 145039.8333333333], [1.71236202E12, 305640.1923076922], [1.71236334E12, 173302.9375], [1.71236232E12, 266827.19230769225], [1.71236142E12, 90070.12903225809], [1.71236172E12, 177393.18867924527]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123634E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71236112E12, "maxY": 366142.0, "series": [{"data": [[1.7123634E12, 61395.30000000001], [1.71236178E12, 320432.3846153846], [1.7123631E12, 149866.84210526323], [1.71236208E12, 366142.0], [1.71236118E12, 0.0], [1.71236148E12, 34865.9033816425], [1.7123628E12, 222639.23157894742], [1.7123619E12, 278542.63076923083], [1.7123625E12, 234925.22429906536], [1.7123622E12, 304307.33802816895], [1.71236226E12, 284890.5], [1.71236256E12, 155979.23076923078], [1.71236166E12, 212553.96875], [1.71236196E12, 332773.18421052647], [1.71236268E12, 209080.41304347827], [1.71236238E12, 351878.8333333334], [1.71236136E12, 9405.500000000002], [1.71236328E12, 157797.59259259258], [1.71236298E12, 202762.91803278687], [1.71236244E12, 284712.2790697674], [1.71236112E12, 85.75531914893617], [1.71236304E12, 218212.0], [1.71236214E12, 308890.1052631578], [1.71236274E12, 255695.66666666666], [1.71236316E12, 139344.4324324325], [1.71236154E12, 56075.94], [1.71236286E12, 209497.625], [1.71236184E12, 344017.7857142858], [1.71236124E12, 0.0], [1.7123613E12, 21450.061026352276], [1.71236292E12, 259843.38888888888], [1.71236262E12, 209089.7857142857], [1.7123616E12, 177645.44666666674], [1.71236322E12, 145039.77777777778], [1.71236202E12, 305640.0384615384], [1.71236334E12, 173302.87500000003], [1.71236232E12, 266827.19230769225], [1.71236142E12, 74225.24423963133], [1.71236172E12, 168836.62264150943]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123634E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 85.55555555555557, "minX": 1.71236112E12, "maxY": 20649.981662591697, "series": [{"data": [[1.7123634E12, 92.10000000000002], [1.71236178E12, 5873.923076923076], [1.7123631E12, 101.51315789473684], [1.71236208E12, 3436.2499999999995], [1.71236118E12, 18367.720848056524], [1.71236148E12, 16289.599033816425], [1.7123628E12, 87.99999999999999], [1.7123619E12, 3757.3999999999996], [1.7123625E12, 98.10280373831773], [1.7123622E12, 328.54929577464793], [1.71236226E12, 91.1111111111111], [1.71236256E12, 88.53846153846153], [1.71236166E12, 10642.578124999998], [1.71236196E12, 2119.131578947369], [1.71236268E12, 90.04347826086953], [1.71236238E12, 89.5], [1.71236136E12, 18233.674418604653], [1.71236328E12, 90.40740740740742], [1.71236298E12, 86.85245901639347], [1.71236244E12, 91.72093023255816], [1.71236112E12, 985.0443262411351], [1.71236304E12, 121.32142857142857], [1.71236214E12, 461.5], [1.71236274E12, 85.55555555555557], [1.71236316E12, 144.81081081081078], [1.71236154E12, 16980.520000000008], [1.71236286E12, 93.24999999999999], [1.71236184E12, 3409.738095238096], [1.71236124E12, 20649.981662591697], [1.7123613E12, 16259.190013869611], [1.71236292E12, 93.05555555555556], [1.71236262E12, 86.57142857142857], [1.7123616E12, 9930.246666666664], [1.71236322E12, 144.0], [1.71236202E12, 1982.8461538461536], [1.71236334E12, 92.71875], [1.71236232E12, 89.96153846153847], [1.71236142E12, 13097.299539170514], [1.71236172E12, 11215.547169811318]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123634E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5726.0, "minX": 1.7123613E12, "maxY": 455073.0, "series": [{"data": [[1.7123634E12, 132724.0], [1.71236178E12, 373016.0], [1.7123631E12, 274881.0], [1.71236208E12, 400584.0], [1.71236148E12, 366147.0], [1.7123628E12, 297271.0], [1.7123619E12, 342662.0], [1.7123625E12, 352108.0], [1.7123622E12, 355399.0], [1.71236226E12, 353115.0], [1.71236256E12, 237354.0], [1.71236166E12, 400298.0], [1.71236196E12, 372489.0], [1.71236268E12, 249528.0], [1.71236238E12, 383525.0], [1.71236136E12, 257271.0], [1.71236328E12, 202759.0], [1.71236298E12, 305239.0], [1.71236244E12, 381688.0], [1.71236304E12, 266151.0], [1.71236214E12, 396514.0], [1.71236274E12, 286026.0], [1.71236316E12, 187198.0], [1.71236154E12, 426977.0], [1.71236286E12, 225460.0], [1.71236184E12, 417457.0], [1.7123613E12, 186047.0], [1.71236292E12, 286171.0], [1.71236262E12, 242324.0], [1.7123616E12, 455073.0], [1.71236322E12, 163149.0], [1.71236202E12, 342369.0], [1.71236334E12, 202153.0], [1.71236232E12, 351252.0], [1.71236142E12, 317819.0], [1.71236172E12, 396727.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7123634E12, 5726.0], [1.71236178E12, 312360.0], [1.7123631E12, 133613.0], [1.71236208E12, 335398.0], [1.71236148E12, 320069.0], [1.7123628E12, 153257.0], [1.7123619E12, 299836.0], [1.7123625E12, 186926.0], [1.7123622E12, 278244.0], [1.71236226E12, 295234.0], [1.71236256E12, 168795.0], [1.71236166E12, 323240.0], [1.71236196E12, 281606.0], [1.71236268E12, 182489.0], [1.71236238E12, 308104.0], [1.71236136E12, 220918.0], [1.71236328E12, 166321.0], [1.71236298E12, 181878.0], [1.71236244E12, 260518.0], [1.71236304E12, 224216.0], [1.71236214E12, 274461.0], [1.71236274E12, 236725.0], [1.71236316E12, 123805.0], [1.71236154E12, 390220.0], [1.71236286E12, 196665.0], [1.71236184E12, 291049.0], [1.7123613E12, 144747.0], [1.71236292E12, 166824.0], [1.71236262E12, 181802.0], [1.7123616E12, 304788.0], [1.71236322E12, 126488.0], [1.71236202E12, 293524.0], [1.71236334E12, 143206.0], [1.71236232E12, 300785.0], [1.71236142E12, 262040.0], [1.71236172E12, 267951.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7123634E12, 124037.90000000005], [1.71236178E12, 367253.0], [1.7123631E12, 267335.6], [1.71236208E12, 395688.60000000003], [1.71236148E12, 365511.8], [1.7123628E12, 287824.6], [1.7123619E12, 323611.6], [1.7123625E12, 306500.8], [1.7123622E12, 324808.6], [1.71236226E12, 328157.4], [1.71236256E12, 237354.0], [1.71236166E12, 393521.5], [1.71236196E12, 362345.6], [1.71236268E12, 243925.0], [1.71236238E12, 383525.0], [1.71236136E12, 257271.0], [1.71236328E12, 199883.9], [1.71236298E12, 286814.4], [1.71236244E12, 377055.8], [1.71236304E12, 263633.0], [1.71236214E12, 384713.9], [1.71236274E12, 286026.0], [1.71236316E12, 174627.7], [1.71236154E12, 422708.0], [1.71236286E12, 225460.0], [1.71236184E12, 412650.0], [1.7123613E12, 174193.7], [1.71236292E12, 286171.0], [1.71236262E12, 235032.0], [1.7123616E12, 444494.2], [1.71236322E12, 163113.9], [1.71236202E12, 333301.0], [1.71236334E12, 199365.6], [1.71236232E12, 333487.0], [1.71236142E12, 309194.0], [1.71236172E12, 395692.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7123634E12, 132724.0], [1.71236178E12, 373016.0], [1.7123631E12, 274881.0], [1.71236208E12, 400584.0], [1.71236148E12, 366147.0], [1.7123628E12, 297271.0], [1.7123619E12, 342662.0], [1.7123625E12, 352108.0], [1.7123622E12, 355399.0], [1.71236226E12, 353115.0], [1.71236256E12, 237354.0], [1.71236166E12, 400298.0], [1.71236196E12, 372489.0], [1.71236268E12, 249528.0], [1.71236238E12, 383525.0], [1.71236136E12, 257271.0], [1.71236328E12, 202759.0], [1.71236298E12, 305239.0], [1.71236244E12, 381688.0], [1.71236304E12, 266151.0], [1.71236214E12, 396514.0], [1.71236274E12, 286026.0], [1.71236316E12, 187198.0], [1.71236154E12, 426977.0], [1.71236286E12, 225460.0], [1.71236184E12, 417457.0], [1.7123613E12, 186047.0], [1.71236292E12, 286171.0], [1.71236262E12, 242324.0], [1.7123616E12, 455073.0], [1.71236322E12, 163149.0], [1.71236202E12, 342369.0], [1.71236334E12, 202153.0], [1.71236232E12, 351252.0], [1.71236142E12, 317819.0], [1.71236172E12, 396727.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7123634E12, 53771.0], [1.71236178E12, 325826.0], [1.7123631E12, 142739.0], [1.71236208E12, 368102.5], [1.71236148E12, 364165.0], [1.7123628E12, 272953.0], [1.7123619E12, 312451.0], [1.7123625E12, 288980.0], [1.7123622E12, 312960.0], [1.71236226E12, 312760.5], [1.71236256E12, 223045.5], [1.71236166E12, 378516.5], [1.71236196E12, 343372.0], [1.71236268E12, 215751.0], [1.71236238E12, 358684.5], [1.71236136E12, 241319.5], [1.71236328E12, 187489.5], [1.71236298E12, 194011.0], [1.71236244E12, 301014.0], [1.71236304E12, 237303.0], [1.71236214E12, 355271.0], [1.71236274E12, 272346.0], [1.71236316E12, 158092.5], [1.71236154E12, 416901.0], [1.71236286E12, 209203.0], [1.71236184E12, 386700.0], [1.7123613E12, 155264.5], [1.71236292E12, 269233.0], [1.71236262E12, 213082.0], [1.7123616E12, 338021.0], [1.71236322E12, 147056.5], [1.71236202E12, 319664.0], [1.71236334E12, 173109.5], [1.71236232E12, 324797.0], [1.71236142E12, 307644.5], [1.71236172E12, 368956.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7123634E12, 132249.9], [1.71236178E12, 373016.0], [1.7123631E12, 271140.9], [1.71236208E12, 400584.0], [1.71236148E12, 366147.0], [1.7123628E12, 291464.8], [1.7123619E12, 326672.6], [1.7123625E12, 334142.69999999995], [1.7123622E12, 328001.8], [1.71236226E12, 347244.3], [1.71236256E12, 237354.0], [1.71236166E12, 399422.0], [1.71236196E12, 365840.7], [1.71236268E12, 248661.0], [1.71236238E12, 383525.0], [1.71236136E12, 257271.0], [1.71236328E12, 202373.05], [1.71236298E12, 302653.25], [1.71236244E12, 380631.7], [1.71236304E12, 265577.25], [1.71236214E12, 395261.0], [1.71236274E12, 286026.0], [1.71236316E12, 182980.6], [1.71236154E12, 426977.0], [1.71236286E12, 225460.0], [1.71236184E12, 417004.1], [1.7123613E12, 176793.05], [1.71236292E12, 286171.0], [1.71236262E12, 242324.0], [1.7123616E12, 448916.2], [1.71236322E12, 163149.0], [1.71236202E12, 341446.5], [1.71236334E12, 202074.35], [1.71236232E12, 351252.0], [1.71236142E12, 311514.49999999994], [1.71236172E12, 396727.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123634E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 565.0, "minX": 1.0, "maxY": 416842.5, "series": [{"data": [[2.0, 296502.5], [8.0, 301253.0], [9.0, 305245.5], [40.0, 172030.0], [10.0, 284728.5], [11.0, 416842.5], [3.0, 271490.5], [12.0, 290248.5], [13.0, 240244.0], [15.0, 307787.0], [1.0, 266716.0], [4.0, 297047.0], [16.0, 359554.0], [20.0, 292576.0], [5.0, 298655.0], [21.0, 240551.0], [88.0, 169324.0], [22.0, 317819.0], [98.0, 148239.0], [6.0, 281606.0], [100.0, 153149.0], [7.0, 313185.0], [31.0, 150755.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21041.0], [37.0, 21034.0], [40.0, 21045.0], [43.0, 21046.0], [3.0, 21047.0], [53.0, 21038.0], [58.0, 21047.0], [62.0, 21041.5], [4.0, 21042.0], [5.0, 21040.0], [91.0, 21037.0], [88.0, 21042.0], [98.0, 1231.0], [99.0, 21054.0], [6.0, 21041.0], [97.0, 21041.0], [101.0, 21042.0], [100.0, 21049.0], [105.0, 3542.0], [7.0, 21041.0], [118.0, 565.0], [8.0, 21028.0], [9.0, 21031.0], [10.0, 21039.0], [183.0, 636.0], [11.0, 21037.0], [12.0, 21045.0], [13.0, 21044.0], [14.0, 34410.0], [15.0, 21051.0], [1.0, 21043.5], [16.0, 21041.0], [19.0, 21040.0], [20.0, 21050.0], [21.0, 21019.5], [22.0, 21037.0], [25.0, 21037.0], [28.0, 22383.0], [30.0, 19269.0], [31.0, 21034.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 183.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 416842.5, "series": [{"data": [[2.0, 296502.5], [8.0, 301253.0], [9.0, 305245.5], [40.0, 172030.0], [10.0, 284728.5], [11.0, 416842.5], [3.0, 271490.5], [12.0, 290248.0], [13.0, 240244.0], [15.0, 307787.0], [1.0, 266715.0], [4.0, 297047.0], [16.0, 359554.0], [20.0, 292575.0], [5.0, 298655.0], [21.0, 240551.0], [88.0, 169324.0], [22.0, 317819.0], [98.0, 148238.0], [6.0, 281606.0], [100.0, 153149.0], [7.0, 313185.0], [31.0, 150755.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [37.0, 0.0], [40.0, 0.0], [43.0, 0.0], [3.0, 0.0], [53.0, 0.0], [58.0, 0.0], [62.0, 0.0], [4.0, 0.0], [5.0, 0.0], [91.0, 0.0], [88.0, 0.0], [98.0, 0.0], [99.0, 0.0], [6.0, 0.0], [97.0, 0.0], [101.0, 0.0], [100.0, 0.0], [105.0, 0.0], [7.0, 0.0], [118.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [183.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [16.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [25.0, 0.0], [28.0, 0.0], [30.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 183.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.71236112E12, "maxY": 17.733333333333334, "series": [{"data": [[1.7123634E12, 0.06666666666666667], [1.71236178E12, 0.2], [1.7123631E12, 0.95], [1.71236208E12, 0.2], [1.71236118E12, 14.15], [1.71236148E12, 2.8666666666666667], [1.7123628E12, 1.3833333333333333], [1.7123619E12, 1.0333333333333334], [1.7123625E12, 1.6833333333333333], [1.7123622E12, 1.0166666666666666], [1.71236226E12, 0.4666666666666667], [1.71236256E12, 0.16666666666666666], [1.71236166E12, 0.7166666666666667], [1.71236196E12, 0.48333333333333334], [1.71236268E12, 0.75], [1.71236238E12, 0.1], [1.71236136E12, 2.7666666666666666], [1.71236328E12, 0.21666666666666667], [1.71236298E12, 0.9166666666666666], [1.71236244E12, 0.65], [1.71236112E12, 17.733333333333334], [1.71236304E12, 0.35], [1.71236214E12, 0.48333333333333334], [1.71236274E12, 0.13333333333333333], [1.71236316E12, 0.38333333333333336], [1.71236154E12, 2.45], [1.71236286E12, 0.1], [1.71236184E12, 0.6666666666666666], [1.71236124E12, 13.633333333333333], [1.7123613E12, 8.316666666666666], [1.71236292E12, 0.26666666666666666], [1.71236262E12, 0.2], [1.7123616E12, 2.2666666666666666], [1.71236322E12, 0.15], [1.71236202E12, 0.4166666666666667], [1.71236334E12, 0.21666666666666667], [1.71236232E12, 0.4], [1.71236142E12, 3.6166666666666667], [1.71236172E12, 0.7666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123634E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71236112E12, "maxY": 13.366666666666667, "series": [{"data": [[1.7123634E12, 0.5], [1.71236178E12, 0.2], [1.7123631E12, 1.0833333333333333], [1.71236208E12, 0.2], [1.71236148E12, 0.2833333333333333], [1.7123628E12, 1.25], [1.7123619E12, 0.9166666666666666], [1.7123625E12, 1.35], [1.7123622E12, 1.1166666666666667], [1.71236226E12, 0.5], [1.71236256E12, 0.13333333333333333], [1.71236166E12, 0.5666666666666667], [1.71236196E12, 0.6166666666666667], [1.71236268E12, 0.65], [1.71236238E12, 0.1], [1.71236136E12, 0.06666666666666667], [1.71236328E12, 0.36666666666666664], [1.71236298E12, 0.8666666666666667], [1.71236244E12, 0.55], [1.71236304E12, 0.4], [1.71236214E12, 0.43333333333333335], [1.71236274E12, 0.13333333333333333], [1.71236316E12, 0.5], [1.71236154E12, 0.31666666666666665], [1.71236286E12, 0.13333333333333333], [1.71236184E12, 0.55], [1.7123613E12, 1.4666666666666666], [1.71236292E12, 0.3], [1.71236262E12, 0.23333333333333334], [1.7123616E12, 1.05], [1.71236322E12, 0.3], [1.71236202E12, 0.4], [1.71236334E12, 0.5333333333333333], [1.71236232E12, 0.31666666666666665], [1.71236142E12, 0.8666666666666667], [1.71236172E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71236178E12, 0.016666666666666666], [1.7123631E12, 0.18333333333333332], [1.71236148E12, 0.08333333333333333], [1.7123628E12, 0.3333333333333333], [1.7123619E12, 0.06666666666666667], [1.7123625E12, 0.43333333333333335], [1.7123622E12, 0.06666666666666667], [1.71236226E12, 0.1], [1.71236256E12, 0.08333333333333333], [1.71236166E12, 0.06666666666666667], [1.71236196E12, 0.016666666666666666], [1.71236268E12, 0.11666666666666667], [1.71236136E12, 0.05], [1.71236328E12, 0.08333333333333333], [1.71236298E12, 0.15], [1.71236244E12, 0.16666666666666666], [1.71236112E12, 0.2], [1.71236304E12, 0.06666666666666667], [1.71236214E12, 0.2], [1.71236274E12, 0.016666666666666666], [1.71236316E12, 0.11666666666666667], [1.71236154E12, 0.03333333333333333], [1.71236184E12, 0.15], [1.7123613E12, 0.13333333333333333], [1.7123616E12, 0.21666666666666667], [1.71236202E12, 0.03333333333333333], [1.71236232E12, 0.11666666666666667], [1.71236142E12, 0.016666666666666666], [1.71236172E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.7123613E12, 9.066666666666666], [1.7123616E12, 0.8833333333333333], [1.71236118E12, 12.183333333333334], [1.71236166E12, 0.4], [1.71236148E12, 2.55], [1.71236154E12, 1.9666666666666666], [1.71236136E12, 2.3], [1.71236142E12, 2.2], [1.71236124E12, 13.366666666666667], [1.71236172E12, 0.31666666666666665]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.7123613E12, 1.35], [1.71236112E12, 9.2], [1.7123616E12, 0.35], [1.71236118E12, 1.9666666666666666], [1.71236166E12, 0.03333333333333333], [1.71236148E12, 0.5333333333333333], [1.71236154E12, 0.18333333333333332], [1.71236136E12, 0.45], [1.71236142E12, 0.5333333333333333], [1.7123619E12, 0.1], [1.71236124E12, 0.26666666666666666], [1.71236172E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123634E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71236112E12, "maxY": 14.15, "series": [{"data": [[1.7123634E12, 0.5], [1.71236178E12, 0.2], [1.7123631E12, 1.0833333333333333], [1.71236208E12, 0.2], [1.71236148E12, 0.2833333333333333], [1.7123628E12, 1.25], [1.7123619E12, 0.9166666666666666], [1.7123625E12, 1.35], [1.7123622E12, 1.1166666666666667], [1.71236226E12, 0.5], [1.71236256E12, 0.13333333333333333], [1.71236166E12, 0.5666666666666667], [1.71236196E12, 0.6166666666666667], [1.71236268E12, 0.65], [1.71236238E12, 0.1], [1.71236136E12, 0.06666666666666667], [1.71236328E12, 0.36666666666666664], [1.71236298E12, 0.8666666666666667], [1.71236244E12, 0.55], [1.71236304E12, 0.4], [1.71236214E12, 0.43333333333333335], [1.71236274E12, 0.13333333333333333], [1.71236316E12, 0.5], [1.71236154E12, 0.31666666666666665], [1.71236286E12, 0.13333333333333333], [1.71236184E12, 0.55], [1.7123613E12, 1.4666666666666666], [1.71236292E12, 0.3], [1.71236262E12, 0.23333333333333334], [1.7123616E12, 1.05], [1.71236322E12, 0.3], [1.71236202E12, 0.4], [1.71236334E12, 0.5333333333333333], [1.71236232E12, 0.31666666666666665], [1.71236142E12, 0.8666666666666667], [1.71236172E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request (Mid image)-success", "isController": false}, {"data": [[1.71236178E12, 0.016666666666666666], [1.7123631E12, 0.18333333333333332], [1.71236118E12, 14.15], [1.71236148E12, 3.1666666666666665], [1.7123628E12, 0.3333333333333333], [1.7123619E12, 0.16666666666666666], [1.7123625E12, 0.43333333333333335], [1.7123622E12, 0.06666666666666667], [1.71236226E12, 0.1], [1.71236256E12, 0.08333333333333333], [1.71236166E12, 0.5], [1.71236196E12, 0.016666666666666666], [1.71236268E12, 0.11666666666666667], [1.71236136E12, 2.8], [1.71236328E12, 0.08333333333333333], [1.71236298E12, 0.15], [1.71236244E12, 0.16666666666666666], [1.71236112E12, 9.4], [1.71236304E12, 0.06666666666666667], [1.71236214E12, 0.2], [1.71236274E12, 0.016666666666666666], [1.71236316E12, 0.11666666666666667], [1.71236154E12, 2.183333333333333], [1.71236184E12, 0.15], [1.71236124E12, 13.633333333333333], [1.7123613E12, 10.55], [1.7123616E12, 1.45], [1.71236202E12, 0.03333333333333333], [1.71236232E12, 0.11666666666666667], [1.71236142E12, 2.75], [1.71236172E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request (Mid image)-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123634E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71236112E12, "maxY": 14.15, "series": [{"data": [[1.7123634E12, 0.5], [1.71236178E12, 0.2], [1.7123631E12, 1.0833333333333333], [1.71236208E12, 0.2], [1.71236148E12, 0.2833333333333333], [1.7123628E12, 1.25], [1.7123619E12, 0.9166666666666666], [1.7123625E12, 1.35], [1.7123622E12, 1.1166666666666667], [1.71236226E12, 0.5], [1.71236256E12, 0.13333333333333333], [1.71236166E12, 0.5666666666666667], [1.71236196E12, 0.6166666666666667], [1.71236268E12, 0.65], [1.71236238E12, 0.1], [1.71236136E12, 0.06666666666666667], [1.71236328E12, 0.36666666666666664], [1.71236298E12, 0.8666666666666667], [1.71236244E12, 0.55], [1.71236304E12, 0.4], [1.71236214E12, 0.43333333333333335], [1.71236274E12, 0.13333333333333333], [1.71236316E12, 0.5], [1.71236154E12, 0.31666666666666665], [1.71236286E12, 0.13333333333333333], [1.71236184E12, 0.55], [1.7123613E12, 1.4666666666666666], [1.71236292E12, 0.3], [1.71236262E12, 0.23333333333333334], [1.7123616E12, 1.05], [1.71236322E12, 0.3], [1.71236202E12, 0.4], [1.71236334E12, 0.5333333333333333], [1.71236232E12, 0.31666666666666665], [1.71236142E12, 0.8666666666666667], [1.71236172E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71236178E12, 0.016666666666666666], [1.7123631E12, 0.18333333333333332], [1.71236118E12, 14.15], [1.71236148E12, 3.1666666666666665], [1.7123628E12, 0.3333333333333333], [1.7123619E12, 0.16666666666666666], [1.7123625E12, 0.43333333333333335], [1.7123622E12, 0.06666666666666667], [1.71236226E12, 0.1], [1.71236256E12, 0.08333333333333333], [1.71236166E12, 0.5], [1.71236196E12, 0.016666666666666666], [1.71236268E12, 0.11666666666666667], [1.71236136E12, 2.8], [1.71236328E12, 0.08333333333333333], [1.71236298E12, 0.15], [1.71236244E12, 0.16666666666666666], [1.71236112E12, 9.4], [1.71236304E12, 0.06666666666666667], [1.71236214E12, 0.2], [1.71236274E12, 0.016666666666666666], [1.71236316E12, 0.11666666666666667], [1.71236154E12, 2.183333333333333], [1.71236184E12, 0.15], [1.71236124E12, 13.633333333333333], [1.7123613E12, 10.55], [1.7123616E12, 1.45], [1.71236202E12, 0.03333333333333333], [1.71236232E12, 0.11666666666666667], [1.71236142E12, 2.75], [1.71236172E12, 0.5666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123634E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

