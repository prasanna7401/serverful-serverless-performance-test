/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1909.0, "minX": 0.0, "maxY": 140118.0, "series": [{"data": [[0.0, 1909.0], [0.1, 1909.0], [0.2, 1923.0], [0.3, 1923.0], [0.4, 1935.0], [0.5, 1935.0], [0.6, 1935.0], [0.7, 2101.0], [0.8, 2103.0], [0.9, 2103.0], [1.0, 2113.0], [1.1, 2113.0], [1.2, 2120.0], [1.3, 2120.0], [1.4, 2120.0], [1.5, 2120.0], [1.6, 2123.0], [1.7, 2123.0], [1.8, 2124.0], [1.9, 2124.0], [2.0, 2134.0], [2.1, 2134.0], [2.2, 2310.0], [2.3, 2310.0], [2.4, 2310.0], [2.5, 2329.0], [2.6, 2329.0], [2.7, 2336.0], [2.8, 2336.0], [2.9, 2336.0], [3.0, 2336.0], [3.1, 2336.0], [3.2, 2336.0], [3.3, 2513.0], [3.4, 2513.0], [3.5, 2610.0], [3.6, 2610.0], [3.7, 2625.0], [3.8, 2625.0], [3.9, 2733.0], [4.0, 2733.0], [4.1, 2941.0], [4.2, 2941.0], [4.3, 3061.0], [4.4, 3061.0], [4.5, 3063.0], [4.6, 3063.0], [4.7, 3085.0], [4.8, 3085.0], [4.9, 3091.0], [5.0, 3091.0], [5.1, 3223.0], [5.2, 3223.0], [5.3, 3244.0], [5.4, 3244.0], [5.5, 3529.0], [5.6, 3529.0], [5.7, 3529.0], [5.8, 3529.0], [5.9, 4139.0], [6.0, 4139.0], [6.1, 4400.0], [6.2, 4400.0], [6.3, 4514.0], [6.4, 4514.0], [6.5, 4534.0], [6.6, 4534.0], [6.7, 4560.0], [6.8, 4560.0], [6.9, 4595.0], [7.0, 4595.0], [7.1, 4624.0], [7.2, 4624.0], [7.3, 4797.0], [7.4, 4797.0], [7.5, 5429.0], [7.6, 5429.0], [7.7, 5494.0], [7.8, 5494.0], [7.9, 5656.0], [8.0, 5656.0], [8.1, 5665.0], [8.2, 5665.0], [8.3, 5665.0], [8.4, 5665.0], [8.5, 5666.0], [8.6, 5666.0], [8.7, 5683.0], [8.8, 5683.0], [8.9, 5694.0], [9.0, 5694.0], [9.1, 5701.0], [9.2, 5701.0], [9.3, 5781.0], [9.4, 5782.0], [9.5, 5782.0], [9.6, 5786.0], [9.7, 5786.0], [9.8, 5797.0], [9.9, 5797.0], [10.0, 5803.0], [10.1, 5803.0], [10.2, 5804.0], [10.3, 5804.0], [10.4, 5813.0], [10.5, 5813.0], [10.6, 6294.0], [10.7, 6294.0], [10.8, 6455.0], [10.9, 6455.0], [11.0, 6484.0], [11.1, 6484.0], [11.2, 6484.0], [11.3, 6484.0], [11.4, 6485.0], [11.5, 6485.0], [11.6, 6486.0], [11.7, 6486.0], [11.8, 6490.0], [11.9, 6490.0], [12.0, 6491.0], [12.1, 6491.0], [12.2, 6491.0], [12.3, 6491.0], [12.4, 6492.0], [12.5, 6492.0], [12.6, 6492.0], [12.7, 6492.0], [12.8, 6492.0], [12.9, 6492.0], [13.0, 6492.0], [13.1, 6492.0], [13.2, 6493.0], [13.3, 6493.0], [13.4, 6493.0], [13.5, 6493.0], [13.6, 6494.0], [13.7, 6494.0], [13.8, 6494.0], [13.9, 6494.0], [14.0, 6494.0], [14.1, 6494.0], [14.2, 6494.0], [14.3, 6494.0], [14.4, 6495.0], [14.5, 6495.0], [14.6, 6496.0], [14.7, 6496.0], [14.8, 6496.0], [14.9, 6496.0], [15.0, 6496.0], [15.1, 6496.0], [15.2, 6497.0], [15.3, 6497.0], [15.4, 6499.0], [15.5, 6499.0], [15.6, 6501.0], [15.7, 6501.0], [15.8, 6503.0], [15.9, 6503.0], [16.0, 6503.0], [16.1, 6503.0], [16.2, 6505.0], [16.3, 6505.0], [16.4, 6506.0], [16.5, 6506.0], [16.6, 6507.0], [16.7, 6507.0], [16.8, 6508.0], [16.9, 6508.0], [17.0, 6509.0], [17.1, 6509.0], [17.2, 6511.0], [17.3, 6511.0], [17.4, 6511.0], [17.5, 6511.0], [17.6, 6512.0], [17.7, 6512.0], [17.8, 6512.0], [17.9, 6512.0], [18.0, 6513.0], [18.1, 6513.0], [18.2, 6515.0], [18.3, 6515.0], [18.4, 6516.0], [18.5, 6516.0], [18.6, 6516.0], [18.7, 6516.0], [18.8, 6517.0], [18.9, 6517.0], [19.0, 6517.0], [19.1, 6517.0], [19.2, 6517.0], [19.3, 6517.0], [19.4, 6517.0], [19.5, 6517.0], [19.6, 6518.0], [19.7, 6518.0], [19.8, 6520.0], [19.9, 6520.0], [20.0, 6524.0], [20.1, 6524.0], [20.2, 6524.0], [20.3, 6524.0], [20.4, 6525.0], [20.5, 6525.0], [20.6, 6526.0], [20.7, 6526.0], [20.8, 6934.0], [20.9, 6934.0], [21.0, 10667.0], [21.1, 10667.0], [21.2, 15537.0], [21.3, 15537.0], [21.4, 15538.0], [21.5, 15538.0], [21.6, 15539.0], [21.7, 15539.0], [21.8, 15542.0], [21.9, 15542.0], [22.0, 15543.0], [22.1, 15543.0], [22.2, 15544.0], [22.3, 15544.0], [22.4, 15544.0], [22.5, 15544.0], [22.6, 15546.0], [22.7, 15546.0], [22.8, 15551.0], [22.9, 15551.0], [23.0, 15553.0], [23.1, 15553.0], [23.2, 15554.0], [23.3, 15554.0], [23.4, 15554.0], [23.5, 15554.0], [23.6, 15556.0], [23.7, 15556.0], [23.8, 15557.0], [23.9, 15557.0], [24.0, 15557.0], [24.1, 15557.0], [24.2, 15558.0], [24.3, 15558.0], [24.4, 15559.0], [24.5, 15559.0], [24.6, 15560.0], [24.7, 15560.0], [24.8, 15560.0], [24.9, 15560.0], [25.0, 15560.0], [25.1, 15560.0], [25.2, 15561.0], [25.3, 15561.0], [25.4, 15561.0], [25.5, 15561.0], [25.6, 15562.0], [25.7, 15562.0], [25.8, 15564.0], [25.9, 15564.0], [26.0, 15566.0], [26.1, 15566.0], [26.2, 15567.0], [26.3, 15567.0], [26.4, 15568.0], [26.5, 15568.0], [26.6, 15570.0], [26.7, 15570.0], [26.8, 15570.0], [26.9, 15570.0], [27.0, 15570.0], [27.1, 15570.0], [27.2, 15574.0], [27.3, 15574.0], [27.4, 15574.0], [27.5, 15574.0], [27.6, 15576.0], [27.7, 15576.0], [27.8, 15577.0], [27.9, 15577.0], [28.0, 15577.0], [28.1, 15577.0], [28.2, 15578.0], [28.3, 15578.0], [28.4, 15584.0], [28.5, 15584.0], [28.6, 15584.0], [28.7, 15584.0], [28.8, 15584.0], [28.9, 15584.0], [29.0, 15584.0], [29.1, 15584.0], [29.2, 15585.0], [29.3, 15585.0], [29.4, 15585.0], [29.5, 15585.0], [29.6, 15585.0], [29.7, 15585.0], [29.8, 15586.0], [29.9, 15586.0], [30.0, 15586.0], [30.1, 15586.0], [30.2, 15590.0], [30.3, 15590.0], [30.4, 15590.0], [30.5, 15590.0], [30.6, 15591.0], [30.7, 15591.0], [30.8, 15906.0], [30.9, 15906.0], [31.0, 33446.0], [31.1, 33446.0], [31.2, 33458.0], [31.3, 33458.0], [31.4, 33600.0], [31.5, 33600.0], [31.6, 34764.0], [31.7, 34764.0], [31.8, 35503.0], [31.9, 35503.0], [32.0, 35641.0], [32.1, 35641.0], [32.2, 35642.0], [32.3, 35642.0], [32.4, 35642.0], [32.5, 35642.0], [32.6, 35654.0], [32.7, 35654.0], [32.8, 35666.0], [32.9, 35666.0], [33.0, 35674.0], [33.1, 35674.0], [33.2, 35818.0], [33.3, 35818.0], [33.4, 35866.0], [33.5, 35866.0], [33.6, 35872.0], [33.7, 35872.0], [33.8, 35875.0], [33.9, 35875.0], [34.0, 35875.0], [34.1, 35875.0], [34.2, 35878.0], [34.3, 35878.0], [34.4, 35879.0], [34.5, 35879.0], [34.6, 35879.0], [34.7, 35879.0], [34.8, 35886.0], [34.9, 35886.0], [35.0, 35889.0], [35.1, 35889.0], [35.2, 35894.0], [35.3, 35894.0], [35.4, 35895.0], [35.5, 35895.0], [35.6, 35895.0], [35.7, 35895.0], [35.8, 35895.0], [35.9, 35895.0], [36.0, 35895.0], [36.1, 35895.0], [36.2, 35895.0], [36.3, 35895.0], [36.4, 35903.0], [36.5, 35903.0], [36.6, 35912.0], [36.7, 35912.0], [36.8, 35918.0], [36.9, 35918.0], [37.0, 35926.0], [37.1, 35926.0], [37.2, 35928.0], [37.3, 35928.0], [37.4, 35936.0], [37.5, 35936.0], [37.6, 35937.0], [37.7, 35937.0], [37.8, 36009.0], [37.9, 36009.0], [38.0, 36011.0], [38.1, 36011.0], [38.2, 36013.0], [38.3, 36013.0], [38.4, 36013.0], [38.5, 36013.0], [38.6, 36015.0], [38.7, 36015.0], [38.8, 36015.0], [38.9, 36015.0], [39.0, 36022.0], [39.1, 36022.0], [39.2, 36023.0], [39.3, 36023.0], [39.4, 36023.0], [39.5, 36024.0], [39.6, 36024.0], [39.7, 36025.0], [39.8, 36025.0], [39.9, 36029.0], [40.0, 36029.0], [40.1, 36035.0], [40.2, 36035.0], [40.3, 36036.0], [40.4, 36036.0], [40.5, 36039.0], [40.6, 36039.0], [40.7, 36040.0], [40.8, 36040.0], [40.9, 36042.0], [41.0, 36042.0], [41.1, 36042.0], [41.2, 36042.0], [41.3, 36047.0], [41.4, 36047.0], [41.5, 36048.0], [41.6, 36048.0], [41.7, 36049.0], [41.8, 36049.0], [41.9, 36052.0], [42.0, 36052.0], [42.1, 36056.0], [42.2, 36056.0], [42.3, 36056.0], [42.4, 36056.0], [42.5, 36057.0], [42.6, 36057.0], [42.7, 36059.0], [42.8, 36059.0], [42.9, 36061.0], [43.0, 36061.0], [43.1, 36061.0], [43.2, 36061.0], [43.3, 36063.0], [43.4, 36063.0], [43.5, 36063.0], [43.6, 36063.0], [43.7, 36066.0], [43.8, 36066.0], [43.9, 36070.0], [44.0, 36070.0], [44.1, 36070.0], [44.2, 36070.0], [44.3, 36083.0], [44.4, 36083.0], [44.5, 36111.0], [44.6, 36111.0], [44.7, 36112.0], [44.8, 36112.0], [44.9, 36132.0], [45.0, 36132.0], [45.1, 36159.0], [45.2, 36159.0], [45.3, 36282.0], [45.4, 36282.0], [45.5, 36457.0], [45.6, 36457.0], [45.7, 36837.0], [45.8, 36837.0], [45.9, 36866.0], [46.0, 36866.0], [46.1, 36867.0], [46.2, 36867.0], [46.3, 39043.0], [46.4, 39043.0], [46.5, 39739.0], [46.6, 39739.0], [46.7, 39839.0], [46.8, 39839.0], [46.9, 41072.0], [47.0, 41072.0], [47.1, 41090.0], [47.2, 41090.0], [47.3, 41570.0], [47.4, 41570.0], [47.5, 41616.0], [47.6, 41616.0], [47.7, 42748.0], [47.8, 42748.0], [47.9, 42756.0], [48.0, 42756.0], [48.1, 42991.0], [48.2, 42991.0], [48.3, 43017.0], [48.4, 43017.0], [48.5, 43480.0], [48.6, 43480.0], [48.7, 43505.0], [48.8, 43505.0], [48.9, 44496.0], [49.0, 44496.0], [49.1, 44505.0], [49.2, 44505.0], [49.3, 44528.0], [49.4, 44528.0], [49.5, 44647.0], [49.6, 44647.0], [49.7, 45667.0], [49.8, 45667.0], [49.9, 46757.0], [50.0, 46757.0], [50.1, 47092.0], [50.2, 47092.0], [50.3, 47101.0], [50.4, 47101.0], [50.5, 47106.0], [50.6, 47106.0], [50.7, 47113.0], [50.8, 47113.0], [50.9, 47778.0], [51.0, 47778.0], [51.1, 48206.0], [51.2, 48206.0], [51.3, 49316.0], [51.4, 49316.0], [51.5, 49401.0], [51.6, 49401.0], [51.7, 54541.0], [51.8, 54541.0], [51.9, 54544.0], [52.0, 54544.0], [52.1, 54549.0], [52.2, 54549.0], [52.3, 54553.0], [52.4, 54553.0], [52.5, 54564.0], [52.6, 54564.0], [52.7, 54680.0], [52.8, 54680.0], [52.9, 54683.0], [53.0, 54683.0], [53.1, 54696.0], [53.2, 54696.0], [53.3, 54699.0], [53.4, 54699.0], [53.5, 54700.0], [53.6, 54700.0], [53.7, 54989.0], [53.8, 54989.0], [53.9, 55063.0], [54.0, 55063.0], [54.1, 55086.0], [54.2, 55086.0], [54.3, 55095.0], [54.4, 55095.0], [54.5, 55102.0], [54.6, 55102.0], [54.7, 55583.0], [54.8, 55583.0], [54.9, 55604.0], [55.0, 55604.0], [55.1, 55680.0], [55.2, 55680.0], [55.3, 56135.0], [55.4, 56135.0], [55.5, 56146.0], [55.6, 56146.0], [55.7, 56163.0], [55.8, 56163.0], [55.9, 58480.0], [56.0, 58480.0], [56.1, 59038.0], [56.2, 59038.0], [56.3, 59427.0], [56.4, 59427.0], [56.5, 59676.0], [56.6, 59676.0], [56.7, 60176.0], [56.8, 60176.0], [56.9, 60759.0], [57.0, 60759.0], [57.1, 61471.0], [57.2, 61471.0], [57.3, 62701.0], [57.4, 62701.0], [57.5, 62714.0], [57.6, 62714.0], [57.7, 62829.0], [57.8, 62829.0], [57.9, 63514.0], [58.0, 63514.0], [58.1, 63816.0], [58.2, 63816.0], [58.3, 63991.0], [58.4, 63991.0], [58.5, 64069.0], [58.6, 64069.0], [58.7, 64096.0], [58.8, 64096.0], [58.9, 64104.0], [59.0, 64104.0], [59.1, 64253.0], [59.2, 64253.0], [59.3, 64348.0], [59.4, 64348.0], [59.5, 64360.0], [59.6, 64360.0], [59.7, 64367.0], [59.8, 64367.0], [59.9, 64372.0], [60.0, 64372.0], [60.1, 64373.0], [60.2, 64373.0], [60.3, 64378.0], [60.4, 64378.0], [60.5, 64670.0], [60.6, 64670.0], [60.7, 65570.0], [60.8, 65570.0], [60.9, 65590.0], [61.0, 65590.0], [61.1, 65623.0], [61.2, 65623.0], [61.3, 65624.0], [61.4, 65624.0], [61.5, 65630.0], [61.6, 65630.0], [61.7, 65634.0], [61.8, 65634.0], [61.9, 65641.0], [62.0, 65641.0], [62.1, 65853.0], [62.2, 65853.0], [62.3, 65978.0], [62.4, 65978.0], [62.5, 67577.0], [62.6, 67577.0], [62.7, 68215.0], [62.8, 68215.0], [62.9, 69327.0], [63.0, 69327.0], [63.1, 69340.0], [63.2, 69340.0], [63.3, 69351.0], [63.4, 69351.0], [63.5, 70222.0], [63.6, 70222.0], [63.7, 71583.0], [63.8, 71583.0], [63.9, 71895.0], [64.0, 71895.0], [64.1, 71911.0], [64.2, 71911.0], [64.3, 71912.0], [64.4, 71912.0], [64.5, 72679.0], [64.6, 72679.0], [64.7, 74490.0], [64.8, 74490.0], [64.9, 79262.0], [65.0, 79262.0], [65.1, 79281.0], [65.2, 79281.0], [65.3, 79462.0], [65.4, 79462.0], [65.5, 79484.0], [65.6, 79484.0], [65.7, 79493.0], [65.8, 79493.0], [65.9, 79586.0], [66.0, 79586.0], [66.1, 79586.0], [66.2, 79586.0], [66.3, 79665.0], [66.4, 79665.0], [66.5, 79807.0], [66.6, 79807.0], [66.7, 80826.0], [66.8, 80826.0], [66.9, 81521.0], [67.0, 81521.0], [67.1, 81525.0], [67.2, 81525.0], [67.3, 82264.0], [67.4, 82264.0], [67.5, 82282.0], [67.6, 82282.0], [67.7, 83716.0], [67.8, 83716.0], [67.9, 83716.0], [68.0, 83716.0], [68.1, 85818.0], [68.2, 85818.0], [68.3, 87470.0], [68.4, 87470.0], [68.5, 87480.0], [68.6, 87480.0], [68.7, 87866.0], [68.8, 87866.0], [68.9, 88371.0], [69.0, 88371.0], [69.1, 89010.0], [69.2, 89010.0], [69.3, 89760.0], [69.4, 89760.0], [69.5, 89777.0], [69.6, 89777.0], [69.7, 89802.0], [69.8, 89802.0], [69.9, 89803.0], [70.0, 89803.0], [70.1, 89811.0], [70.2, 89811.0], [70.3, 89814.0], [70.4, 89814.0], [70.5, 89835.0], [70.6, 89835.0], [70.7, 90071.0], [70.8, 90071.0], [70.9, 90077.0], [71.0, 90077.0], [71.1, 90084.0], [71.2, 90084.0], [71.3, 90085.0], [71.4, 90085.0], [71.5, 90085.0], [71.6, 90085.0], [71.7, 90172.0], [71.8, 90172.0], [71.9, 90612.0], [72.0, 90612.0], [72.1, 90627.0], [72.2, 90627.0], [72.3, 90638.0], [72.4, 90638.0], [72.5, 90651.0], [72.6, 90651.0], [72.7, 91938.0], [72.8, 91938.0], [72.9, 93519.0], [73.0, 93519.0], [73.1, 93546.0], [73.2, 93546.0], [73.3, 94282.0], [73.4, 94282.0], [73.5, 94314.0], [73.6, 94314.0], [73.7, 95930.0], [73.8, 95930.0], [73.9, 96532.0], [74.0, 96532.0], [74.1, 96663.0], [74.2, 96663.0], [74.3, 97044.0], [74.4, 97044.0], [74.5, 97073.0], [74.6, 97073.0], [74.7, 99447.0], [74.8, 99447.0], [74.9, 99580.0], [75.0, 99580.0], [75.1, 99583.0], [75.2, 99583.0], [75.3, 99583.0], [75.4, 99583.0], [75.5, 99587.0], [75.6, 99587.0], [75.7, 99592.0], [75.8, 99592.0], [75.9, 99592.0], [76.0, 99592.0], [76.1, 99597.0], [76.2, 99597.0], [76.3, 99598.0], [76.4, 99598.0], [76.5, 99605.0], [76.6, 99605.0], [76.7, 99607.0], [76.8, 99607.0], [76.9, 99609.0], [77.0, 99609.0], [77.1, 99614.0], [77.2, 99614.0], [77.3, 99615.0], [77.4, 99615.0], [77.5, 99615.0], [77.6, 99615.0], [77.7, 99616.0], [77.8, 99616.0], [77.9, 99690.0], [78.0, 99690.0], [78.1, 99692.0], [78.2, 99692.0], [78.3, 100097.0], [78.4, 100097.0], [78.5, 102899.0], [78.6, 102899.0], [78.7, 104424.0], [78.8, 104424.0], [78.9, 104791.0], [79.0, 104791.0], [79.1, 104795.0], [79.2, 104795.0], [79.3, 104802.0], [79.4, 104802.0], [79.5, 104807.0], [79.6, 104807.0], [79.7, 104920.0], [79.8, 104920.0], [79.9, 105621.0], [80.0, 105621.0], [80.1, 105663.0], [80.2, 105663.0], [80.3, 105683.0], [80.4, 105683.0], [80.5, 106018.0], [80.6, 106018.0], [80.7, 106890.0], [80.8, 106890.0], [80.9, 107136.0], [81.0, 107136.0], [81.1, 107433.0], [81.2, 107433.0], [81.3, 107828.0], [81.4, 107828.0], [81.5, 108034.0], [81.6, 108034.0], [81.7, 110397.0], [81.8, 110397.0], [81.9, 110398.0], [82.0, 110398.0], [82.1, 110399.0], [82.2, 110399.0], [82.3, 110688.0], [82.4, 110688.0], [82.5, 110716.0], [82.6, 110716.0], [82.7, 110729.0], [82.8, 110729.0], [82.9, 111736.0], [83.0, 111736.0], [83.1, 112095.0], [83.2, 112095.0], [83.3, 113023.0], [83.4, 113023.0], [83.5, 113198.0], [83.6, 113198.0], [83.7, 114441.0], [83.8, 114441.0], [83.9, 114501.0], [84.0, 114501.0], [84.1, 114510.0], [84.2, 114510.0], [84.3, 114510.0], [84.4, 114510.0], [84.5, 114516.0], [84.6, 114516.0], [84.7, 114532.0], [84.8, 114532.0], [84.9, 116657.0], [85.0, 116657.0], [85.1, 116768.0], [85.2, 116768.0], [85.3, 117972.0], [85.4, 117972.0], [85.5, 118019.0], [85.6, 118019.0], [85.7, 118030.0], [85.8, 118030.0], [85.9, 118034.0], [86.0, 118034.0], [86.1, 118357.0], [86.2, 118357.0], [86.3, 120597.0], [86.4, 120597.0], [86.5, 122495.0], [86.6, 122495.0], [86.7, 122657.0], [86.8, 122657.0], [86.9, 123301.0], [87.0, 123301.0], [87.1, 123690.0], [87.2, 123690.0], [87.3, 123799.0], [87.4, 123799.0], [87.5, 123819.0], [87.6, 123819.0], [87.7, 124108.0], [87.8, 124108.0], [87.9, 124109.0], [88.0, 124109.0], [88.1, 124110.0], [88.2, 124110.0], [88.3, 124117.0], [88.4, 124117.0], [88.5, 125227.0], [88.6, 125227.0], [88.7, 125844.0], [88.8, 125844.0], [88.9, 126128.0], [89.0, 126128.0], [89.1, 126153.0], [89.2, 126153.0], [89.3, 126153.0], [89.4, 126153.0], [89.5, 127176.0], [89.6, 127176.0], [89.7, 127331.0], [89.8, 127331.0], [89.9, 127331.0], [90.0, 127331.0], [90.1, 127584.0], [90.2, 127584.0], [90.3, 127666.0], [90.4, 127666.0], [90.5, 127835.0], [90.6, 127835.0], [90.7, 128407.0], [90.8, 128407.0], [90.9, 128413.0], [91.0, 128413.0], [91.1, 128903.0], [91.2, 128903.0], [91.3, 129930.0], [91.4, 129930.0], [91.5, 130958.0], [91.6, 130958.0], [91.7, 131021.0], [91.8, 131021.0], [91.9, 131783.0], [92.0, 131783.0], [92.1, 132099.0], [92.2, 132099.0], [92.3, 132187.0], [92.4, 132187.0], [92.5, 132515.0], [92.6, 132515.0], [92.7, 132911.0], [92.8, 132911.0], [92.9, 132951.0], [93.0, 132951.0], [93.1, 133139.0], [93.2, 133139.0], [93.3, 133694.0], [93.4, 133694.0], [93.5, 134134.0], [93.6, 134134.0], [93.7, 134492.0], [93.8, 134492.0], [93.9, 134640.0], [94.0, 134640.0], [94.1, 135037.0], [94.2, 135037.0], [94.3, 135393.0], [94.4, 135393.0], [94.5, 135493.0], [94.6, 135493.0], [94.7, 135550.0], [94.8, 135550.0], [94.9, 136471.0], [95.0, 136471.0], [95.1, 137008.0], [95.2, 137008.0], [95.3, 137012.0], [95.4, 137012.0], [95.5, 137016.0], [95.6, 137016.0], [95.7, 137586.0], [95.8, 137586.0], [95.9, 137789.0], [96.0, 137789.0], [96.1, 137972.0], [96.2, 137972.0], [96.3, 138041.0], [96.4, 138041.0], [96.5, 138178.0], [96.6, 138178.0], [96.7, 138326.0], [96.8, 138326.0], [96.9, 138338.0], [97.0, 138338.0], [97.1, 138423.0], [97.2, 138423.0], [97.3, 138840.0], [97.4, 138840.0], [97.5, 138858.0], [97.6, 138858.0], [97.7, 139136.0], [97.8, 139136.0], [97.9, 139190.0], [98.0, 139190.0], [98.1, 139447.0], [98.2, 139447.0], [98.3, 139549.0], [98.4, 139549.0], [98.5, 139614.0], [98.6, 139614.0], [98.7, 139619.0], [98.8, 139619.0], [98.9, 139634.0], [99.0, 139634.0], [99.1, 139720.0], [99.2, 139720.0], [99.3, 139872.0], [99.4, 139872.0], [99.5, 139878.0], [99.6, 139878.0], [99.7, 139912.0], [99.8, 139912.0], [99.9, 140118.0], [100.0, 140118.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1900.0, "maxY": 48.0, "series": [{"data": [[132000.0, 1.0], [133600.0, 1.0], [138400.0, 1.0], [132900.0, 2.0], [137700.0, 1.0], [65900.0, 1.0], [67500.0, 1.0], [71500.0, 1.0], [79500.0, 2.0], [88300.0, 1.0], [99500.0, 8.0], [110700.0, 2.0], [113100.0, 1.0], [117900.0, 1.0], [127500.0, 1.0], [129900.0, 1.0], [135400.0, 1.0], [137000.0, 3.0], [133100.0, 1.0], [137900.0, 1.0], [36100.0, 4.0], [139500.0, 1.0], [39700.0, 1.0], [42900.0, 1.0], [44500.0, 2.0], [47700.0, 1.0], [49300.0, 1.0], [54500.0, 5.0], [54900.0, 1.0], [56100.0, 3.0], [60100.0, 1.0], [64100.0, 1.0], [65800.0, 1.0], [68200.0, 1.0], [79400.0, 3.0], [85800.0, 1.0], [87400.0, 2.0], [89000.0, 1.0], [89800.0, 5.0], [90600.0, 4.0], [97000.0, 2.0], [99400.0, 1.0], [107400.0, 1.0], [110600.0, 1.0], [113000.0, 1.0], [122600.0, 1.0], [125800.0, 1.0], [138800.0, 2.0], [1900.0, 3.0], [2100.0, 8.0], [131700.0, 1.0], [138100.0, 1.0], [2300.0, 5.0], [139700.0, 1.0], [2500.0, 1.0], [2600.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 4.0], [3200.0, 2.0], [3500.0, 2.0], [4100.0, 1.0], [4400.0, 1.0], [4500.0, 4.0], [4600.0, 1.0], [4700.0, 1.0], [5400.0, 2.0], [5600.0, 6.0], [89700.0, 2.0], [5700.0, 5.0], [5800.0, 3.0], [6200.0, 1.0], [6400.0, 24.0], [6500.0, 26.0], [104900.0, 1.0], [6900.0, 1.0], [114500.0, 5.0], [123300.0, 1.0], [124100.0, 4.0], [127300.0, 2.0], [128900.0, 1.0], [10600.0, 1.0], [15500.0, 48.0], [15900.0, 1.0], [33600.0, 1.0], [138300.0, 2.0], [35600.0, 6.0], [36000.0, 33.0], [36400.0, 1.0], [36800.0, 3.0], [139900.0, 1.0], [41600.0, 1.0], [44400.0, 1.0], [45600.0, 1.0], [55600.0, 2.0], [58400.0, 1.0], [59600.0, 1.0], [62800.0, 1.0], [64000.0, 2.0], [65600.0, 5.0], [74400.0, 1.0], [79200.0, 2.0], [80800.0, 1.0], [100000.0, 1.0], [104800.0, 2.0], [105600.0, 3.0], [108000.0, 1.0], [112000.0, 1.0], [114400.0, 1.0], [122400.0, 1.0], [134400.0, 1.0], [132100.0, 1.0], [135300.0, 1.0], [140100.0, 1.0], [71900.0, 2.0], [81500.0, 2.0], [91900.0, 1.0], [93500.0, 2.0], [94300.0, 1.0], [95900.0, 1.0], [104700.0, 2.0], [107100.0, 1.0], [110300.0, 3.0], [116700.0, 1.0], [118300.0, 1.0], [127100.0, 1.0], [134600.0, 1.0], [139400.0, 1.0], [34700.0, 1.0], [135500.0, 1.0], [35500.0, 1.0], [35900.0, 7.0], [41500.0, 1.0], [42700.0, 2.0], [43500.0, 1.0], [46700.0, 1.0], [47100.0, 3.0], [54700.0, 1.0], [55100.0, 1.0], [55500.0, 1.0], [60700.0, 1.0], [62700.0, 2.0], [63500.0, 1.0], [63900.0, 1.0], [64300.0, 6.0], [65500.0, 2.0], [70200.0, 1.0], [71800.0, 1.0], [72600.0, 1.0], [79800.0, 1.0], [82200.0, 2.0], [87800.0, 1.0], [94200.0, 1.0], [96600.0, 1.0], [107800.0, 1.0], [116600.0, 1.0], [123800.0, 1.0], [127800.0, 1.0], [131000.0, 1.0], [136400.0, 1.0], [138000.0, 1.0], [139600.0, 3.0], [132500.0, 1.0], [134100.0, 1.0], [69300.0, 3.0], [83700.0, 2.0], [90100.0, 1.0], [96500.0, 1.0], [111700.0, 1.0], [120500.0, 1.0], [123700.0, 1.0], [126100.0, 3.0], [130900.0, 1.0], [135000.0, 1.0], [139800.0, 2.0], [33400.0, 2.0], [137500.0, 1.0], [139100.0, 2.0], [35800.0, 16.0], [36200.0, 1.0], [39000.0, 1.0], [39800.0, 1.0], [41000.0, 2.0], [43000.0, 1.0], [43400.0, 1.0], [44600.0, 1.0], [47000.0, 1.0], [48200.0, 1.0], [49400.0, 1.0], [54600.0, 4.0], [55000.0, 3.0], [59000.0, 1.0], [59400.0, 1.0], [61400.0, 1.0], [63800.0, 1.0], [64200.0, 1.0], [64600.0, 1.0], [79600.0, 1.0], [90000.0, 5.0], [99600.0, 9.0], [102800.0, 1.0], [104400.0, 1.0], [106000.0, 1.0], [106800.0, 1.0], [118000.0, 3.0], [123600.0, 1.0], [125200.0, 1.0], [127600.0, 1.0], [128400.0, 2.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 140100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 236.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 264.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 264.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 236.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 68.64705882352938, "minX": 1.71237648E12, "maxY": 423.4193548387097, "series": [{"data": [[1.71237648E12, 423.4193548387097], [1.71237654E12, 241.17703349282317], [1.7123766E12, 68.64705882352938]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123766E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1922.3333333333333, "minX": 1.0, "maxY": 140118.0, "series": [{"data": [[2.0, 139912.0], [3.0, 139872.0], [4.0, 139878.0], [5.0, 139720.0], [6.0, 139634.0], [8.0, 139616.5], [9.0, 139549.0], [10.0, 139447.0], [11.0, 139190.0], [12.0, 139136.0], [14.0, 138849.0], [15.0, 138423.0], [16.0, 138338.0], [17.0, 138326.0], [18.0, 138178.0], [19.0, 138041.0], [20.0, 137972.0], [21.0, 137789.0], [22.0, 137586.0], [23.0, 137012.0], [25.0, 137012.0], [26.0, 136471.0], [27.0, 135550.0], [28.0, 135493.0], [29.0, 135393.0], [30.0, 135037.0], [31.0, 134640.0], [33.0, 134134.0], [32.0, 134492.0], [35.0, 133139.0], [34.0, 133694.0], [37.0, 132911.0], [36.0, 132951.0], [39.0, 132187.0], [38.0, 132515.0], [41.0, 131783.0], [40.0, 132099.0], [43.0, 130958.0], [42.0, 131021.0], [45.0, 128903.0], [44.0, 129930.0], [47.0, 128410.0], [49.0, 127666.0], [48.0, 127835.0], [50.0, 127584.0], [53.0, 127176.0], [52.0, 127331.0], [55.0, 126153.0], [57.0, 125844.0], [56.0, 126140.5], [59.0, 124117.0], [58.0, 125227.0], [60.0, 124110.0], [63.0, 123799.0], [62.0, 124108.5], [67.0, 122657.0], [66.0, 123301.0], [65.0, 123690.0], [64.0, 123819.0], [71.0, 118019.0], [70.0, 118357.0], [69.0, 120597.0], [68.0, 122495.0], [75.0, 116768.0], [74.0, 117972.0], [73.0, 118034.0], [72.0, 118030.0], [79.0, 114516.0], [78.0, 114510.0], [77.0, 114532.0], [76.0, 116657.0], [83.0, 113198.0], [82.0, 114441.0], [81.0, 114501.0], [80.0, 114510.0], [87.0, 110729.0], [86.0, 111736.0], [85.0, 112095.0], [84.0, 113023.0], [90.0, 110399.0], [89.0, 110688.0], [88.0, 110716.0], [95.0, 107433.0], [94.0, 107828.0], [93.0, 108034.0], [92.0, 110397.5], [98.0, 106018.0], [97.0, 106890.0], [96.0, 107136.0], [103.0, 104795.0], [102.0, 104920.0], [101.0, 105621.0], [100.0, 105673.0], [107.0, 104424.0], [106.0, 104807.0], [105.0, 104796.5], [111.0, 99691.0], [109.0, 100097.0], [108.0, 102899.0], [114.0, 99616.0], [113.0, 99609.0], [112.0, 99614.0], [119.0, 99598.0], [117.0, 99583.0], [116.0, 99599.0], [123.0, 99580.0], [122.0, 99601.0], [120.0, 99611.0], [127.0, 99447.0], [126.0, 99590.33333333333], [135.0, 93546.0], [134.0, 94298.0], [132.0, 95930.0], [131.0, 96532.0], [130.0, 96663.0], [129.0, 97044.0], [128.0, 97073.0], [143.0, 90071.0], [142.0, 90172.0], [141.0, 90619.5], [139.0, 90638.0], [138.0, 90651.0], [137.0, 91938.0], [136.0, 93519.0], [151.0, 89814.0], [150.0, 89803.0], [149.0, 89811.0], [148.0, 89835.0], [147.0, 90084.0], [146.0, 90077.0], [145.0, 90085.0], [144.0, 90085.0], [159.0, 87475.0], [157.0, 87866.0], [156.0, 88371.0], [155.0, 89010.0], [154.0, 89760.0], [153.0, 89777.0], [152.0, 89802.0], [167.0, 80826.0], [166.0, 81525.0], [165.0, 81521.0], [164.0, 82273.0], [162.0, 83716.0], [160.0, 85818.0], [174.0, 79477.5], [172.0, 79484.0], [171.0, 79586.0], [170.0, 79586.0], [169.0, 79665.0], [168.0, 79807.0], [183.0, 70222.0], [182.0, 71583.0], [181.0, 71895.0], [180.0, 71911.5], [178.0, 72679.0], [177.0, 74490.0], [176.0, 79271.5], [191.0, 65630.0], [190.0, 65853.0], [189.0, 65978.0], [188.0, 67577.0], [187.0, 68215.0], [186.0, 69340.0], [185.0, 69339.0], [199.0, 64367.0], [198.0, 64670.0], [197.0, 65570.0], [196.0, 65590.0], [195.0, 65632.5], [194.0, 65623.0], [192.0, 65634.0], [207.0, 64100.0], [205.0, 64253.0], [204.0, 64360.0], [202.0, 64378.0], [201.0, 64360.0], [200.0, 64373.0], [215.0, 61471.0], [214.0, 62707.5], [212.0, 62829.0], [211.0, 63514.0], [210.0, 63816.0], [209.0, 63991.0], [208.0, 64069.0], [223.0, 56154.5], [221.0, 58480.0], [220.0, 59038.0], [219.0, 59427.0], [218.0, 59676.0], [217.0, 60176.0], [216.0, 60759.0], [231.0, 55074.5], [229.0, 55095.0], [228.0, 55102.0], [227.0, 55593.5], [225.0, 55680.0], [224.0, 56135.0], [239.0, 54558.5], [237.0, 54692.666666666664], [235.0, 54680.0], [233.0, 54700.0], [232.0, 54989.0], [246.0, 47778.0], [245.0, 48206.0], [244.0, 49316.0], [243.0, 49401.0], [242.0, 54544.0], [241.0, 54549.0], [240.0, 54541.0], [254.0, 44505.0], [253.0, 44647.0], [252.0, 45667.0], [251.0, 46757.0], [250.0, 47102.5], [248.0, 47103.5], [270.0, 36837.0], [271.0, 36867.0], [269.0, 39043.0], [268.0, 39739.0], [267.0, 39839.0], [266.0, 41090.0], [265.0, 41072.0], [264.0, 41570.0], [263.0, 41616.0], [257.0, 43505.0], [256.0, 44512.0], [259.0, 43017.0], [258.0, 43480.0], [262.0, 42752.0], [260.0, 42991.0], [284.0, 36052.5], [286.0, 36048.0], [287.0, 36066.0], [285.0, 36049.0], [282.0, 36060.0], [281.0, 36061.0], [279.0, 36111.0], [273.0, 36457.0], [272.0, 36866.0], [275.0, 36132.0], [274.0, 36282.0], [278.0, 36112.0], [277.0, 36083.0], [276.0, 36159.0], [301.0, 36036.0], [303.0, 36027.5], [300.0, 36026.5], [290.0, 36039.0], [289.0, 36070.0], [288.0, 36070.0], [298.0, 36011.0], [297.0, 36056.0], [296.0, 36056.0], [295.0, 36057.0], [294.0, 36035.0], [293.0, 36047.0], [292.0, 36057.5], [318.0, 35912.0], [319.0, 35889.0], [317.0, 35910.5], [307.0, 36009.0], [306.0, 36015.0], [305.0, 36025.0], [304.0, 36040.0], [315.0, 35926.0], [314.0, 35932.0], [312.0, 35937.0], [311.0, 36015.0], [310.0, 36013.0], [309.0, 36022.0], [308.0, 36023.0], [333.0, 35872.0], [334.0, 35818.0], [332.0, 35879.0], [323.0, 35895.0], [322.0, 35895.0], [321.0, 35879.0], [320.0, 35878.0], [331.0, 35866.0], [330.0, 35875.0], [329.0, 35895.0], [328.0, 35894.0], [327.0, 35895.0], [326.0, 35886.0], [325.0, 35895.0], [324.0, 35875.0], [339.0, 35641.0], [350.0, 15591.0], [349.0, 15585.0], [337.0, 35642.0], [336.0, 35658.0], [347.0, 15570.0], [346.0, 15906.0], [345.0, 33452.0], [343.0, 33600.0], [342.0, 34764.0], [341.0, 35503.0], [340.0, 35660.0], [366.0, 15558.5], [364.0, 15569.0], [362.0, 15570.0], [361.0, 15586.0], [360.0, 15563.0], [357.0, 15582.0], [355.0, 15575.5], [354.0, 15567.0], [352.0, 15584.5], [382.0, 15553.0], [383.0, 15559.0], [381.0, 15546.0], [380.0, 15538.0], [379.0, 15566.5], [377.0, 15544.0], [376.0, 15577.0], [375.0, 15554.0], [370.0, 15560.0], [368.0, 15585.0], [374.0, 15579.333333333334], [372.0, 15574.0], [397.0, 6517.0], [399.0, 6515.5], [396.0, 6934.0], [387.0, 15548.0], [385.0, 15539.0], [395.0, 10667.0], [394.0, 15561.5], [392.0, 15537.0], [391.0, 15554.5], [390.0, 15555.5], [388.0, 15544.0], [414.0, 6511.5], [413.0, 6495.0], [411.0, 6492.0], [410.0, 6515.0], [409.0, 6524.0], [408.0, 6508.0], [406.0, 6515.0], [403.0, 6507.0], [401.0, 6496.0], [400.0, 6525.0], [430.0, 6511.0], [431.0, 6485.0], [429.0, 6484.0], [428.0, 6496.0], [427.0, 6517.0], [426.0, 6501.0], [424.0, 6518.0], [423.0, 6506.0], [417.0, 6501.0], [421.0, 6486.0], [420.0, 6499.666666666667], [446.0, 6455.0], [447.0, 6294.0], [445.0, 6494.0], [444.0, 6503.0], [443.0, 6503.0], [442.0, 6501.5], [440.0, 6493.0], [439.0, 6500.0], [435.0, 6496.5], [433.0, 6489.0], [437.0, 6500.0], [462.0, 5494.0], [463.0, 5429.0], [461.0, 5665.0], [460.0, 5683.0], [459.0, 5666.0], [458.0, 5656.0], [457.0, 5694.0], [456.0, 5665.0], [455.0, 5701.0], [451.0, 5804.0], [448.0, 5813.0], [454.0, 5782.0], [453.0, 5793.666666666667], [452.0, 5786.0], [478.0, 3061.0], [479.0, 3077.0], [476.0, 3085.0], [467.0, 4560.0], [466.0, 4595.0], [465.0, 4624.0], [464.0, 4797.0], [475.0, 3223.0], [474.0, 3244.0], [473.0, 3529.0], [471.0, 4139.0], [470.0, 4400.0], [469.0, 4514.0], [468.0, 4534.0], [494.0, 2101.0], [495.0, 2113.0], [493.0, 2103.0], [492.0, 2127.0], [490.0, 2120.0], [489.0, 2310.0], [488.0, 2336.0], [486.0, 2329.0], [481.0, 2733.0], [480.0, 2941.0], [485.0, 2336.0], [484.0, 2513.0], [483.0, 2625.0], [482.0, 2610.0], [500.0, 1922.3333333333333], [497.0, 2124.0], [496.0, 2123.0], [1.0, 140118.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}, {"data": [[250.7440000000002, 57977.07399999999]], "isOverall": false, "label": "HTTP Request (Mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1020.3833333333333, "minX": 1.71237648E12, "maxY": 265680.35, "series": [{"data": [[1.71237648E12, 5810.4], [1.71237654E12, 1020.3833333333333], [1.7123766E12, 1243.9166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71237648E12, 72457.45], [1.71237654E12, 265680.35], [1.7123766E12, 155085.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123766E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8471.425806451616, "minX": 1.71237648E12, "maxY": 119178.08088235292, "series": [{"data": [[1.71237648E12, 8471.425806451616], [1.71237654E12, 54867.21052631578], [1.7123766E12, 119178.08088235292]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123766E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1553.2322580645161, "minX": 1.71237648E12, "maxY": 108925.05882352941, "series": [{"data": [[1.71237648E12, 1553.2322580645161], [1.71237654E12, 54867.01913875599], [1.7123766E12, 108925.05882352941]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123766E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1167.5454545454545, "minX": 1.71237648E12, "maxY": 2982.125000000001, "series": [{"data": [[1.71237648E12, 2283.993548387096], [1.71237654E12, 1167.5454545454545], [1.7123766E12, 2982.125000000001]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123766E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33458.0, "minX": 1.71237654E12, "maxY": 140118.0, "series": [{"data": [[1.71237654E12, 91938.0], [1.7123766E12, 140118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71237654E12, 33458.0], [1.7123766E12, 93519.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71237654E12, 89782.0], [1.7123766E12, 139146.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71237654E12, 91320.24000000002], [1.7123766E12, 140080.92]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71237654E12, 60176.0], [1.7123766E12, 124117.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71237654E12, 90085.0], [1.7123766E12, 139642.6]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123766E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3061.0, "minX": 1.0, "maxY": 139677.0, "series": [{"data": [[2.0, 79271.5], [8.0, 138109.5], [9.0, 65627.0], [10.0, 139677.0], [3.0, 110397.0], [13.0, 64375.5], [15.0, 54683.0], [1.0, 89010.0], [4.0, 94314.0], [68.0, 35894.0], [19.0, 99690.0], [5.0, 114510.0], [6.0, 56135.0], [7.0, 101748.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 75757.0], [9.0, 65634.0], [11.0, 3061.0], [49.0, 15566.0], [3.0, 33446.0], [51.0, 6503.0], [13.0, 89823.0], [15.0, 55045.5], [16.0, 3915.0], [4.0, 36867.0], [1.0, 61471.0], [68.0, 36039.0], [19.0, 99597.5], [5.0, 80644.5], [6.0, 55583.0], [7.0, 4595.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 139676.5, "series": [{"data": [[2.0, 79271.5], [8.0, 138109.5], [9.0, 65627.0], [10.0, 139676.5], [3.0, 110397.0], [13.0, 64375.5], [15.0, 54683.0], [1.0, 89010.0], [4.0, 94314.0], [68.0, 35894.0], [19.0, 99690.0], [5.0, 114510.0], [6.0, 56135.0], [7.0, 101748.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 75757.0], [9.0, 65634.0], [11.0, 3060.0], [49.0, 0.0], [3.0, 33446.0], [51.0, 0.0], [13.0, 89822.5], [15.0, 55045.5], [16.0, 3914.5], [4.0, 36867.0], [1.0, 61471.0], [68.0, 36039.0], [19.0, 0.0], [5.0, 80644.0], [6.0, 55583.0], [7.0, 4595.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.71237648E12, "maxY": 8.333333333333334, "series": [{"data": [[1.71237648E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71237648E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.71237648E12, "maxY": 2.45, "series": [{"data": [[1.71237654E12, 2.45], [1.7123766E12, 1.95]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71237648E12, 0.95], [1.71237654E12, 1.0333333333333334], [1.7123766E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71237648E12, 1.6333333333333333], [1.7123766E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123766E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.71237648E12, "maxY": 2.5833333333333335, "series": [{"data": [[1.71237654E12, 2.45], [1.7123766E12, 1.95]], "isOverall": false, "label": "HTTP Request (Mid image)-success", "isController": false}, {"data": [[1.71237648E12, 2.5833333333333335], [1.71237654E12, 1.0333333333333334], [1.7123766E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request (Mid image)-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123766E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.71237648E12, "maxY": 2.5833333333333335, "series": [{"data": [[1.71237654E12, 2.45], [1.7123766E12, 1.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71237648E12, 2.5833333333333335], [1.71237654E12, 1.0333333333333334], [1.7123766E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123766E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

