/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 574.0, "minX": 0.0, "maxY": 64332.0, "series": [{"data": [[0.0, 574.0], [0.1, 619.0], [0.2, 620.0], [0.3, 620.0], [0.4, 625.0], [0.5, 626.0], [0.6, 632.0], [0.7, 650.0], [0.8, 723.0], [0.9, 737.0], [1.0, 772.0], [1.1, 848.0], [1.2, 891.0], [1.3, 1043.0], [1.4, 1043.0], [1.5, 1166.0], [1.6, 1223.0], [1.7, 1227.0], [1.8, 1306.0], [1.9, 1321.0], [2.0, 1321.0], [2.1, 1332.0], [2.2, 1334.0], [2.3, 1438.0], [2.4, 1451.0], [2.5, 1451.0], [2.6, 1451.0], [2.7, 1464.0], [2.8, 1486.0], [2.9, 1508.0], [3.0, 1560.0], [3.1, 1573.0], [3.2, 1574.0], [3.3, 1576.0], [3.4, 1576.0], [3.5, 1576.0], [3.6, 1577.0], [3.7, 1587.0], [3.8, 1589.0], [3.9, 1590.0], [4.0, 1590.0], [4.1, 1604.0], [4.2, 1607.0], [4.3, 1620.0], [4.4, 1620.0], [4.5, 1620.0], [4.6, 1621.0], [4.7, 1621.0], [4.8, 1634.0], [4.9, 1634.0], [5.0, 1635.0], [5.1, 1650.0], [5.2, 1679.0], [5.3, 1693.0], [5.4, 1694.0], [5.5, 1694.0], [5.6, 1732.0], [5.7, 1840.0], [5.8, 1845.0], [5.9, 3463.0], [6.0, 3815.0], [6.1, 4629.0], [6.2, 5550.0], [6.3, 6480.0], [6.4, 6608.0], [6.5, 7211.0], [6.6, 7639.0], [6.7, 7857.0], [6.8, 7880.0], [6.9, 7997.0], [7.0, 8024.0], [7.1, 8061.0], [7.2, 8133.0], [7.3, 8529.0], [7.4, 8580.0], [7.5, 8969.0], [7.6, 9166.0], [7.7, 9519.0], [7.8, 9622.0], [7.9, 9640.0], [8.0, 9697.0], [8.1, 9697.0], [8.2, 9697.0], [8.3, 9705.0], [8.4, 9734.0], [8.5, 9796.0], [8.6, 9807.0], [8.7, 9821.0], [8.8, 9863.0], [8.9, 9869.0], [9.0, 9880.0], [9.1, 10007.0], [9.2, 10017.0], [9.3, 10038.0], [9.4, 10058.0], [9.5, 10159.0], [9.6, 10403.0], [9.7, 10434.0], [9.8, 10846.0], [9.9, 10852.0], [10.0, 10857.0], [10.1, 11160.0], [10.2, 11517.0], [10.3, 11635.0], [10.4, 11824.0], [10.5, 11831.0], [10.6, 11898.0], [10.7, 12001.0], [10.8, 12282.0], [10.9, 12351.0], [11.0, 12380.0], [11.1, 12414.0], [11.2, 12420.0], [11.3, 12497.0], [11.4, 12571.0], [11.5, 12604.0], [11.6, 12714.0], [11.7, 12924.0], [11.8, 13056.0], [11.9, 13259.0], [12.0, 13409.0], [12.1, 13585.0], [12.2, 13599.0], [12.3, 13630.0], [12.4, 13693.0], [12.5, 13716.0], [12.6, 13842.0], [12.7, 14015.0], [12.8, 14291.0], [12.9, 14309.0], [13.0, 14309.0], [13.1, 14370.0], [13.2, 14410.0], [13.3, 14480.0], [13.4, 14534.0], [13.5, 14538.0], [13.6, 14719.0], [13.7, 14734.0], [13.8, 14837.0], [13.9, 14870.0], [14.0, 14924.0], [14.1, 14935.0], [14.2, 14977.0], [14.3, 14984.0], [14.4, 14986.0], [14.5, 14988.0], [14.6, 15006.0], [14.7, 15026.0], [14.8, 15026.0], [14.9, 15033.0], [15.0, 15150.0], [15.1, 15183.0], [15.2, 15183.0], [15.3, 15203.0], [15.4, 15345.0], [15.5, 15457.0], [15.6, 15555.0], [15.7, 15769.0], [15.8, 15965.0], [15.9, 16455.0], [16.0, 16541.0], [16.1, 16947.0], [16.2, 16963.0], [16.3, 17091.0], [16.4, 17118.0], [16.5, 17192.0], [16.6, 17407.0], [16.7, 17482.0], [16.8, 17630.0], [16.9, 19134.0], [17.0, 19181.0], [17.1, 19588.0], [17.2, 19598.0], [17.3, 20718.0], [17.4, 20829.0], [17.5, 20831.0], [17.6, 21499.0], [17.7, 22137.0], [17.8, 22488.0], [17.9, 23018.0], [18.0, 24266.0], [18.1, 24280.0], [18.2, 24280.0], [18.3, 24457.0], [18.4, 25017.0], [18.5, 25067.0], [18.6, 25251.0], [18.7, 25345.0], [18.8, 25365.0], [18.9, 25527.0], [19.0, 25879.0], [19.1, 26327.0], [19.2, 26327.0], [19.3, 26379.0], [19.4, 27340.0], [19.5, 28427.0], [19.6, 28962.0], [19.7, 29106.0], [19.8, 29489.0], [19.9, 29747.0], [20.0, 30639.0], [20.1, 30661.0], [20.2, 31324.0], [20.3, 31557.0], [20.4, 31647.0], [20.5, 31680.0], [20.6, 31681.0], [20.7, 32593.0], [20.8, 32609.0], [20.9, 32611.0], [21.0, 32705.0], [21.1, 32724.0], [21.2, 33788.0], [21.3, 33804.0], [21.4, 33821.0], [21.5, 33823.0], [21.6, 33824.0], [21.7, 33835.0], [21.8, 34604.0], [21.9, 34604.0], [22.0, 34674.0], [22.1, 36146.0], [22.2, 36200.0], [22.3, 36316.0], [22.4, 36482.0], [22.5, 36532.0], [22.6, 36725.0], [22.7, 36882.0], [22.8, 36908.0], [22.9, 36974.0], [23.0, 37030.0], [23.1, 37532.0], [23.2, 37810.0], [23.3, 37841.0], [23.4, 38184.0], [23.5, 38248.0], [23.6, 38312.0], [23.7, 38417.0], [23.8, 38490.0], [23.9, 38612.0], [24.0, 38657.0], [24.1, 38662.0], [24.2, 38890.0], [24.3, 38914.0], [24.4, 38927.0], [24.5, 38953.0], [24.6, 39128.0], [24.7, 39158.0], [24.8, 39188.0], [24.9, 39375.0], [25.0, 39388.0], [25.1, 39510.0], [25.2, 39510.0], [25.3, 39709.0], [25.4, 39849.0], [25.5, 39931.0], [25.6, 40105.0], [25.7, 40106.0], [25.8, 40111.0], [25.9, 40124.0], [26.0, 40124.0], [26.1, 40178.0], [26.2, 40232.0], [26.3, 40241.0], [26.4, 40248.0], [26.5, 40573.0], [26.6, 40647.0], [26.7, 40912.0], [26.8, 40969.0], [26.9, 40984.0], [27.0, 41208.0], [27.1, 41286.0], [27.2, 41319.0], [27.3, 41461.0], [27.4, 41526.0], [27.5, 41528.0], [27.6, 41592.0], [27.7, 41618.0], [27.8, 41646.0], [27.9, 41805.0], [28.0, 41806.0], [28.1, 41880.0], [28.2, 42023.0], [28.3, 42141.0], [28.4, 42166.0], [28.5, 42260.0], [28.6, 42349.0], [28.7, 42404.0], [28.8, 42416.0], [28.9, 42429.0], [29.0, 42430.0], [29.1, 42444.0], [29.2, 42462.0], [29.3, 42499.0], [29.4, 42528.0], [29.5, 42529.0], [29.6, 42611.0], [29.7, 42613.0], [29.8, 42645.0], [29.9, 42646.0], [30.0, 42747.0], [30.1, 42761.0], [30.2, 42777.0], [30.3, 42849.0], [30.4, 42858.0], [30.5, 43004.0], [30.6, 43072.0], [30.7, 43084.0], [30.8, 43123.0], [30.9, 43133.0], [31.0, 43264.0], [31.1, 43296.0], [31.2, 43349.0], [31.3, 43416.0], [31.4, 43442.0], [31.5, 43499.0], [31.6, 43598.0], [31.7, 43612.0], [31.8, 43621.0], [31.9, 43636.0], [32.0, 43662.0], [32.1, 43669.0], [32.2, 43779.0], [32.3, 43852.0], [32.4, 43881.0], [32.5, 43912.0], [32.6, 43914.0], [32.7, 43932.0], [32.8, 44002.0], [32.9, 44019.0], [33.0, 44081.0], [33.1, 44092.0], [33.2, 44093.0], [33.3, 44095.0], [33.4, 44103.0], [33.5, 44139.0], [33.6, 44151.0], [33.7, 44152.0], [33.8, 44153.0], [33.9, 44303.0], [34.0, 44316.0], [34.1, 44326.0], [34.2, 44328.0], [34.3, 44338.0], [34.4, 44340.0], [34.5, 44347.0], [34.6, 44448.0], [34.7, 44452.0], [34.8, 44454.0], [34.9, 44457.0], [35.0, 44462.0], [35.1, 44527.0], [35.2, 44557.0], [35.3, 44571.0], [35.4, 44583.0], [35.5, 44589.0], [35.6, 44590.0], [35.7, 44634.0], [35.8, 44644.0], [35.9, 44644.0], [36.0, 44671.0], [36.1, 44723.0], [36.2, 44745.0], [36.3, 44797.0], [36.4, 44913.0], [36.5, 44921.0], [36.6, 45001.0], [36.7, 45004.0], [36.8, 45006.0], [36.9, 45018.0], [37.0, 45031.0], [37.1, 45042.0], [37.2, 45062.0], [37.3, 45097.0], [37.4, 45110.0], [37.5, 45127.0], [37.6, 45132.0], [37.7, 45132.0], [37.8, 45142.0], [37.9, 45167.0], [38.0, 45167.0], [38.1, 45168.0], [38.2, 45183.0], [38.3, 45202.0], [38.4, 45230.0], [38.5, 45249.0], [38.6, 45261.0], [38.7, 45302.0], [38.8, 45317.0], [38.9, 45325.0], [39.0, 45353.0], [39.1, 45362.0], [39.2, 45366.0], [39.3, 45382.0], [39.4, 45385.0], [39.5, 45395.0], [39.6, 45431.0], [39.7, 45449.0], [39.8, 45449.0], [39.9, 45464.0], [40.0, 45471.0], [40.1, 45516.0], [40.2, 45561.0], [40.3, 45561.0], [40.4, 45608.0], [40.5, 45609.0], [40.6, 45622.0], [40.7, 45622.0], [40.8, 45650.0], [40.9, 45666.0], [41.0, 45670.0], [41.1, 45671.0], [41.2, 45721.0], [41.3, 45748.0], [41.4, 45765.0], [41.5, 45878.0], [41.6, 45969.0], [41.7, 45971.0], [41.8, 45993.0], [41.9, 46007.0], [42.0, 46009.0], [42.1, 46062.0], [42.2, 46084.0], [42.3, 46090.0], [42.4, 46095.0], [42.5, 46101.0], [42.6, 46135.0], [42.7, 46146.0], [42.8, 46151.0], [42.9, 46166.0], [43.0, 46192.0], [43.1, 46255.0], [43.2, 46268.0], [43.3, 46276.0], [43.4, 46288.0], [43.5, 46302.0], [43.6, 46304.0], [43.7, 46315.0], [43.8, 46319.0], [43.9, 46350.0], [44.0, 46426.0], [44.1, 46450.0], [44.2, 46450.0], [44.3, 46459.0], [44.4, 46485.0], [44.5, 46517.0], [44.6, 46554.0], [44.7, 46585.0], [44.8, 46588.0], [44.9, 46590.0], [45.0, 46594.0], [45.1, 46649.0], [45.2, 46663.0], [45.3, 46673.0], [45.4, 46694.0], [45.5, 46720.0], [45.6, 46725.0], [45.7, 46759.0], [45.8, 46796.0], [45.9, 46797.0], [46.0, 46816.0], [46.1, 46830.0], [46.2, 46861.0], [46.3, 46875.0], [46.4, 46882.0], [46.5, 46895.0], [46.6, 47032.0], [46.7, 47051.0], [46.8, 47067.0], [46.9, 47073.0], [47.0, 47074.0], [47.1, 47080.0], [47.2, 47109.0], [47.3, 47116.0], [47.4, 47121.0], [47.5, 47137.0], [47.6, 47143.0], [47.7, 47162.0], [47.8, 47174.0], [47.9, 47181.0], [48.0, 47194.0], [48.1, 47199.0], [48.2, 47214.0], [48.3, 47216.0], [48.4, 47216.0], [48.5, 47224.0], [48.6, 47232.0], [48.7, 47240.0], [48.8, 47261.0], [48.9, 47263.0], [49.0, 47271.0], [49.1, 47306.0], [49.2, 47315.0], [49.3, 47319.0], [49.4, 47329.0], [49.5, 47329.0], [49.6, 47332.0], [49.7, 47332.0], [49.8, 47346.0], [49.9, 47346.0], [50.0, 47361.0], [50.1, 47361.0], [50.2, 47372.0], [50.3, 47390.0], [50.4, 47402.0], [50.5, 47449.0], [50.6, 47510.0], [50.7, 47511.0], [50.8, 47514.0], [50.9, 47563.0], [51.0, 47573.0], [51.1, 47583.0], [51.2, 47586.0], [51.3, 47609.0], [51.4, 47649.0], [51.5, 47723.0], [51.6, 47726.0], [51.7, 47733.0], [51.8, 47742.0], [51.9, 47749.0], [52.0, 47750.0], [52.1, 47753.0], [52.2, 47753.0], [52.3, 47762.0], [52.4, 47773.0], [52.5, 47774.0], [52.6, 47800.0], [52.7, 47815.0], [52.8, 47815.0], [52.9, 47841.0], [53.0, 47859.0], [53.1, 47860.0], [53.2, 47874.0], [53.3, 47879.0], [53.4, 47883.0], [53.5, 47887.0], [53.6, 47891.0], [53.7, 47893.0], [53.8, 47894.0], [53.9, 47895.0], [54.0, 47898.0], [54.1, 47918.0], [54.2, 47918.0], [54.3, 47920.0], [54.4, 47933.0], [54.5, 47939.0], [54.6, 47951.0], [54.7, 47956.0], [54.8, 47956.0], [54.9, 47957.0], [55.0, 47961.0], [55.1, 47970.0], [55.2, 47978.0], [55.3, 47995.0], [55.4, 48004.0], [55.5, 48004.0], [55.6, 48021.0], [55.7, 48053.0], [55.8, 48056.0], [55.9, 48069.0], [56.0, 48103.0], [56.1, 48107.0], [56.2, 48112.0], [56.3, 48119.0], [56.4, 48120.0], [56.5, 48147.0], [56.6, 48147.0], [56.7, 48184.0], [56.8, 48190.0], [56.9, 48203.0], [57.0, 48216.0], [57.1, 48222.0], [57.2, 48242.0], [57.3, 48249.0], [57.4, 48257.0], [57.5, 48261.0], [57.6, 48280.0], [57.7, 48282.0], [57.8, 48286.0], [57.9, 48289.0], [58.0, 48291.0], [58.1, 48294.0], [58.2, 48296.0], [58.3, 48302.0], [58.4, 48306.0], [58.5, 48309.0], [58.6, 48318.0], [58.7, 48329.0], [58.8, 48418.0], [58.9, 48429.0], [59.0, 48433.0], [59.1, 48445.0], [59.2, 48463.0], [59.3, 48471.0], [59.4, 48476.0], [59.5, 48518.0], [59.6, 48532.0], [59.7, 48539.0], [59.8, 48539.0], [59.9, 48575.0], [60.0, 48581.0], [60.1, 48593.0], [60.2, 48609.0], [60.3, 48622.0], [60.4, 48638.0], [60.5, 48657.0], [60.6, 48658.0], [60.7, 48666.0], [60.8, 48685.0], [60.9, 48747.0], [61.0, 48768.0], [61.1, 48780.0], [61.2, 48793.0], [61.3, 48797.0], [61.4, 48802.0], [61.5, 48804.0], [61.6, 48804.0], [61.7, 48820.0], [61.8, 48823.0], [61.9, 48850.0], [62.0, 48855.0], [62.1, 48856.0], [62.2, 48863.0], [62.3, 48902.0], [62.4, 48919.0], [62.5, 48919.0], [62.6, 48920.0], [62.7, 48969.0], [62.8, 48974.0], [62.9, 48990.0], [63.0, 49005.0], [63.1, 49006.0], [63.2, 49014.0], [63.3, 49041.0], [63.4, 49078.0], [63.5, 49116.0], [63.6, 49118.0], [63.7, 49138.0], [63.8, 49140.0], [63.9, 49151.0], [64.0, 49166.0], [64.1, 49173.0], [64.2, 49179.0], [64.3, 49179.0], [64.4, 49191.0], [64.5, 49210.0], [64.6, 49227.0], [64.7, 49302.0], [64.8, 49316.0], [64.9, 49336.0], [65.0, 49353.0], [65.1, 49382.0], [65.2, 49400.0], [65.3, 49411.0], [65.4, 49439.0], [65.5, 49447.0], [65.6, 49476.0], [65.7, 49519.0], [65.8, 49527.0], [65.9, 49559.0], [66.0, 49586.0], [66.1, 49615.0], [66.2, 49616.0], [66.3, 49621.0], [66.4, 49634.0], [66.5, 49648.0], [66.6, 49665.0], [66.7, 49688.0], [66.8, 49694.0], [66.9, 49731.0], [67.0, 49732.0], [67.1, 49742.0], [67.2, 49748.0], [67.3, 49760.0], [67.4, 49772.0], [67.5, 49781.0], [67.6, 49806.0], [67.7, 49838.0], [67.8, 49840.0], [67.9, 49871.0], [68.0, 49873.0], [68.1, 49880.0], [68.2, 49908.0], [68.3, 49911.0], [68.4, 49931.0], [68.5, 49933.0], [68.6, 49940.0], [68.7, 49942.0], [68.8, 49943.0], [68.9, 49943.0], [69.0, 49948.0], [69.1, 49948.0], [69.2, 49951.0], [69.3, 49955.0], [69.4, 49955.0], [69.5, 49956.0], [69.6, 49972.0], [69.7, 49990.0], [69.8, 49995.0], [69.9, 50036.0], [70.0, 50047.0], [70.1, 50049.0], [70.2, 50068.0], [70.3, 50070.0], [70.4, 50083.0], [70.5, 50093.0], [70.6, 50096.0], [70.7, 50098.0], [70.8, 50108.0], [70.9, 50109.0], [71.0, 50117.0], [71.1, 50126.0], [71.2, 50130.0], [71.3, 50143.0], [71.4, 50144.0], [71.5, 50157.0], [71.6, 50161.0], [71.7, 50173.0], [71.8, 50174.0], [71.9, 50175.0], [72.0, 50210.0], [72.1, 50246.0], [72.2, 50252.0], [72.3, 50271.0], [72.4, 50282.0], [72.5, 50284.0], [72.6, 50306.0], [72.7, 50322.0], [72.8, 50355.0], [72.9, 50421.0], [73.0, 50421.0], [73.1, 50432.0], [73.2, 50460.0], [73.3, 50469.0], [73.4, 50470.0], [73.5, 50470.0], [73.6, 50471.0], [73.7, 50472.0], [73.8, 50473.0], [73.9, 50478.0], [74.0, 50491.0], [74.1, 50492.0], [74.2, 50499.0], [74.3, 50516.0], [74.4, 50517.0], [74.5, 50519.0], [74.6, 50554.0], [74.7, 50589.0], [74.8, 50618.0], [74.9, 50623.0], [75.0, 50626.0], [75.1, 50627.0], [75.2, 50636.0], [75.3, 50687.0], [75.4, 50697.0], [75.5, 50698.0], [75.6, 50698.0], [75.7, 50698.0], [75.8, 50698.0], [75.9, 50715.0], [76.0, 50724.0], [76.1, 50728.0], [76.2, 50741.0], [76.3, 50753.0], [76.4, 50765.0], [76.5, 50799.0], [76.6, 50807.0], [76.7, 50834.0], [76.8, 50844.0], [76.9, 50872.0], [77.0, 50897.0], [77.1, 50912.0], [77.2, 50915.0], [77.3, 50920.0], [77.4, 50923.0], [77.5, 50941.0], [77.6, 50963.0], [77.7, 50970.0], [77.8, 50982.0], [77.9, 50992.0], [78.0, 51011.0], [78.1, 51030.0], [78.2, 51069.0], [78.3, 51070.0], [78.4, 51088.0], [78.5, 51089.0], [78.6, 51101.0], [78.7, 51101.0], [78.8, 51108.0], [78.9, 51113.0], [79.0, 51128.0], [79.1, 51131.0], [79.2, 51132.0], [79.3, 51134.0], [79.4, 51161.0], [79.5, 51167.0], [79.6, 51182.0], [79.7, 51193.0], [79.8, 51208.0], [79.9, 51209.0], [80.0, 51227.0], [80.1, 51304.0], [80.2, 51310.0], [80.3, 51323.0], [80.4, 51325.0], [80.5, 51343.0], [80.6, 51344.0], [80.7, 51345.0], [80.8, 51345.0], [80.9, 51346.0], [81.0, 51346.0], [81.1, 51350.0], [81.2, 51378.0], [81.3, 51420.0], [81.4, 51421.0], [81.5, 51455.0], [81.6, 51467.0], [81.7, 51487.0], [81.8, 51489.0], [81.9, 51492.0], [82.0, 51521.0], [82.1, 51527.0], [82.2, 51548.0], [82.3, 51565.0], [82.4, 51570.0], [82.5, 51579.0], [82.6, 51628.0], [82.7, 51677.0], [82.8, 51678.0], [82.9, 51679.0], [83.0, 51699.0], [83.1, 51703.0], [83.2, 51730.0], [83.3, 51749.0], [83.4, 51777.0], [83.5, 51798.0], [83.6, 51806.0], [83.7, 51828.0], [83.8, 51830.0], [83.9, 51865.0], [84.0, 51922.0], [84.1, 51967.0], [84.2, 51978.0], [84.3, 51987.0], [84.4, 51990.0], [84.5, 51998.0], [84.6, 51999.0], [84.7, 52016.0], [84.8, 52046.0], [84.9, 52129.0], [85.0, 52137.0], [85.1, 52169.0], [85.2, 52183.0], [85.3, 52188.0], [85.4, 52193.0], [85.5, 52218.0], [85.6, 52227.0], [85.7, 52228.0], [85.8, 52244.0], [85.9, 52244.0], [86.0, 52288.0], [86.1, 52293.0], [86.2, 52306.0], [86.3, 52307.0], [86.4, 52321.0], [86.5, 52321.0], [86.6, 52326.0], [86.7, 52363.0], [86.8, 52365.0], [86.9, 52435.0], [87.0, 52438.0], [87.1, 52448.0], [87.2, 52510.0], [87.3, 52514.0], [87.4, 52549.0], [87.5, 52556.0], [87.6, 52609.0], [87.7, 52616.0], [87.8, 52644.0], [87.9, 52646.0], [88.0, 52646.0], [88.1, 52670.0], [88.2, 52670.0], [88.3, 52673.0], [88.4, 52689.0], [88.5, 52785.0], [88.6, 52796.0], [88.7, 52838.0], [88.8, 52888.0], [88.9, 52902.0], [89.0, 52919.0], [89.1, 52957.0], [89.2, 52974.0], [89.3, 52996.0], [89.4, 53120.0], [89.5, 53191.0], [89.6, 53202.0], [89.7, 53236.0], [89.8, 53242.0], [89.9, 53294.0], [90.0, 53361.0], [90.1, 53387.0], [90.2, 53387.0], [90.3, 53389.0], [90.4, 53400.0], [90.5, 53414.0], [90.6, 53422.0], [90.7, 53436.0], [90.8, 53448.0], [90.9, 53472.0], [91.0, 53515.0], [91.1, 53515.0], [91.2, 53529.0], [91.3, 53533.0], [91.4, 53608.0], [91.5, 53615.0], [91.6, 53637.0], [91.7, 53714.0], [91.8, 53850.0], [91.9, 53895.0], [92.0, 53908.0], [92.1, 53910.0], [92.2, 53925.0], [92.3, 53929.0], [92.4, 54057.0], [92.5, 54210.0], [92.6, 54241.0], [92.7, 54301.0], [92.8, 54409.0], [92.9, 54443.0], [93.0, 54496.0], [93.1, 54506.0], [93.2, 54511.0], [93.3, 54531.0], [93.4, 54564.0], [93.5, 54565.0], [93.6, 54570.0], [93.7, 54572.0], [93.8, 54576.0], [93.9, 54588.0], [94.0, 54601.0], [94.1, 54613.0], [94.2, 54659.0], [94.3, 54758.0], [94.4, 54805.0], [94.5, 54963.0], [94.6, 55041.0], [94.7, 55053.0], [94.8, 55333.0], [94.9, 55416.0], [95.0, 55425.0], [95.1, 55496.0], [95.2, 55572.0], [95.3, 55612.0], [95.4, 55768.0], [95.5, 55935.0], [95.6, 55989.0], [95.7, 56329.0], [95.8, 56381.0], [95.9, 56564.0], [96.0, 56580.0], [96.1, 56606.0], [96.2, 56620.0], [96.3, 56620.0], [96.4, 56660.0], [96.5, 56684.0], [96.6, 56855.0], [96.7, 56899.0], [96.8, 57126.0], [96.9, 57324.0], [97.0, 57349.0], [97.1, 57432.0], [97.2, 58370.0], [97.3, 59315.0], [97.4, 59334.0], [97.5, 59346.0], [97.6, 59348.0], [97.7, 59360.0], [97.8, 59362.0], [97.9, 59362.0], [98.0, 59376.0], [98.1, 59376.0], [98.2, 59393.0], [98.3, 59541.0], [98.4, 59785.0], [98.5, 60199.0], [98.6, 60334.0], [98.7, 60334.0], [98.8, 60650.0], [98.9, 60780.0], [99.0, 60916.0], [99.1, 61038.0], [99.2, 62517.0], [99.3, 62618.0], [99.4, 62675.0], [99.5, 63411.0], [99.6, 63806.0], [99.7, 64182.0], [99.8, 64183.0], [99.9, 64332.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 17.0, "series": [{"data": [[33700.0, 1.0], [36100.0, 1.0], [36500.0, 1.0], [38900.0, 3.0], [36900.0, 2.0], [38100.0, 1.0], [39300.0, 2.0], [40100.0, 6.0], [40500.0, 1.0], [40900.0, 3.0], [39700.0, 1.0], [42500.0, 2.0], [42100.0, 2.0], [41300.0, 1.0], [44900.0, 2.0], [43700.0, 1.0], [44100.0, 5.0], [44500.0, 6.0], [43300.0, 1.0], [46100.0, 6.0], [46500.0, 6.0], [45300.0, 9.0], [45700.0, 3.0], [47300.0, 13.0], [47700.0, 11.0], [48500.0, 7.0], [48100.0, 9.0], [48900.0, 7.0], [50100.0, 12.0], [49300.0, 5.0], [50500.0, 5.0], [49700.0, 7.0], [50900.0, 9.0], [52100.0, 6.0], [52500.0, 4.0], [51300.0, 12.0], [52900.0, 5.0], [51700.0, 5.0], [53700.0, 1.0], [54500.0, 9.0], [53300.0, 4.0], [54900.0, 1.0], [55700.0, 1.0], [55300.0, 1.0], [57300.0, 2.0], [56500.0, 2.0], [59300.0, 10.0], [60100.0, 1.0], [60900.0, 1.0], [59700.0, 1.0], [62500.0, 1.0], [64100.0, 2.0], [500.0, 1.0], [600.0, 7.0], [700.0, 3.0], [800.0, 2.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 2.0], [1300.0, 5.0], [1400.0, 6.0], [1500.0, 12.0], [1600.0, 16.0], [1700.0, 1.0], [1800.0, 2.0], [3400.0, 1.0], [3800.0, 1.0], [4600.0, 1.0], [5500.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [7200.0, 1.0], [7600.0, 1.0], [7900.0, 1.0], [7800.0, 2.0], [8000.0, 2.0], [8100.0, 1.0], [8500.0, 2.0], [9100.0, 1.0], [8900.0, 1.0], [9600.0, 5.0], [9700.0, 3.0], [9500.0, 1.0], [10000.0, 4.0], [9800.0, 5.0], [10100.0, 1.0], [10400.0, 2.0], [11100.0, 1.0], [10800.0, 3.0], [11500.0, 1.0], [11600.0, 1.0], [11800.0, 3.0], [12000.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12500.0, 1.0], [12300.0, 2.0], [12700.0, 1.0], [12600.0, 1.0], [13000.0, 1.0], [12900.0, 1.0], [13200.0, 1.0], [13400.0, 1.0], [13600.0, 2.0], [13700.0, 1.0], [13800.0, 1.0], [13500.0, 2.0], [14200.0, 1.0], [14300.0, 3.0], [14000.0, 1.0], [14500.0, 2.0], [14700.0, 2.0], [14400.0, 2.0], [14800.0, 2.0], [15300.0, 1.0], [15000.0, 4.0], [14900.0, 6.0], [15100.0, 3.0], [15200.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [16400.0, 1.0], [17000.0, 1.0], [17400.0, 2.0], [17600.0, 1.0], [20800.0, 2.0], [21400.0, 1.0], [22400.0, 1.0], [23000.0, 1.0], [24200.0, 3.0], [24400.0, 1.0], [25000.0, 2.0], [25200.0, 1.0], [25800.0, 1.0], [28400.0, 1.0], [29400.0, 1.0], [30600.0, 2.0], [31600.0, 3.0], [32600.0, 2.0], [36400.0, 1.0], [36800.0, 1.0], [38400.0, 2.0], [38800.0, 1.0], [41200.0, 2.0], [42000.0, 1.0], [41600.0, 2.0], [42400.0, 7.0], [42800.0, 2.0], [44000.0, 6.0], [44400.0, 5.0], [43200.0, 2.0], [43600.0, 5.0], [46000.0, 6.0], [45200.0, 4.0], [45600.0, 8.0], [46400.0, 5.0], [46800.0, 6.0], [47200.0, 9.0], [48400.0, 7.0], [48000.0, 6.0], [48800.0, 9.0], [47600.0, 2.0], [50000.0, 9.0], [50400.0, 14.0], [49600.0, 8.0], [50800.0, 6.0], [49200.0, 2.0], [51600.0, 5.0], [52000.0, 2.0], [52800.0, 2.0], [53200.0, 4.0], [51200.0, 3.0], [52400.0, 3.0], [53600.0, 3.0], [54800.0, 1.0], [54400.0, 3.0], [54000.0, 1.0], [56800.0, 2.0], [55600.0, 1.0], [36300.0, 1.0], [36700.0, 1.0], [38300.0, 1.0], [37500.0, 1.0], [39500.0, 2.0], [39100.0, 3.0], [39900.0, 1.0], [41500.0, 3.0], [42700.0, 3.0], [42300.0, 1.0], [44300.0, 7.0], [44700.0, 3.0], [43900.0, 3.0], [43100.0, 2.0], [43500.0, 1.0], [45100.0, 9.0], [47100.0, 10.0], [45900.0, 3.0], [46700.0, 5.0], [45500.0, 3.0], [46300.0, 5.0], [47500.0, 7.0], [47900.0, 13.0], [49100.0, 10.0], [48700.0, 5.0], [48300.0, 5.0], [50700.0, 7.0], [49900.0, 17.0], [51100.0, 12.0], [49500.0, 4.0], [50300.0, 3.0], [51500.0, 6.0], [52300.0, 7.0], [51900.0, 7.0], [53100.0, 2.0], [52700.0, 2.0], [53900.0, 4.0], [53500.0, 4.0], [54700.0, 1.0], [54300.0, 1.0], [55900.0, 2.0], [55500.0, 1.0], [57100.0, 1.0], [56300.0, 2.0], [58300.0, 1.0], [59500.0, 1.0], [60700.0, 1.0], [60300.0, 2.0], [64300.0, 1.0], [16900.0, 2.0], [16500.0, 1.0], [17100.0, 2.0], [19100.0, 2.0], [19500.0, 2.0], [20700.0, 1.0], [22100.0, 1.0], [25300.0, 2.0], [25500.0, 1.0], [26300.0, 2.0], [27300.0, 1.0], [28900.0, 1.0], [29100.0, 1.0], [29700.0, 1.0], [31500.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [32700.0, 2.0], [33800.0, 5.0], [34600.0, 3.0], [36200.0, 1.0], [37800.0, 2.0], [38600.0, 3.0], [37000.0, 1.0], [38200.0, 1.0], [40200.0, 3.0], [39800.0, 1.0], [40600.0, 1.0], [42600.0, 4.0], [41400.0, 1.0], [41800.0, 3.0], [42200.0, 1.0], [43000.0, 3.0], [45000.0, 8.0], [43400.0, 3.0], [44600.0, 4.0], [43800.0, 2.0], [45400.0, 5.0], [47000.0, 6.0], [46200.0, 4.0], [46600.0, 4.0], [45800.0, 1.0], [48200.0, 14.0], [47800.0, 15.0], [48600.0, 7.0], [49000.0, 5.0], [47400.0, 2.0], [51000.0, 6.0], [49400.0, 5.0], [49800.0, 6.0], [50600.0, 11.0], [50200.0, 6.0], [52200.0, 7.0], [52600.0, 9.0], [51400.0, 7.0], [51800.0, 4.0], [55000.0, 2.0], [54200.0, 2.0], [53400.0, 6.0], [53800.0, 2.0], [54600.0, 3.0], [55400.0, 3.0], [56600.0, 5.0], [57400.0, 1.0], [60600.0, 1.0], [61000.0, 1.0], [63400.0, 1.0], [62600.0, 2.0], [63800.0, 1.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 155.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 845.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 845.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 155.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 28.13793103448275, "minX": 1.71235908E12, "maxY": 100.0, "series": [{"data": [[1.7123592E12, 100.0], [1.71235938E12, 99.52755905511812], [1.71235908E12, 100.0], [1.71235926E12, 100.0], [1.71235944E12, 78.72592592592595], [1.71235914E12, 100.0], [1.71235932E12, 100.0], [1.7123595E12, 28.13793103448275]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123595E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3815.0, "minX": 1.0, "maxY": 52761.5, "series": [{"data": [[2.0, 11824.0], [3.0, 13259.0], [4.0, 13693.0], [5.0, 14410.0], [6.0, 15006.0], [7.0, 14719.0], [8.0, 14924.0], [9.0, 14837.0], [10.0, 17118.0], [11.0, 17482.0], [12.0, 17407.0], [13.0, 17192.0], [14.0, 17091.0], [15.0, 19598.0], [16.0, 20718.0], [17.0, 22488.0], [18.0, 25067.0], [19.0, 22137.0], [20.0, 25251.0], [21.0, 25879.0], [22.0, 25527.0], [23.0, 25365.0], [24.0, 25017.0], [25.0, 29106.0], [26.0, 26379.0], [27.0, 28427.0], [28.0, 28962.0], [29.0, 30661.0], [30.0, 30639.0], [31.0, 37532.0], [33.0, 34024.5], [37.0, 38953.0], [36.0, 34035.25], [39.0, 40984.0], [38.0, 40912.0], [41.0, 39709.0], [40.0, 38452.5], [43.0, 36532.0], [42.0, 36882.0], [45.0, 38462.0], [44.0, 39158.0], [47.0, 38201.333333333336], [46.0, 37685.0], [49.0, 36908.0], [48.0, 40571.666666666664], [51.0, 39955.16666666667], [50.0, 42429.0], [53.0, 42372.5], [55.0, 42416.0], [54.0, 39128.0], [57.0, 44557.0], [56.0, 46468.5], [58.0, 44876.0], [61.0, 45249.333333333336], [60.0, 45622.0], [62.0, 48447.0], [67.0, 48863.0], [66.0, 46264.0], [64.0, 47927.333333333336], [71.0, 3815.0], [70.0, 45199.666666666664], [75.0, 47812.666666666664], [74.0, 48907.666666666664], [73.0, 47171.5], [72.0, 50636.0], [79.0, 51501.5], [78.0, 49183.666666666664], [77.0, 52672.5], [76.0, 33740.666666666664], [83.0, 8133.0], [82.0, 48119.0], [81.0, 49813.555555555555], [80.0, 46450.0], [87.0, 48902.0], [86.0, 11344.0], [85.0, 52761.5], [84.0, 47482.64285714286], [91.0, 48854.23076923077], [90.0, 43369.0], [89.0, 46786.090909090904], [88.0, 39379.5], [94.0, 34050.0], [93.0, 49661.666666666664], [92.0, 15457.0], [99.0, 44332.0], [98.0, 43376.5], [97.0, 42932.16666666667], [96.0, 48954.0], [100.0, 40913.36270753508], [1.0, 10017.0]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}, {"data": [[92.90000000000006, 40814.58699999994]], "isOverall": false, "label": "HTTP Request (Mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 216.53333333333333, "minX": 1.71235908E12, "maxY": 185595.1, "series": [{"data": [[1.7123592E12, 567.0666666666667], [1.71235938E12, 505.3333333333333], [1.71235908E12, 813.7166666666667], [1.71235926E12, 589.1333333333333], [1.71235944E12, 550.8], [1.71235914E12, 603.5666666666667], [1.71235932E12, 491.06666666666666], [1.7123595E12, 216.53333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7123592E12, 166528.75], [1.71235938E12, 161443.15], [1.71235908E12, 184322.1], [1.71235926E12, 176698.4], [1.71235944E12, 171612.05], [1.71235914E12, 185595.1], [1.71235932E12, 151273.15], [1.7123595E12, 73727.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123595E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20319.248275862064, "minX": 1.71235908E12, "maxY": 48066.20168067226, "series": [{"data": [[1.7123592E12, 44846.732824427476], [1.71235938E12, 45304.062992126], [1.71235908E12, 20319.248275862064], [1.71235926E12, 44168.54676258993], [1.71235944E12, 45157.97777777779], [1.71235914E12, 45266.86301369864], [1.71235932E12, 48066.20168067226], [1.7123595E12, 28882.120689655178]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123595E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20319.027586206896, "minX": 1.71235908E12, "maxY": 48066.058823529405, "series": [{"data": [[1.7123592E12, 44846.58015267175], [1.71235938E12, 45303.960629921254], [1.71235908E12, 20319.027586206896], [1.71235926E12, 44168.45323741007], [1.71235944E12, 45157.91111111112], [1.71235914E12, 45266.506849315054], [1.71235932E12, 48066.058823529405], [1.7123595E12, 28882.06896551724]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123595E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 84.24460431654674, "minX": 1.71235908E12, "maxY": 138.4068965517241, "series": [{"data": [[1.7123592E12, 86.74809160305347], [1.71235938E12, 87.84251968503939], [1.71235908E12, 138.4068965517241], [1.71235926E12, 84.24460431654674], [1.71235944E12, 85.64444444444445], [1.71235914E12, 85.02054794520552], [1.71235932E12, 85.70588235294117], [1.7123595E12, 84.55172413793103]], "isOverall": false, "label": "HTTP Request (Mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123595E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10017.0, "minX": 1.71235908E12, "maxY": 64332.0, "series": [{"data": [[1.7123592E12, 55768.0], [1.71235938E12, 52902.0], [1.71235908E12, 55053.0], [1.71235926E12, 55989.0], [1.71235944E12, 54601.0], [1.71235914E12, 64332.0], [1.71235932E12, 62675.0], [1.7123595E12, 43349.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7123592E12, 45449.0], [1.71235938E12, 42404.0], [1.71235908E12, 12414.0], [1.71235926E12, 43072.0], [1.71235944E12, 38417.0], [1.71235914E12, 39849.0], [1.71235932E12, 43084.0], [1.7123595E12, 10017.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7123592E12, 53896.4], [1.71235938E12, 51132.0], [1.71235908E12, 47510.4], [1.71235926E12, 52991.6], [1.71235944E12, 52791.6], [1.71235914E12, 59362.0], [1.71235932E12, 57329.0], [1.7123595E12, 40029.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7123592E12, 55726.84], [1.71235938E12, 52794.6], [1.71235908E12, 55053.0], [1.71235926E12, 55977.12], [1.71235944E12, 54584.2], [1.71235914E12, 64284.32], [1.71235932E12, 62670.44], [1.7123595E12, 43349.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7123592E12, 50963.0], [1.71235938E12, 47874.0], [1.71235908E12, 38914.0], [1.71235926E12, 48804.0], [1.71235944E12, 49616.0], [1.71235914E12, 47762.0], [1.71235932E12, 51998.0], [1.7123595E12, 29618.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7123592E12, 54776.8], [1.71235938E12, 51749.0], [1.71235908E12, 51006.600000000006], [1.71235926E12, 54585.7], [1.71235944E12, 54338.6], [1.71235914E12, 61474.79999999999], [1.71235932E12, 60523.6], [1.7123595E12, 41824.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123595E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 723.0, "minX": 1.0, "maxY": 53404.5, "series": [{"data": [[2.0, 47893.0], [8.0, 45449.0], [9.0, 49538.0], [10.0, 49585.0], [11.0, 46759.0], [3.0, 47749.0], [12.0, 51513.5], [13.0, 51704.0], [15.0, 49855.5], [1.0, 48112.0], [4.0, 47959.0], [5.0, 49742.0], [23.0, 53404.5], [6.0, 44343.5], [24.0, 52435.0], [7.0, 47880.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10038.0], [8.0, 12571.0], [9.0, 13599.0], [10.0, 10474.5], [11.0, 723.0], [45.0, 1576.0], [3.0, 11635.0], [12.0, 15183.0], [13.0, 13409.0], [15.0, 16947.0], [1.0, 11831.0], [4.0, 9752.0], [5.0, 9863.0], [23.0, 9705.0], [6.0, 5920.0], [24.0, 16455.0], [7.0, 12924.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 723.0, "minX": 1.0, "maxY": 53404.5, "series": [{"data": [[2.0, 47892.0], [8.0, 45449.0], [9.0, 49538.0], [10.0, 49585.0], [11.0, 46759.0], [3.0, 47749.0], [12.0, 51513.5], [13.0, 51704.0], [15.0, 49854.5], [1.0, 48111.0], [4.0, 47959.0], [5.0, 49741.0], [23.0, 53404.5], [6.0, 44343.5], [24.0, 52435.0], [7.0, 47880.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10038.0], [8.0, 12571.0], [9.0, 13598.0], [10.0, 10474.5], [11.0, 723.0], [45.0, 1575.0], [3.0, 11635.0], [12.0, 15183.0], [13.0, 13409.0], [15.0, 16947.0], [1.0, 11831.0], [4.0, 9752.0], [5.0, 9863.0], [23.0, 9705.0], [6.0, 5919.5], [24.0, 16454.0], [7.0, 12924.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71235908E12, "maxY": 4.083333333333333, "series": [{"data": [[1.7123592E12, 2.183333333333333], [1.71235938E12, 2.066666666666667], [1.71235908E12, 4.083333333333333], [1.71235926E12, 2.316666666666667], [1.71235944E12, 1.45], [1.71235914E12, 2.433333333333333], [1.71235932E12, 1.9833333333333334], [1.7123595E12, 0.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123595E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71235908E12, "maxY": 2.183333333333333, "series": [{"data": [[1.7123592E12, 1.85], [1.71235938E12, 1.9833333333333334], [1.71235908E12, 1.25], [1.71235926E12, 2.0166666666666666], [1.71235944E12, 2.05], [1.71235914E12, 2.183333333333333], [1.71235932E12, 1.7833333333333334], [1.7123595E12, 0.9666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7123592E12, 0.3333333333333333], [1.71235938E12, 0.13333333333333333], [1.71235908E12, 1.1666666666666667], [1.71235926E12, 0.3], [1.71235944E12, 0.2], [1.71235914E12, 0.25], [1.71235932E12, 0.2]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7123595E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71235908E12, "maxY": 2.183333333333333, "series": [{"data": [[1.7123592E12, 1.85], [1.71235938E12, 1.9833333333333334], [1.71235908E12, 1.25], [1.71235926E12, 2.0166666666666666], [1.71235944E12, 2.05], [1.71235914E12, 2.183333333333333], [1.71235932E12, 1.7833333333333334], [1.7123595E12, 0.9666666666666667]], "isOverall": false, "label": "HTTP Request (Mid image)-success", "isController": false}, {"data": [[1.7123592E12, 0.3333333333333333], [1.71235938E12, 0.13333333333333333], [1.71235908E12, 1.1666666666666667], [1.71235926E12, 0.3], [1.71235944E12, 0.2], [1.71235914E12, 0.25], [1.71235932E12, 0.2]], "isOverall": false, "label": "HTTP Request (Mid image)-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123595E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71235908E12, "maxY": 2.183333333333333, "series": [{"data": [[1.7123592E12, 1.85], [1.71235938E12, 1.9833333333333334], [1.71235908E12, 1.25], [1.71235926E12, 2.0166666666666666], [1.71235944E12, 2.05], [1.71235914E12, 2.183333333333333], [1.71235932E12, 1.7833333333333334], [1.7123595E12, 0.9666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7123592E12, 0.3333333333333333], [1.71235938E12, 0.13333333333333333], [1.71235908E12, 1.1666666666666667], [1.71235926E12, 0.3], [1.71235944E12, 0.2], [1.71235914E12, 0.25], [1.71235932E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7123595E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

