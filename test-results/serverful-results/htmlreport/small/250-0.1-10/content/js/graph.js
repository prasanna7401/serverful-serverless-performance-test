/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 413.0, "minX": 0.0, "maxY": 78441.0, "series": [{"data": [[0.0, 413.0], [0.1, 415.0], [0.2, 416.0], [0.3, 416.0], [0.4, 420.0], [0.5, 420.0], [0.6, 479.0], [0.7, 498.0], [0.8, 502.0], [0.9, 644.0], [1.0, 646.0], [1.1, 647.0], [1.2, 650.0], [1.3, 651.0], [1.4, 667.0], [1.5, 668.0], [1.6, 668.0], [1.7, 669.0], [1.8, 669.0], [1.9, 669.0], [2.0, 669.0], [2.1, 670.0], [2.2, 670.0], [2.3, 671.0], [2.4, 671.0], [2.5, 671.0], [2.6, 671.0], [2.7, 672.0], [2.8, 672.0], [2.9, 672.0], [3.0, 672.0], [3.1, 672.0], [3.2, 674.0], [3.3, 675.0], [3.4, 675.0], [3.5, 675.0], [3.6, 675.0], [3.7, 675.0], [3.8, 676.0], [3.9, 676.0], [4.0, 676.0], [4.1, 677.0], [4.2, 1919.0], [4.3, 1922.0], [4.4, 4073.0], [4.5, 4571.0], [4.6, 7165.0], [4.7, 8512.0], [4.8, 9293.0], [4.9, 9673.0], [5.0, 9686.0], [5.1, 10012.0], [5.2, 10445.0], [5.3, 10897.0], [5.4, 11561.0], [5.5, 12365.0], [5.6, 12983.0], [5.7, 13006.0], [5.8, 13468.0], [5.9, 14256.0], [6.0, 14443.0], [6.1, 15028.0], [6.2, 15935.0], [6.3, 16442.0], [6.4, 16531.0], [6.5, 17058.0], [6.6, 17984.0], [6.7, 18385.0], [6.8, 18947.0], [6.9, 19196.0], [7.0, 19196.0], [7.1, 19202.0], [7.2, 19203.0], [7.3, 19207.0], [7.4, 19210.0], [7.5, 19213.0], [7.6, 19213.0], [7.7, 19218.0], [7.8, 19220.0], [7.9, 19221.0], [8.0, 19221.0], [8.1, 19222.0], [8.2, 19222.0], [8.3, 19222.0], [8.4, 19223.0], [8.5, 19223.0], [8.6, 19226.0], [8.7, 19232.0], [8.8, 19241.0], [8.9, 19256.0], [9.0, 19259.0], [9.1, 19264.0], [9.2, 19298.0], [9.3, 19298.0], [9.4, 19315.0], [9.5, 19336.0], [9.6, 20201.0], [9.7, 20202.0], [9.8, 20216.0], [9.9, 20216.0], [10.0, 20218.0], [10.1, 20218.0], [10.2, 20227.0], [10.3, 20228.0], [10.4, 20232.0], [10.5, 20236.0], [10.6, 20243.0], [10.7, 20246.0], [10.8, 20246.0], [10.9, 20247.0], [11.0, 20349.0], [11.1, 20349.0], [11.2, 20350.0], [11.3, 20350.0], [11.4, 20350.0], [11.5, 20351.0], [11.6, 20351.0], [11.7, 20351.0], [11.8, 20351.0], [11.9, 20351.0], [12.0, 20351.0], [12.1, 20352.0], [12.2, 20352.0], [12.3, 20352.0], [12.4, 20450.0], [12.5, 20848.0], [12.6, 21016.0], [12.7, 21016.0], [12.8, 21020.0], [12.9, 21023.0], [13.0, 21024.0], [13.1, 21026.0], [13.2, 21026.0], [13.3, 21027.0], [13.4, 21028.0], [13.5, 21029.0], [13.6, 21030.0], [13.7, 21030.0], [13.8, 21031.0], [13.9, 21031.0], [14.0, 21031.0], [14.1, 21031.0], [14.2, 21031.0], [14.3, 21032.0], [14.4, 21032.0], [14.5, 21032.0], [14.6, 21033.0], [14.7, 21034.0], [14.8, 21034.0], [14.9, 21035.0], [15.0, 21036.0], [15.1, 21036.0], [15.2, 21036.0], [15.3, 21036.0], [15.4, 21037.0], [15.5, 21037.0], [15.6, 21038.0], [15.7, 21038.0], [15.8, 21039.0], [15.9, 21039.0], [16.0, 21039.0], [16.1, 21040.0], [16.2, 21040.0], [16.3, 21040.0], [16.4, 21041.0], [16.5, 21041.0], [16.6, 21042.0], [16.7, 21042.0], [16.8, 21042.0], [16.9, 21043.0], [17.0, 21043.0], [17.1, 21043.0], [17.2, 21043.0], [17.3, 21044.0], [17.4, 21044.0], [17.5, 21044.0], [17.6, 21045.0], [17.7, 21045.0], [17.8, 21045.0], [17.9, 21046.0], [18.0, 21046.0], [18.1, 21048.0], [18.2, 21048.0], [18.3, 21048.0], [18.4, 21049.0], [18.5, 21050.0], [18.6, 21050.0], [18.7, 21051.0], [18.8, 21051.0], [18.9, 21051.0], [19.0, 21051.0], [19.1, 21052.0], [19.2, 21053.0], [19.3, 21053.0], [19.4, 21053.0], [19.5, 21054.0], [19.6, 21055.0], [19.7, 21056.0], [19.8, 21056.0], [19.9, 21056.0], [20.0, 21057.0], [20.1, 21057.0], [20.2, 21057.0], [20.3, 21057.0], [20.4, 21058.0], [20.5, 21059.0], [20.6, 21059.0], [20.7, 21060.0], [20.8, 21061.0], [20.9, 21061.0], [21.0, 21062.0], [21.1, 21062.0], [21.2, 21063.0], [21.3, 21064.0], [21.4, 21064.0], [21.5, 21065.0], [21.6, 21133.0], [21.7, 21214.0], [21.8, 21348.0], [21.9, 22205.0], [22.0, 22360.0], [22.1, 22361.0], [22.2, 22365.0], [22.3, 22368.0], [22.4, 22372.0], [22.5, 22372.0], [22.6, 22373.0], [22.7, 22374.0], [22.8, 22378.0], [22.9, 22382.0], [23.0, 22383.0], [23.1, 22383.0], [23.2, 22383.0], [23.3, 22383.0], [23.4, 22384.0], [23.5, 22384.0], [23.6, 22384.0], [23.7, 22385.0], [23.8, 22385.0], [23.9, 22385.0], [24.0, 22391.0], [24.1, 22399.0], [24.2, 22399.0], [24.3, 22399.0], [24.4, 22399.0], [24.5, 22400.0], [24.6, 22400.0], [24.7, 22400.0], [24.8, 22400.0], [24.9, 22401.0], [25.0, 22401.0], [25.1, 22401.0], [25.2, 22402.0], [25.3, 22402.0], [25.4, 22402.0], [25.5, 22402.0], [25.6, 22402.0], [25.7, 22403.0], [25.8, 22403.0], [25.9, 22404.0], [26.0, 22687.0], [26.1, 22752.0], [26.2, 22993.0], [26.3, 23634.0], [26.4, 24615.0], [26.5, 24873.0], [26.6, 24923.0], [26.7, 25732.0], [26.8, 25818.0], [26.9, 26359.0], [27.0, 26368.0], [27.1, 26374.0], [27.2, 26376.0], [27.3, 26379.0], [27.4, 26380.0], [27.5, 26383.0], [27.6, 26384.0], [27.7, 26394.0], [27.8, 26396.0], [27.9, 26396.0], [28.0, 26405.0], [28.1, 26536.0], [28.2, 26753.0], [28.3, 26846.0], [28.4, 27141.0], [28.5, 27445.0], [28.6, 28383.0], [28.7, 28785.0], [28.8, 29833.0], [28.9, 30009.0], [29.0, 30381.0], [29.1, 30470.0], [29.2, 30987.0], [29.3, 31108.0], [29.4, 31282.0], [29.5, 31308.0], [29.6, 31701.0], [29.7, 31899.0], [29.8, 32406.0], [29.9, 32428.0], [30.0, 32548.0], [30.1, 32746.0], [30.2, 32966.0], [30.3, 33145.0], [30.4, 33354.0], [30.5, 33389.0], [30.6, 33739.0], [30.7, 33821.0], [30.8, 33862.0], [30.9, 34014.0], [31.0, 34274.0], [31.1, 34379.0], [31.2, 34388.0], [31.3, 34403.0], [31.4, 34481.0], [31.5, 34797.0], [31.6, 35158.0], [31.7, 35176.0], [31.8, 35178.0], [31.9, 35238.0], [32.0, 35289.0], [32.1, 35341.0], [32.2, 35442.0], [32.3, 35623.0], [32.4, 35650.0], [32.5, 35721.0], [32.6, 35855.0], [32.7, 36018.0], [32.8, 36074.0], [32.9, 36126.0], [33.0, 36325.0], [33.1, 36404.0], [33.2, 36656.0], [33.3, 36837.0], [33.4, 36977.0], [33.5, 37047.0], [33.6, 37178.0], [33.7, 37380.0], [33.8, 37588.0], [33.9, 37755.0], [34.0, 38122.0], [34.1, 38272.0], [34.2, 38847.0], [34.3, 38878.0], [34.4, 39434.0], [34.5, 39468.0], [34.6, 39954.0], [34.7, 40198.0], [34.8, 40404.0], [34.9, 40621.0], [35.0, 41382.0], [35.1, 41994.0], [35.2, 42333.0], [35.3, 42436.0], [35.4, 42767.0], [35.5, 42829.0], [35.6, 43171.0], [35.7, 43426.0], [35.8, 43881.0], [35.9, 43881.0], [36.0, 43934.0], [36.1, 44102.0], [36.2, 44334.0], [36.3, 44433.0], [36.4, 44723.0], [36.5, 44800.0], [36.6, 44900.0], [36.7, 45017.0], [36.8, 45139.0], [36.9, 45318.0], [37.0, 45510.0], [37.1, 45552.0], [37.2, 45637.0], [37.3, 45737.0], [37.4, 45818.0], [37.5, 45950.0], [37.6, 46082.0], [37.7, 46409.0], [37.8, 46437.0], [37.9, 46451.0], [38.0, 46722.0], [38.1, 46787.0], [38.2, 46937.0], [38.3, 46955.0], [38.4, 47046.0], [38.5, 47113.0], [38.6, 47373.0], [38.7, 47504.0], [38.8, 47657.0], [38.9, 48009.0], [39.0, 48504.0], [39.1, 48684.0], [39.2, 48811.0], [39.3, 49422.0], [39.4, 49578.0], [39.5, 49698.0], [39.6, 49875.0], [39.7, 49907.0], [39.8, 50113.0], [39.9, 50266.0], [40.0, 50315.0], [40.1, 50345.0], [40.2, 50409.0], [40.3, 50484.0], [40.4, 50687.0], [40.5, 50772.0], [40.6, 50832.0], [40.7, 50833.0], [40.8, 50902.0], [40.9, 50958.0], [41.0, 51016.0], [41.1, 51115.0], [41.2, 51160.0], [41.3, 51235.0], [41.4, 51332.0], [41.5, 51357.0], [41.6, 51420.0], [41.7, 51478.0], [41.8, 51529.0], [41.9, 51549.0], [42.0, 51601.0], [42.1, 51609.0], [42.2, 51675.0], [42.3, 51736.0], [42.4, 51754.0], [42.5, 51771.0], [42.6, 51797.0], [42.7, 51815.0], [42.8, 51829.0], [42.9, 51884.0], [43.0, 51900.0], [43.1, 51906.0], [43.2, 51923.0], [43.3, 51960.0], [43.4, 51980.0], [43.5, 52000.0], [43.6, 52044.0], [43.7, 52063.0], [43.8, 52137.0], [43.9, 52166.0], [44.0, 52214.0], [44.1, 52239.0], [44.2, 52252.0], [44.3, 52256.0], [44.4, 52295.0], [44.5, 52303.0], [44.6, 52313.0], [44.7, 52331.0], [44.8, 52340.0], [44.9, 52345.0], [45.0, 52378.0], [45.1, 52388.0], [45.2, 52398.0], [45.3, 52405.0], [45.4, 52425.0], [45.5, 52435.0], [45.6, 52470.0], [45.7, 52487.0], [45.8, 52509.0], [45.9, 52529.0], [46.0, 52551.0], [46.1, 52556.0], [46.2, 52572.0], [46.3, 52576.0], [46.4, 52623.0], [46.5, 52625.0], [46.6, 52644.0], [46.7, 52658.0], [46.8, 52669.0], [46.9, 52688.0], [47.0, 52694.0], [47.1, 52708.0], [47.2, 52719.0], [47.3, 52724.0], [47.4, 52737.0], [47.5, 52746.0], [47.6, 52779.0], [47.7, 52784.0], [47.8, 52790.0], [47.9, 52796.0], [48.0, 52804.0], [48.1, 52828.0], [48.2, 52840.0], [48.3, 52845.0], [48.4, 52854.0], [48.5, 52863.0], [48.6, 52870.0], [48.7, 52881.0], [48.8, 52915.0], [48.9, 52920.0], [49.0, 52932.0], [49.1, 52942.0], [49.2, 52963.0], [49.3, 52965.0], [49.4, 52971.0], [49.5, 52977.0], [49.6, 52996.0], [49.7, 53005.0], [49.8, 53023.0], [49.9, 53027.0], [50.0, 53032.0], [50.1, 53038.0], [50.2, 53054.0], [50.3, 53058.0], [50.4, 53069.0], [50.5, 53081.0], [50.6, 53084.0], [50.7, 53087.0], [50.8, 53100.0], [50.9, 53113.0], [51.0, 53121.0], [51.1, 53125.0], [51.2, 53147.0], [51.3, 53155.0], [51.4, 53163.0], [51.5, 53169.0], [51.6, 53179.0], [51.7, 53191.0], [51.8, 53200.0], [51.9, 53211.0], [52.0, 53215.0], [52.1, 53225.0], [52.2, 53236.0], [52.3, 53248.0], [52.4, 53260.0], [52.5, 53275.0], [52.6, 53284.0], [52.7, 53296.0], [52.8, 53305.0], [52.9, 53313.0], [53.0, 53318.0], [53.1, 53331.0], [53.2, 53338.0], [53.3, 53341.0], [53.4, 53345.0], [53.5, 53355.0], [53.6, 53367.0], [53.7, 53371.0], [53.8, 53379.0], [53.9, 53397.0], [54.0, 53404.0], [54.1, 53406.0], [54.2, 53408.0], [54.3, 53413.0], [54.4, 53417.0], [54.5, 53422.0], [54.6, 53430.0], [54.7, 53438.0], [54.8, 53449.0], [54.9, 53451.0], [55.0, 53461.0], [55.1, 53471.0], [55.2, 53510.0], [55.3, 53514.0], [55.4, 53520.0], [55.5, 53541.0], [55.6, 53555.0], [55.7, 53564.0], [55.8, 53574.0], [55.9, 53579.0], [56.0, 53594.0], [56.1, 53603.0], [56.2, 53617.0], [56.3, 53620.0], [56.4, 53632.0], [56.5, 53652.0], [56.6, 53673.0], [56.7, 53688.0], [56.8, 53696.0], [56.9, 53711.0], [57.0, 53729.0], [57.1, 53730.0], [57.2, 53732.0], [57.3, 53734.0], [57.4, 53747.0], [57.5, 53766.0], [57.6, 53775.0], [57.7, 53780.0], [57.8, 53782.0], [57.9, 53788.0], [58.0, 53799.0], [58.1, 53810.0], [58.2, 53824.0], [58.3, 53827.0], [58.4, 53838.0], [58.5, 53850.0], [58.6, 53866.0], [58.7, 53877.0], [58.8, 53887.0], [58.9, 53894.0], [59.0, 53905.0], [59.1, 53909.0], [59.2, 53915.0], [59.3, 53931.0], [59.4, 53942.0], [59.5, 53953.0], [59.6, 53961.0], [59.7, 53967.0], [59.8, 53977.0], [59.9, 53979.0], [60.0, 54002.0], [60.1, 54008.0], [60.2, 54017.0], [60.3, 54019.0], [60.4, 54027.0], [60.5, 54033.0], [60.6, 54042.0], [60.7, 54053.0], [60.8, 54055.0], [60.9, 54058.0], [61.0, 54064.0], [61.1, 54066.0], [61.2, 54082.0], [61.3, 54086.0], [61.4, 54100.0], [61.5, 54105.0], [61.6, 54133.0], [61.7, 54134.0], [61.8, 54140.0], [61.9, 54147.0], [62.0, 54174.0], [62.1, 54182.0], [62.2, 54199.0], [62.3, 54203.0], [62.4, 54219.0], [62.5, 54221.0], [62.6, 54235.0], [62.7, 54241.0], [62.8, 54248.0], [62.9, 54251.0], [63.0, 54259.0], [63.1, 54271.0], [63.2, 54274.0], [63.3, 54290.0], [63.4, 54296.0], [63.5, 54297.0], [63.6, 54320.0], [63.7, 54327.0], [63.8, 54342.0], [63.9, 54348.0], [64.0, 54363.0], [64.1, 54377.0], [64.2, 54398.0], [64.3, 54402.0], [64.4, 54416.0], [64.5, 54417.0], [64.6, 54425.0], [64.7, 54434.0], [64.8, 54445.0], [64.9, 54453.0], [65.0, 54466.0], [65.1, 54481.0], [65.2, 54507.0], [65.3, 54511.0], [65.4, 54524.0], [65.5, 54530.0], [65.6, 54537.0], [65.7, 54546.0], [65.8, 54554.0], [65.9, 54564.0], [66.0, 54580.0], [66.1, 54583.0], [66.2, 54593.0], [66.3, 54602.0], [66.4, 54624.0], [66.5, 54632.0], [66.6, 54639.0], [66.7, 54661.0], [66.8, 54704.0], [66.9, 54721.0], [67.0, 54732.0], [67.1, 54736.0], [67.2, 54744.0], [67.3, 54748.0], [67.4, 54759.0], [67.5, 54769.0], [67.6, 54797.0], [67.7, 54803.0], [67.8, 54818.0], [67.9, 54824.0], [68.0, 54832.0], [68.1, 54840.0], [68.2, 54849.0], [68.3, 54864.0], [68.4, 54870.0], [68.5, 54894.0], [68.6, 54900.0], [68.7, 54908.0], [68.8, 54912.0], [68.9, 54935.0], [69.0, 54950.0], [69.1, 54954.0], [69.2, 54993.0], [69.3, 54993.0], [69.4, 55031.0], [69.5, 55046.0], [69.6, 55060.0], [69.7, 55069.0], [69.8, 55086.0], [69.9, 55091.0], [70.0, 55094.0], [70.1, 55127.0], [70.2, 55148.0], [70.3, 55151.0], [70.4, 55154.0], [70.5, 55157.0], [70.6, 55169.0], [70.7, 55174.0], [70.8, 55186.0], [70.9, 55193.0], [71.0, 55202.0], [71.1, 55206.0], [71.2, 55224.0], [71.3, 55259.0], [71.4, 55268.0], [71.5, 55285.0], [71.6, 55289.0], [71.7, 55305.0], [71.8, 55320.0], [71.9, 55359.0], [72.0, 55366.0], [72.1, 55383.0], [72.2, 55394.0], [72.3, 55405.0], [72.4, 55411.0], [72.5, 55423.0], [72.6, 55426.0], [72.7, 55430.0], [72.8, 55435.0], [72.9, 55450.0], [73.0, 55466.0], [73.1, 55478.0], [73.2, 55489.0], [73.3, 55504.0], [73.4, 55507.0], [73.5, 55542.0], [73.6, 55548.0], [73.7, 55559.0], [73.8, 55578.0], [73.9, 55600.0], [74.0, 55623.0], [74.1, 55640.0], [74.2, 55660.0], [74.3, 55663.0], [74.4, 55671.0], [74.5, 55687.0], [74.6, 55697.0], [74.7, 55719.0], [74.8, 55721.0], [74.9, 55754.0], [75.0, 55769.0], [75.1, 55779.0], [75.2, 55783.0], [75.3, 55799.0], [75.4, 55811.0], [75.5, 55829.0], [75.6, 55841.0], [75.7, 55843.0], [75.8, 55864.0], [75.9, 55892.0], [76.0, 55908.0], [76.1, 55917.0], [76.2, 55933.0], [76.3, 55948.0], [76.4, 55983.0], [76.5, 56001.0], [76.6, 56004.0], [76.7, 56020.0], [76.8, 56028.0], [76.9, 56059.0], [77.0, 56075.0], [77.1, 56081.0], [77.2, 56104.0], [77.3, 56113.0], [77.4, 56116.0], [77.5, 56138.0], [77.6, 56148.0], [77.7, 56165.0], [77.8, 56171.0], [77.9, 56191.0], [78.0, 56207.0], [78.1, 56219.0], [78.2, 56225.0], [78.3, 56241.0], [78.4, 56246.0], [78.5, 56309.0], [78.6, 56329.0], [78.7, 56333.0], [78.8, 56343.0], [78.9, 56395.0], [79.0, 56421.0], [79.1, 56441.0], [79.2, 56447.0], [79.3, 56489.0], [79.4, 56503.0], [79.5, 56512.0], [79.6, 56515.0], [79.7, 56537.0], [79.8, 56553.0], [79.9, 56576.0], [80.0, 56580.0], [80.1, 56596.0], [80.2, 56604.0], [80.3, 56646.0], [80.4, 56655.0], [80.5, 56676.0], [80.6, 56685.0], [80.7, 56727.0], [80.8, 56736.0], [80.9, 56756.0], [81.0, 56773.0], [81.1, 56818.0], [81.2, 56825.0], [81.3, 56844.0], [81.4, 56851.0], [81.5, 56869.0], [81.6, 56889.0], [81.7, 56895.0], [81.8, 56908.0], [81.9, 56930.0], [82.0, 56944.0], [82.1, 56978.0], [82.2, 56999.0], [82.3, 57020.0], [82.4, 57031.0], [82.5, 57068.0], [82.6, 57086.0], [82.7, 57128.0], [82.8, 57147.0], [82.9, 57165.0], [83.0, 57182.0], [83.1, 57240.0], [83.2, 57262.0], [83.3, 57300.0], [83.4, 57313.0], [83.5, 57378.0], [83.6, 57418.0], [83.7, 57450.0], [83.8, 57476.0], [83.9, 57518.0], [84.0, 57544.0], [84.1, 57569.0], [84.2, 57606.0], [84.3, 57621.0], [84.4, 57631.0], [84.5, 57700.0], [84.6, 57735.0], [84.7, 57744.0], [84.8, 57757.0], [84.9, 57826.0], [85.0, 57836.0], [85.1, 57866.0], [85.2, 57898.0], [85.3, 57935.0], [85.4, 57971.0], [85.5, 58004.0], [85.6, 58044.0], [85.7, 58061.0], [85.8, 58093.0], [85.9, 58127.0], [86.0, 58134.0], [86.1, 58154.0], [86.2, 58173.0], [86.3, 58187.0], [86.4, 58225.0], [86.5, 58261.0], [86.6, 58276.0], [86.7, 58314.0], [86.8, 58334.0], [86.9, 58375.0], [87.0, 58430.0], [87.1, 58441.0], [87.2, 58444.0], [87.3, 58541.0], [87.4, 58552.0], [87.5, 58587.0], [87.6, 58643.0], [87.7, 58664.0], [87.8, 58674.0], [87.9, 58843.0], [88.0, 58855.0], [88.1, 58913.0], [88.2, 58946.0], [88.3, 58991.0], [88.4, 59011.0], [88.5, 59035.0], [88.6, 59082.0], [88.7, 59128.0], [88.8, 59180.0], [88.9, 59240.0], [89.0, 59261.0], [89.1, 59304.0], [89.2, 59332.0], [89.3, 59342.0], [89.4, 59367.0], [89.5, 59461.0], [89.6, 59573.0], [89.7, 59733.0], [89.8, 59754.0], [89.9, 59847.0], [90.0, 59848.0], [90.1, 59874.0], [90.2, 59887.0], [90.3, 59892.0], [90.4, 60026.0], [90.5, 60069.0], [90.6, 60106.0], [90.7, 60141.0], [90.8, 60203.0], [90.9, 60295.0], [91.0, 60343.0], [91.1, 60376.0], [91.2, 60392.0], [91.3, 60436.0], [91.4, 60444.0], [91.5, 60536.0], [91.6, 60576.0], [91.7, 60581.0], [91.8, 60597.0], [91.9, 60625.0], [92.0, 60643.0], [92.1, 60755.0], [92.2, 60871.0], [92.3, 60981.0], [92.4, 61028.0], [92.5, 61040.0], [92.6, 61073.0], [92.7, 61100.0], [92.8, 61110.0], [92.9, 61157.0], [93.0, 61162.0], [93.1, 61208.0], [93.2, 61218.0], [93.3, 61285.0], [93.4, 61398.0], [93.5, 61596.0], [93.6, 61647.0], [93.7, 61778.0], [93.8, 61813.0], [93.9, 61897.0], [94.0, 61920.0], [94.1, 62057.0], [94.2, 62116.0], [94.3, 62199.0], [94.4, 62278.0], [94.5, 62361.0], [94.6, 62562.0], [94.7, 62712.0], [94.8, 62770.0], [94.9, 62960.0], [95.0, 63068.0], [95.1, 63321.0], [95.2, 63392.0], [95.3, 63570.0], [95.4, 63689.0], [95.5, 63860.0], [95.6, 63949.0], [95.7, 64059.0], [95.8, 64219.0], [95.9, 64477.0], [96.0, 64588.0], [96.1, 64862.0], [96.2, 65139.0], [96.3, 65366.0], [96.4, 65662.0], [96.5, 65849.0], [96.6, 65890.0], [96.7, 66355.0], [96.8, 66499.0], [96.9, 66956.0], [97.0, 67232.0], [97.1, 67526.0], [97.2, 67713.0], [97.3, 67922.0], [97.4, 67973.0], [97.5, 68060.0], [97.6, 68072.0], [97.7, 68232.0], [97.8, 68467.0], [97.9, 68513.0], [98.0, 68553.0], [98.1, 68602.0], [98.2, 68678.0], [98.3, 68972.0], [98.4, 69025.0], [98.5, 69116.0], [98.6, 69222.0], [98.7, 69388.0], [98.8, 69396.0], [98.9, 69663.0], [99.0, 69679.0], [99.1, 69902.0], [99.2, 70094.0], [99.3, 70223.0], [99.4, 70467.0], [99.5, 71157.0], [99.6, 71757.0], [99.7, 72412.0], [99.8, 74226.0], [99.9, 77294.0], [100.0, 78441.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 225.0, "series": [{"data": [[68300.0, 1.0], [69900.0, 2.0], [71500.0, 1.0], [33700.0, 2.0], [32900.0, 1.0], [36100.0, 3.0], [35300.0, 2.0], [36900.0, 2.0], [37700.0, 1.0], [40100.0, 2.0], [44100.0, 3.0], [44900.0, 2.0], [45700.0, 4.0], [47300.0, 1.0], [48100.0, 1.0], [49700.0, 1.0], [52900.0, 23.0], [52100.0, 7.0], [51300.0, 5.0], [53700.0, 30.0], [54500.0, 28.0], [55300.0, 15.0], [56100.0, 20.0], [56900.0, 12.0], [59300.0, 8.0], [57700.0, 10.0], [58500.0, 7.0], [60900.0, 4.0], [60100.0, 6.0], [63300.0, 4.0], [61700.0, 1.0], [62500.0, 2.0], [64100.0, 1.0], [69000.0, 3.0], [65800.0, 3.0], [72200.0, 1.0], [77000.0, 1.0], [400.0, 20.0], [500.0, 1.0], [600.0, 83.0], [900.0, 1.0], [1900.0, 3.0], [2100.0, 1.0], [2300.0, 1.0], [4000.0, 1.0], [68100.0, 1.0], [4100.0, 1.0], [4500.0, 1.0], [6000.0, 1.0], [7100.0, 1.0], [7900.0, 1.0], [8000.0, 1.0], [9200.0, 2.0], [9600.0, 7.0], [10000.0, 1.0], [10200.0, 1.0], [10400.0, 1.0], [10800.0, 3.0], [11400.0, 1.0], [12600.0, 1.0], [13000.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [14200.0, 1.0], [14400.0, 2.0], [14800.0, 1.0], [15000.0, 1.0], [16000.0, 2.0], [16400.0, 2.0], [18000.0, 1.0], [18400.0, 1.0], [19200.0, 58.0], [20400.0, 1.0], [20800.0, 4.0], [21200.0, 1.0], [22400.0, 39.0], [22800.0, 1.0], [23600.0, 3.0], [24800.0, 3.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 2.0], [27600.0, 1.0], [29200.0, 1.0], [28800.0, 1.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 1.0], [31200.0, 2.0], [31600.0, 1.0], [32400.0, 5.0], [32800.0, 2.0], [34400.0, 4.0], [36800.0, 2.0], [35200.0, 5.0], [36000.0, 4.0], [37600.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [42400.0, 2.0], [44800.0, 3.0], [43200.0, 1.0], [45600.0, 3.0], [46400.0, 8.0], [47200.0, 1.0], [48800.0, 2.0], [48000.0, 1.0], [50400.0, 3.0], [49600.0, 1.0], [52800.0, 21.0], [52000.0, 6.0], [51200.0, 3.0], [55200.0, 17.0], [54400.0, 22.0], [53600.0, 19.0], [56000.0, 16.0], [56800.0, 17.0], [59200.0, 7.0], [57600.0, 8.0], [58400.0, 7.0], [60000.0, 4.0], [60800.0, 1.0], [61600.0, 4.0], [63200.0, 1.0], [64000.0, 3.0], [64800.0, 1.0], [67200.0, 3.0], [68800.0, 2.0], [65600.0, 2.0], [70400.0, 1.0], [78400.0, 1.0], [75100.0, 1.0], [33100.0, 2.0], [34700.0, 1.0], [36300.0, 2.0], [35500.0, 1.0], [37100.0, 1.0], [37900.0, 1.0], [40300.0, 1.0], [41900.0, 1.0], [42700.0, 2.0], [44300.0, 2.0], [45100.0, 2.0], [45900.0, 3.0], [46700.0, 3.0], [48300.0, 1.0], [47500.0, 3.0], [49900.0, 3.0], [50700.0, 3.0], [52300.0, 19.0], [53100.0, 25.0], [51500.0, 6.0], [53900.0, 26.0], [54700.0, 22.0], [55500.0, 16.0], [56300.0, 12.0], [57100.0, 11.0], [57900.0, 6.0], [58700.0, 2.0], [59500.0, 2.0], [61100.0, 9.0], [60300.0, 8.0], [62700.0, 3.0], [61900.0, 4.0], [63500.0, 1.0], [65100.0, 2.0], [69400.0, 1.0], [74200.0, 1.0], [68500.0, 6.0], [66900.0, 1.0], [70100.0, 2.0], [71700.0, 1.0], [16500.0, 1.0], [18900.0, 1.0], [19300.0, 5.0], [20100.0, 1.0], [21300.0, 3.0], [22100.0, 1.0], [22900.0, 2.0], [24900.0, 1.0], [26500.0, 3.0], [25700.0, 2.0], [28500.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [33800.0, 6.0], [34600.0, 1.0], [35400.0, 2.0], [36200.0, 1.0], [37000.0, 4.0], [37800.0, 1.0], [39400.0, 3.0], [41000.0, 2.0], [44200.0, 1.0], [43400.0, 1.0], [45000.0, 2.0], [45800.0, 2.0], [49000.0, 1.0], [47400.0, 1.0], [50600.0, 3.0], [49800.0, 3.0], [51400.0, 5.0], [53000.0, 28.0], [52200.0, 12.0], [53800.0, 23.0], [54600.0, 13.0], [56200.0, 13.0], [55400.0, 25.0], [57000.0, 10.0], [58600.0, 7.0], [57800.0, 8.0], [60200.0, 4.0], [59400.0, 3.0], [61000.0, 8.0], [61800.0, 5.0], [62600.0, 1.0], [63400.0, 2.0], [64200.0, 2.0], [66000.0, 1.0], [69200.0, 1.0], [67600.0, 1.0], [72400.0, 1.0], [77200.0, 1.0], [69100.0, 3.0], [67500.0, 1.0], [70700.0, 1.0], [33300.0, 3.0], [34900.0, 1.0], [35700.0, 1.0], [38900.0, 1.0], [37300.0, 2.0], [38100.0, 1.0], [40500.0, 1.0], [42900.0, 2.0], [42100.0, 1.0], [41300.0, 1.0], [43700.0, 1.0], [46100.0, 1.0], [46900.0, 4.0], [45300.0, 3.0], [48500.0, 2.0], [50100.0, 2.0], [50900.0, 5.0], [51700.0, 10.0], [52500.0, 16.0], [53300.0, 30.0], [54100.0, 21.0], [54900.0, 19.0], [57300.0, 6.0], [55700.0, 17.0], [56500.0, 21.0], [58900.0, 7.0], [58100.0, 13.0], [59700.0, 4.0], [60500.0, 8.0], [61300.0, 1.0], [62900.0, 3.0], [62100.0, 5.0], [63700.0, 1.0], [64500.0, 2.0], [65300.0, 2.0], [68200.0, 2.0], [66600.0, 1.0], [69800.0, 2.0], [77800.0, 1.0], [67300.0, 1.0], [68900.0, 1.0], [65700.0, 2.0], [72100.0, 1.0], [8500.0, 1.0], [11500.0, 1.0], [11900.0, 1.0], [12300.0, 2.0], [12900.0, 2.0], [13100.0, 1.0], [14300.0, 1.0], [14100.0, 1.0], [15100.0, 1.0], [15900.0, 1.0], [17000.0, 2.0], [17400.0, 1.0], [16600.0, 1.0], [18200.0, 1.0], [19000.0, 1.0], [19400.0, 1.0], [20200.0, 33.0], [21000.0, 225.0], [22200.0, 3.0], [22600.0, 2.0], [24600.0, 2.0], [25800.0, 3.0], [26600.0, 1.0], [27000.0, 2.0], [27400.0, 1.0], [29800.0, 2.0], [31000.0, 1.0], [32200.0, 2.0], [31800.0, 2.0], [34000.0, 3.0], [33200.0, 2.0], [35600.0, 5.0], [36400.0, 3.0], [38800.0, 3.0], [40400.0, 1.0], [42000.0, 1.0], [42800.0, 2.0], [44400.0, 1.0], [45200.0, 1.0], [46800.0, 1.0], [46000.0, 1.0], [47600.0, 2.0], [50800.0, 6.0], [53200.0, 23.0], [52400.0, 13.0], [51600.0, 6.0], [54800.0, 23.0], [54000.0, 35.0], [55600.0, 19.0], [57200.0, 6.0], [56400.0, 10.0], [58000.0, 9.0], [58800.0, 5.0], [60400.0, 6.0], [61200.0, 8.0], [59600.0, 2.0], [62800.0, 1.0], [62000.0, 1.0], [64400.0, 2.0], [65200.0, 1.0], [63600.0, 2.0], [68000.0, 4.0], [66400.0, 2.0], [69600.0, 3.0], [69500.0, 1.0], [67900.0, 4.0], [66300.0, 1.0], [71100.0, 1.0], [34300.0, 6.0], [35100.0, 7.0], [36700.0, 1.0], [35900.0, 1.0], [38300.0, 1.0], [37500.0, 2.0], [39900.0, 2.0], [39100.0, 1.0], [42300.0, 2.0], [43900.0, 2.0], [44700.0, 2.0], [43100.0, 1.0], [47100.0, 2.0], [45500.0, 3.0], [48700.0, 1.0], [49500.0, 4.0], [50300.0, 7.0], [51100.0, 4.0], [52700.0, 22.0], [51900.0, 12.0], [54300.0, 18.0], [55100.0, 23.0], [53500.0, 23.0], [55900.0, 13.0], [56700.0, 11.0], [58300.0, 8.0], [59100.0, 5.0], [57500.0, 9.0], [60700.0, 3.0], [59900.0, 1.0], [62300.0, 4.0], [61500.0, 1.0], [63900.0, 1.0], [68600.0, 3.0], [70200.0, 2.0], [73400.0, 1.0], [67700.0, 3.0], [69300.0, 5.0], [66100.0, 1.0], [70900.0, 1.0], [18300.0, 1.0], [17900.0, 1.0], [19100.0, 4.0], [20300.0, 37.0], [21100.0, 2.0], [22300.0, 61.0], [22700.0, 1.0], [23100.0, 1.0], [26300.0, 28.0], [27100.0, 2.0], [26700.0, 1.0], [28300.0, 2.0], [28700.0, 1.0], [30300.0, 2.0], [30700.0, 1.0], [31100.0, 3.0], [31500.0, 1.0], [32700.0, 2.0], [34200.0, 1.0], [33400.0, 1.0], [35800.0, 3.0], [36600.0, 1.0], [35000.0, 1.0], [37400.0, 1.0], [38200.0, 2.0], [39800.0, 1.0], [40600.0, 1.0], [41400.0, 1.0], [43800.0, 5.0], [44600.0, 2.0], [47000.0, 4.0], [48600.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [51000.0, 2.0], [51800.0, 9.0], [52600.0, 16.0], [55000.0, 17.0], [54200.0, 33.0], [53400.0, 31.0], [55800.0, 16.0], [56600.0, 11.0], [58200.0, 8.0], [57400.0, 7.0], [59000.0, 6.0], [59800.0, 12.0], [61400.0, 2.0], [60600.0, 6.0], [63000.0, 1.0], [62200.0, 2.0], [63800.0, 3.0], [64600.0, 2.0], [68400.0, 2.0], [66800.0, 1.0], [70000.0, 1.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 78400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 686.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1814.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1814.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 686.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 98.21176470588235, "minX": 1.7123565E12, "maxY": 250.0, "series": [{"data": [[1.71235662E12, 250.0], [1.71235692E12, 199.32669322709165], [1.71235674E12, 249.45370370370375], [1.71235656E12, 250.0], [1.71235686E12, 229.44290657439453], [1.71235668E12, 250.0], [1.7123565E12, 250.0], [1.71235698E12, 98.21176470588235], [1.7123568E12, 241.42953020134232]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235698E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6042.0, "minX": 1.0, "maxY": 63860.0, "series": [{"data": [[2.0, 8055.0], [3.0, 14466.0], [4.0, 13605.0], [5.0, 12681.0], [6.0, 16692.0], [8.0, 18658.5], [9.0, 16531.0], [10.0, 18487.0], [11.0, 21306.0], [12.0, 14879.0], [13.0, 18091.0], [14.0, 24653.0], [15.0, 20450.0], [16.0, 24615.0], [17.0, 17984.0], [18.0, 21348.0], [19.0, 18385.0], [20.0, 27079.0], [21.0, 25745.0], [22.0, 25732.0], [23.0, 24923.0], [24.0, 23641.0], [25.0, 22978.0], [26.0, 26753.0], [27.0, 26665.0], [28.0, 27445.0], [29.0, 31618.0], [30.0, 27687.0], [31.0, 33216.0], [33.0, 27141.0], [32.0, 29833.0], [35.0, 29867.0], [34.0, 30704.0], [37.0, 31308.0], [36.0, 28822.0], [39.0, 30470.0], [38.0, 31282.0], [41.0, 31142.0], [40.0, 31297.0], [43.0, 30164.0], [42.0, 31701.0], [45.0, 31018.0], [44.0, 33708.0], [47.0, 30875.0], [46.0, 32406.0], [49.0, 32746.0], [48.0, 32037.5], [51.0, 36074.0], [50.0, 35160.0], [53.0, 37346.0], [52.0, 35846.0], [55.0, 35259.0], [54.0, 38462.0], [57.0, 34645.0], [56.0, 35289.0], [59.0, 35929.0], [58.0, 36018.0], [61.0, 38272.0], [60.0, 35068.0], [63.0, 35855.0], [62.0, 37044.0], [67.0, 42767.0], [66.0, 36325.0], [65.0, 37970.0], [64.0, 38218.0], [71.0, 39184.0], [70.0, 40404.0], [69.0, 37643.0], [68.0, 37080.0], [75.0, 41056.0], [74.0, 37588.0], [73.0, 37755.0], [72.0, 44698.0], [79.0, 46082.0], [78.0, 44339.0], [77.0, 41795.0], [83.0, 44487.5], [82.0, 43171.0], [81.0, 44519.5], [80.0, 45017.0], [87.0, 44224.5], [85.0, 46904.5], [84.0, 42988.0], [91.0, 45827.0], [90.0, 44873.333333333336], [89.0, 25417.0], [88.0, 45350.5], [95.0, 45226.666666666664], [94.0, 29257.5], [93.0, 47236.0], [92.0, 45839.5], [99.0, 44736.0], [98.0, 46448.0], [97.0, 46169.0], [96.0, 45318.0], [103.0, 45552.0], [102.0, 45761.0], [101.0, 45950.0], [100.0, 12365.0], [107.0, 46104.5], [105.0, 38160.0], [104.0, 29811.5], [110.0, 47350.0], [109.0, 46375.0], [114.0, 48786.0], [113.0, 47995.0], [112.0, 46710.5], [119.0, 46955.0], [118.0, 49896.5], [117.0, 47337.666666666664], [123.0, 50349.25], [122.0, 49605.333333333336], [121.0, 48684.0], [120.0, 48682.0], [127.0, 51567.5], [126.0, 45266.0], [125.0, 51087.0], [124.0, 50426.75], [135.0, 54467.0], [132.0, 42114.4], [130.0, 56566.75], [129.0, 53238.0], [128.0, 51723.666666666664], [143.0, 49507.833333333336], [142.0, 54838.2], [140.0, 52432.0], [139.0, 54669.25], [136.0, 52310.0], [151.0, 54739.333333333336], [150.0, 53504.0], [149.0, 52878.5], [148.0, 55233.0], [147.0, 46772.5], [146.0, 55009.16666666667], [144.0, 55663.0], [159.0, 53822.5], [158.0, 52454.0], [157.0, 59082.0], [156.0, 52381.0], [155.0, 52083.0], [154.0, 51960.0], [153.0, 59862.0], [152.0, 54261.5], [167.0, 54647.666666666664], [166.0, 54148.25], [165.0, 56007.0], [164.0, 45972.666666666664], [163.0, 53960.5], [162.0, 55796.2], [161.0, 54484.0], [160.0, 56516.0], [175.0, 54559.0], [173.0, 48755.0], [172.0, 59103.666666666664], [171.0, 49303.2], [169.0, 43479.0], [183.0, 55179.0], [181.0, 54546.2], [180.0, 54069.0], [179.0, 53248.0], [178.0, 53303.35714285715], [177.0, 54239.375], [191.0, 61426.0], [190.0, 54012.0], [189.0, 56941.0], [188.0, 54194.0], [187.0, 47148.5], [186.0, 56378.333333333336], [185.0, 55016.0], [184.0, 56204.444444444445], [199.0, 55469.4], [198.0, 53162.0], [197.0, 55887.6], [196.0, 55950.0], [195.0, 54236.0], [194.0, 54237.0], [193.0, 49530.2], [192.0, 56190.0], [207.0, 59455.0], [206.0, 49099.0], [205.0, 51648.5], [204.0, 63860.0], [203.0, 55507.71428571428], [202.0, 57135.57142857143], [201.0, 57332.666666666664], [200.0, 53118.5], [215.0, 53987.5], [214.0, 52913.5], [213.0, 45671.333333333336], [212.0, 50800.916666666664], [211.0, 55574.75], [210.0, 54661.21428571428], [209.0, 56241.0], [208.0, 55481.5], [223.0, 50422.2], [222.0, 37966.333333333336], [221.0, 46609.11111111111], [220.0, 52214.0], [219.0, 42661.25], [218.0, 49868.0], [217.0, 60622.0], [216.0, 58084.0], [231.0, 43892.26666666667], [230.0, 47694.75], [229.0, 52727.35714285714], [228.0, 49781.333333333336], [227.0, 49818.877551020414], [226.0, 56693.75], [225.0, 51607.79166666667], [224.0, 53714.33333333334], [239.0, 55169.28571428571], [238.0, 50870.899999999994], [237.0, 51371.92222222221], [236.0, 49285.82142857142], [235.0, 47829.230769230766], [234.0, 49663.73684210527], [233.0, 49030.125], [232.0, 50186.44444444446], [247.0, 38711.333333333336], [246.0, 48638.7], [245.0, 21508.222222222223], [243.0, 57052.8], [242.0, 41753.92307692307], [241.0, 58312.454545454544], [240.0, 46046.75], [250.0, 39009.41885625963], [249.0, 46232.08163265305], [248.0, 47185.78625954198], [1.0, 6042.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}, {"data": [[225.96120000000005, 43407.95160000003]], "isOverall": false, "label": "HTTP Request (Light image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1035.5666666666666, "minX": 1.7123565E12, "maxY": 52242.0, "series": [{"data": [[1.71235662E12, 4066.866666666667], [1.71235692E12, 1804.6], [1.71235674E12, 4998.666666666667], [1.71235656E12, 7005.166666666667], [1.71235686E12, 3374.0], [1.71235668E12, 5121.533333333334], [1.7123565E12, 4466.633333333333], [1.71235698E12, 1035.5666666666666], [1.7123568E12, 4080.0666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71235662E12, 49174.4], [1.71235692E12, 47534.23333333333], [1.71235674E12, 48355.51666666667], [1.71235656E12, 46101.45], [1.71235686E12, 48760.933333333334], [1.71235668E12, 47534.183333333334], [1.7123565E12, 3892.5833333333335], [1.71235698E12, 52242.0], [1.7123568E12, 47124.26666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235698E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 941.7391304347824, "minX": 1.7123565E12, "maxY": 52067.593625498, "series": [{"data": [[1.71235662E12, 47530.00000000001], [1.71235692E12, 52067.593625498], [1.71235674E12, 47591.31790123456], [1.71235656E12, 31888.738372093037], [1.71235686E12, 49523.30449826987], [1.71235668E12, 46107.015576324], [1.7123565E12, 941.7391304347824], [1.71235698E12, 42743.66666666668], [1.7123568E12, 48790.22818791942]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235698E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 411.99999999999994, "minX": 1.7123565E12, "maxY": 50495.92430278888, "series": [{"data": [[1.71235662E12, 43083.33333333332], [1.71235692E12, 50495.92430278888], [1.71235674E12, 41780.47530864198], [1.71235656E12, 24354.229651162786], [1.71235686E12, 45731.80276816607], [1.71235668E12, 40222.98130841126], [1.7123565E12, 411.99999999999994], [1.71235698E12, 42743.57254901963], [1.7123568E12, 43881.84563758391]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235698E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 239.3565217391304, "minX": 1.7123565E12, "maxY": 6063.635802469135, "series": [{"data": [[1.71235662E12, 2658.9801980198013], [1.71235692E12, 2610.5179282868544], [1.71235674E12, 6063.635802469135], [1.71235656E12, 1173.1831395348838], [1.71235686E12, 4237.474048442904], [1.71235668E12, 5654.171339563864], [1.7123565E12, 239.3565217391304], [1.71235698E12, 376.59215686274524], [1.7123568E12, 5280.58053691275]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235698E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6042.0, "minX": 1.7123565E12, "maxY": 78441.0, "series": [{"data": [[1.71235662E12, 69396.0], [1.71235692E12, 70155.0], [1.71235674E12, 78441.0], [1.71235656E12, 67393.0], [1.71235686E12, 72412.0], [1.71235668E12, 71157.0], [1.7123565E12, 8512.0], [1.71235698E12, 67605.0], [1.7123568E12, 77074.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71235662E12, 51016.0], [1.71235692E12, 50322.0], [1.71235674E12, 50844.0], [1.71235656E12, 9278.0], [1.71235686E12, 49946.0], [1.71235668E12, 50832.0], [1.7123565E12, 7165.0], [1.71235698E12, 6042.0], [1.7123568E12, 51335.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71235662E12, 59342.0], [1.71235692E12, 59891.7], [1.71235674E12, 63995.8], [1.71235656E12, 55877.7], [1.71235686E12, 65437.4], [1.71235668E12, 64669.3], [1.7123565E12, 8512.0], [1.71235698E12, 54880.0], [1.7123568E12, 63578.600000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71235662E12, 68887.43], [1.71235692E12, 69891.29], [1.71235674E12, 77650.32], [1.71235656E12, 66542.56999999998], [1.71235686E12, 71770.04999999999], [1.71235668E12, 70726.81000000001], [1.7123565E12, 8512.0], [1.71235698E12, 60517.9], [1.7123568E12, 74435.96000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71235662E12, 54756.0], [1.71235692E12, 54606.0], [1.71235674E12, 56138.0], [1.71235656E12, 38176.0], [1.71235686E12, 54964.0], [1.71235668E12, 54826.5], [1.7123565E12, 7951.0], [1.71235698E12, 46822.5], [1.7123568E12, 56278.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71235662E12, 61752.299999999996], [1.71235692E12, 61944.65], [1.71235674E12, 69192.4], [1.71235656E12, 59329.4], [1.71235686E12, 68466.09999999999], [1.71235668E12, 68496.05], [1.7123565E12, 8512.0], [1.71235698E12, 56512.0], [1.7123568E12, 68957.9]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235698E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 670.0, "minX": 1.0, "maxY": 56367.0, "series": [{"data": [[2.0, 53942.0], [8.0, 54100.0], [35.0, 55395.5], [9.0, 54935.0], [40.0, 42829.0], [41.0, 55472.0], [10.0, 54057.0], [11.0, 55092.0], [3.0, 54085.5], [12.0, 54769.0], [52.0, 23313.5], [13.0, 56170.0], [14.0, 56367.0], [15.0, 55841.0], [1.0, 54153.0], [4.0, 54265.5], [16.0, 24615.0], [5.0, 54534.0], [6.0, 54480.0], [7.0, 54272.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21042.0], [8.0, 21048.0], [35.0, 19222.0], [9.0, 21048.0], [40.0, 20351.0], [41.0, 22384.0], [10.0, 21041.0], [11.0, 21040.5], [3.0, 21064.0], [12.0, 21026.0], [52.0, 22401.0], [13.0, 26374.0], [14.0, 21029.0], [15.0, 20216.5], [1.0, 21036.0], [4.0, 21051.0], [16.0, 26395.0], [5.0, 21044.0], [6.0, 21047.0], [104.0, 670.0], [7.0, 21056.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 104.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 56367.0, "series": [{"data": [[2.0, 53942.0], [8.0, 54100.0], [35.0, 55395.5], [9.0, 54935.0], [40.0, 42829.0], [41.0, 55472.0], [10.0, 54057.0], [11.0, 55092.0], [3.0, 54085.5], [12.0, 54769.0], [52.0, 23313.5], [13.0, 56170.0], [14.0, 56367.0], [15.0, 55841.0], [1.0, 54153.0], [4.0, 54265.5], [16.0, 24615.0], [5.0, 54534.0], [6.0, 54480.0], [7.0, 54272.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [8.0, 0.0], [35.0, 0.0], [9.0, 0.0], [40.0, 0.0], [41.0, 0.0], [10.0, 0.0], [11.0, 0.0], [3.0, 0.0], [12.0, 0.0], [52.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [4.0, 0.0], [16.0, 0.0], [5.0, 0.0], [6.0, 0.0], [104.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 104.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.7123565E12, "maxY": 6.083333333333333, "series": [{"data": [[1.71235662E12, 5.05], [1.71235692E12, 3.216666666666667], [1.71235674E12, 5.366666666666666], [1.71235656E12, 5.733333333333333], [1.71235686E12, 4.616666666666666], [1.71235668E12, 5.35], [1.7123565E12, 6.083333333333333], [1.71235698E12, 1.5], [1.7123568E12, 4.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235698E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7123565E12, "maxY": 4.066666666666666, "series": [{"data": [[1.71235662E12, 3.7666666666666666], [1.71235692E12, 3.6666666666666665], [1.71235674E12, 3.85], [1.71235656E12, 3.6666666666666665], [1.71235686E12, 3.7666666666666666], [1.71235668E12, 3.7], [1.7123565E12, 0.05], [1.71235698E12, 4.066666666666666], [1.7123568E12, 3.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71235662E12, 0.23333333333333334], [1.71235692E12, 0.2], [1.71235674E12, 0.08333333333333333], [1.71235656E12, 0.08333333333333333], [1.71235686E12, 0.2], [1.71235668E12, 0.16666666666666666], [1.7123565E12, 0.26666666666666666], [1.71235698E12, 0.18333333333333332], [1.7123568E12, 0.13333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71235662E12, 0.35], [1.71235692E12, 0.26666666666666666], [1.71235674E12, 1.0166666666666666], [1.71235656E12, 0.016666666666666666], [1.71235686E12, 0.48333333333333334], [1.71235668E12, 0.8666666666666667], [1.7123568E12, 0.75]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.71235662E12, 0.7], [1.71235692E12, 0.05], [1.71235674E12, 0.45], [1.71235656E12, 1.9666666666666666], [1.71235686E12, 0.36666666666666664], [1.71235668E12, 0.6166666666666667], [1.7123565E12, 1.6], [1.7123568E12, 0.38333333333333336]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235698E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.7123565E12, "maxY": 4.066666666666666, "series": [{"data": [[1.71235662E12, 1.2833333333333334], [1.71235692E12, 0.5166666666666667], [1.71235674E12, 1.55], [1.71235656E12, 2.066666666666667], [1.71235686E12, 1.05], [1.71235668E12, 1.65], [1.7123565E12, 1.8666666666666667], [1.71235698E12, 0.18333333333333332], [1.7123568E12, 1.2666666666666666]], "isOverall": false, "label": "HTTP Request (Light image)-failure", "isController": false}, {"data": [[1.71235662E12, 3.7666666666666666], [1.71235692E12, 3.6666666666666665], [1.71235674E12, 3.85], [1.71235656E12, 3.6666666666666665], [1.71235686E12, 3.7666666666666666], [1.71235668E12, 3.7], [1.7123565E12, 0.05], [1.71235698E12, 4.066666666666666], [1.7123568E12, 3.7]], "isOverall": false, "label": "HTTP Request (Light image)-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235698E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.7123565E12, "maxY": 4.066666666666666, "series": [{"data": [[1.71235662E12, 3.7666666666666666], [1.71235692E12, 3.6666666666666665], [1.71235674E12, 3.85], [1.71235656E12, 3.6666666666666665], [1.71235686E12, 3.7666666666666666], [1.71235668E12, 3.7], [1.7123565E12, 0.05], [1.71235698E12, 4.066666666666666], [1.7123568E12, 3.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71235662E12, 1.2833333333333334], [1.71235692E12, 0.5166666666666667], [1.71235674E12, 1.55], [1.71235656E12, 2.066666666666667], [1.71235686E12, 1.05], [1.71235668E12, 1.65], [1.7123565E12, 1.8666666666666667], [1.71235698E12, 0.18333333333333332], [1.7123568E12, 1.2666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235698E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

