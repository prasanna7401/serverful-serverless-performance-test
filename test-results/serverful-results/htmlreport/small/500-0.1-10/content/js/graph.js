/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 353.0, "minX": 0.0, "maxY": 76597.0, "series": [{"data": [[0.0, 353.0], [0.1, 354.0], [0.2, 355.0], [0.3, 357.0], [0.4, 365.0], [0.5, 367.0], [0.6, 373.0], [0.7, 374.0], [0.8, 375.0], [0.9, 375.0], [1.0, 376.0], [1.1, 377.0], [1.2, 377.0], [1.3, 378.0], [1.4, 378.0], [1.5, 378.0], [1.6, 379.0], [1.7, 379.0], [1.8, 381.0], [1.9, 381.0], [2.0, 384.0], [2.1, 385.0], [2.2, 386.0], [2.3, 386.0], [2.4, 388.0], [2.5, 388.0], [2.6, 388.0], [2.7, 591.0], [2.8, 593.0], [2.9, 596.0], [3.0, 598.0], [3.1, 603.0], [3.2, 604.0], [3.3, 606.0], [3.4, 606.0], [3.5, 611.0], [3.6, 613.0], [3.7, 617.0], [3.8, 618.0], [3.9, 1603.0], [4.0, 5168.0], [4.1, 7838.0], [4.2, 9513.0], [4.3, 10338.0], [4.4, 10391.0], [4.5, 10660.0], [4.6, 11212.0], [4.7, 11419.0], [4.8, 12038.0], [4.9, 12942.0], [5.0, 13093.0], [5.1, 13593.0], [5.2, 13597.0], [5.3, 13607.0], [5.4, 13921.0], [5.5, 14345.0], [5.6, 14772.0], [5.7, 15444.0], [5.8, 15789.0], [5.9, 16489.0], [6.0, 17382.0], [6.1, 18087.0], [6.2, 18329.0], [6.3, 19181.0], [6.4, 19181.0], [6.5, 19190.0], [6.6, 19194.0], [6.7, 19197.0], [6.8, 19198.0], [6.9, 19200.0], [7.0, 19201.0], [7.1, 19201.0], [7.2, 19202.0], [7.3, 19204.0], [7.4, 19205.0], [7.5, 19207.0], [7.6, 19210.0], [7.7, 19214.0], [7.8, 19214.0], [7.9, 19216.0], [8.0, 19216.0], [8.1, 19217.0], [8.2, 19219.0], [8.3, 19221.0], [8.4, 19221.0], [8.5, 19222.0], [8.6, 19222.0], [8.7, 19226.0], [8.8, 19229.0], [8.9, 19231.0], [9.0, 19232.0], [9.1, 19232.0], [9.2, 19246.0], [9.3, 19247.0], [9.4, 19247.0], [9.5, 19254.0], [9.6, 19263.0], [9.7, 19264.0], [9.8, 19265.0], [9.9, 20075.0], [10.0, 20212.0], [10.1, 20212.0], [10.2, 20217.0], [10.3, 20220.0], [10.4, 20226.0], [10.5, 20229.0], [10.6, 20237.0], [10.7, 20243.0], [10.8, 20247.0], [10.9, 20249.0], [11.0, 20254.0], [11.1, 20266.0], [11.2, 20288.0], [11.3, 20532.0], [11.4, 20895.0], [11.5, 21018.0], [11.6, 21024.0], [11.7, 21024.0], [11.8, 21026.0], [11.9, 21027.0], [12.0, 21028.0], [12.1, 21029.0], [12.2, 21029.0], [12.3, 21030.0], [12.4, 21031.0], [12.5, 21031.0], [12.6, 21031.0], [12.7, 21032.0], [12.8, 21032.0], [12.9, 21033.0], [13.0, 21033.0], [13.1, 21034.0], [13.2, 21034.0], [13.3, 21034.0], [13.4, 21035.0], [13.5, 21035.0], [13.6, 21036.0], [13.7, 21036.0], [13.8, 21036.0], [13.9, 21036.0], [14.0, 21037.0], [14.1, 21037.0], [14.2, 21037.0], [14.3, 21037.0], [14.4, 21037.0], [14.5, 21037.0], [14.6, 21037.0], [14.7, 21038.0], [14.8, 21038.0], [14.9, 21038.0], [15.0, 21038.0], [15.1, 21038.0], [15.2, 21038.0], [15.3, 21039.0], [15.4, 21039.0], [15.5, 21039.0], [15.6, 21039.0], [15.7, 21039.0], [15.8, 21039.0], [15.9, 21040.0], [16.0, 21040.0], [16.1, 21040.0], [16.2, 21040.0], [16.3, 21040.0], [16.4, 21040.0], [16.5, 21040.0], [16.6, 21040.0], [16.7, 21040.0], [16.8, 21040.0], [16.9, 21041.0], [17.0, 21041.0], [17.1, 21041.0], [17.2, 21041.0], [17.3, 21041.0], [17.4, 21042.0], [17.5, 21042.0], [17.6, 21042.0], [17.7, 21042.0], [17.8, 21042.0], [17.9, 21043.0], [18.0, 21043.0], [18.1, 21044.0], [18.2, 21044.0], [18.3, 21045.0], [18.4, 21045.0], [18.5, 21045.0], [18.6, 21045.0], [18.7, 21045.0], [18.8, 21045.0], [18.9, 21045.0], [19.0, 21046.0], [19.1, 21046.0], [19.2, 21046.0], [19.3, 21046.0], [19.4, 21047.0], [19.5, 21047.0], [19.6, 21047.0], [19.7, 21047.0], [19.8, 21048.0], [19.9, 21048.0], [20.0, 21048.0], [20.1, 21048.0], [20.2, 21049.0], [20.3, 21049.0], [20.4, 21049.0], [20.5, 21049.0], [20.6, 21050.0], [20.7, 21050.0], [20.8, 21050.0], [20.9, 21050.0], [21.0, 21051.0], [21.1, 21051.0], [21.2, 21051.0], [21.3, 21051.0], [21.4, 21052.0], [21.5, 21052.0], [21.6, 21053.0], [21.7, 21053.0], [21.8, 21053.0], [21.9, 21053.0], [22.0, 21054.0], [22.1, 21054.0], [22.2, 21054.0], [22.3, 21054.0], [22.4, 21054.0], [22.5, 21054.0], [22.6, 21054.0], [22.7, 21055.0], [22.8, 21055.0], [22.9, 21056.0], [23.0, 21056.0], [23.1, 21056.0], [23.2, 21057.0], [23.3, 21058.0], [23.4, 21059.0], [23.5, 21060.0], [23.6, 21062.0], [23.7, 21064.0], [23.8, 21067.0], [23.9, 21071.0], [24.0, 21415.0], [24.1, 22124.0], [24.2, 22362.0], [24.3, 22369.0], [24.4, 22372.0], [24.5, 22377.0], [24.6, 22384.0], [24.7, 22384.0], [24.8, 22386.0], [24.9, 22387.0], [25.0, 22402.0], [25.1, 22414.0], [25.2, 22417.0], [25.3, 22448.0], [25.4, 23563.0], [25.5, 24224.0], [25.6, 24939.0], [25.7, 25057.0], [25.8, 25081.0], [25.9, 25191.0], [26.0, 25804.0], [26.1, 26341.0], [26.2, 26358.0], [26.3, 26363.0], [26.4, 26370.0], [26.5, 26374.0], [26.6, 26375.0], [26.7, 26383.0], [26.8, 26384.0], [26.9, 26385.0], [27.0, 26389.0], [27.1, 26393.0], [27.2, 26397.0], [27.3, 26406.0], [27.4, 26416.0], [27.5, 26811.0], [27.6, 27156.0], [27.7, 27408.0], [27.8, 28119.0], [27.9, 28138.0], [28.0, 28345.0], [28.1, 28508.0], [28.2, 29107.0], [28.3, 29517.0], [28.4, 29888.0], [28.5, 30052.0], [28.6, 30718.0], [28.7, 30817.0], [28.8, 30947.0], [28.9, 31147.0], [29.0, 31280.0], [29.1, 31423.0], [29.2, 31615.0], [29.3, 31673.0], [29.4, 31944.0], [29.5, 32118.0], [29.6, 32384.0], [29.7, 32451.0], [29.8, 32539.0], [29.9, 32625.0], [30.0, 32720.0], [30.1, 32844.0], [30.2, 32918.0], [30.3, 33003.0], [30.4, 33059.0], [30.5, 33181.0], [30.6, 33298.0], [30.7, 33452.0], [30.8, 33825.0], [30.9, 33949.0], [31.0, 34137.0], [31.1, 34179.0], [31.2, 34303.0], [31.3, 34306.0], [31.4, 34372.0], [31.5, 34396.0], [31.6, 34405.0], [31.7, 34407.0], [31.8, 34453.0], [31.9, 34520.0], [32.0, 34820.0], [32.1, 34894.0], [32.2, 35076.0], [32.3, 35179.0], [32.4, 35288.0], [32.5, 35546.0], [32.6, 35641.0], [32.7, 36076.0], [32.8, 36305.0], [32.9, 36555.0], [33.0, 36600.0], [33.1, 36620.0], [33.2, 36787.0], [33.3, 36856.0], [33.4, 36951.0], [33.5, 37115.0], [33.6, 37404.0], [33.7, 37686.0], [33.8, 37909.0], [33.9, 37979.0], [34.0, 38183.0], [34.1, 38242.0], [34.2, 38432.0], [34.3, 38465.0], [34.4, 38839.0], [34.5, 38915.0], [34.6, 39152.0], [34.7, 39409.0], [34.8, 39546.0], [34.9, 39765.0], [35.0, 39801.0], [35.1, 39816.0], [35.2, 39945.0], [35.3, 40576.0], [35.4, 41052.0], [35.5, 41251.0], [35.6, 41525.0], [35.7, 41557.0], [35.8, 41922.0], [35.9, 42173.0], [36.0, 42303.0], [36.1, 42471.0], [36.2, 42742.0], [36.3, 43111.0], [36.4, 43913.0], [36.5, 43950.0], [36.6, 44256.0], [36.7, 44383.0], [36.8, 44763.0], [36.9, 45018.0], [37.0, 45120.0], [37.1, 45247.0], [37.2, 45298.0], [37.3, 45545.0], [37.4, 45642.0], [37.5, 45701.0], [37.6, 45757.0], [37.7, 45799.0], [37.8, 45935.0], [37.9, 46092.0], [38.0, 46135.0], [38.1, 46162.0], [38.2, 46335.0], [38.3, 46363.0], [38.4, 46579.0], [38.5, 46608.0], [38.6, 46802.0], [38.7, 46882.0], [38.8, 46966.0], [38.9, 47246.0], [39.0, 47510.0], [39.1, 47654.0], [39.2, 47821.0], [39.3, 47922.0], [39.4, 48028.0], [39.5, 48238.0], [39.6, 48490.0], [39.7, 48626.0], [39.8, 48666.0], [39.9, 48738.0], [40.0, 48754.0], [40.1, 48765.0], [40.2, 48866.0], [40.3, 49186.0], [40.4, 49247.0], [40.5, 49302.0], [40.6, 49394.0], [40.7, 49442.0], [40.8, 49465.0], [40.9, 49578.0], [41.0, 49747.0], [41.1, 49854.0], [41.2, 49958.0], [41.3, 49981.0], [41.4, 50042.0], [41.5, 50091.0], [41.6, 50124.0], [41.7, 50148.0], [41.8, 50194.0], [41.9, 50217.0], [42.0, 50310.0], [42.1, 50321.0], [42.2, 50344.0], [42.3, 50361.0], [42.4, 50399.0], [42.5, 50404.0], [42.6, 50478.0], [42.7, 50510.0], [42.8, 50541.0], [42.9, 50562.0], [43.0, 50571.0], [43.1, 50592.0], [43.2, 50604.0], [43.3, 50628.0], [43.4, 50652.0], [43.5, 50684.0], [43.6, 50689.0], [43.7, 50735.0], [43.8, 50782.0], [43.9, 50795.0], [44.0, 50824.0], [44.1, 50853.0], [44.2, 50868.0], [44.3, 50878.0], [44.4, 50938.0], [44.5, 50983.0], [44.6, 51019.0], [44.7, 51033.0], [44.8, 51057.0], [44.9, 51077.0], [45.0, 51103.0], [45.1, 51124.0], [45.2, 51145.0], [45.3, 51156.0], [45.4, 51195.0], [45.5, 51195.0], [45.6, 51223.0], [45.7, 51231.0], [45.8, 51246.0], [45.9, 51286.0], [46.0, 51299.0], [46.1, 51315.0], [46.2, 51355.0], [46.3, 51370.0], [46.4, 51398.0], [46.5, 51401.0], [46.6, 51422.0], [46.7, 51427.0], [46.8, 51438.0], [46.9, 51475.0], [47.0, 51493.0], [47.1, 51496.0], [47.2, 51513.0], [47.3, 51538.0], [47.4, 51554.0], [47.5, 51570.0], [47.6, 51591.0], [47.7, 51600.0], [47.8, 51608.0], [47.9, 51612.0], [48.0, 51623.0], [48.1, 51633.0], [48.2, 51649.0], [48.3, 51666.0], [48.4, 51691.0], [48.5, 51704.0], [48.6, 51734.0], [48.7, 51739.0], [48.8, 51745.0], [48.9, 51752.0], [49.0, 51757.0], [49.1, 51767.0], [49.2, 51790.0], [49.3, 51805.0], [49.4, 51847.0], [49.5, 51861.0], [49.6, 51869.0], [49.7, 51880.0], [49.8, 51888.0], [49.9, 51907.0], [50.0, 51932.0], [50.1, 51934.0], [50.2, 51962.0], [50.3, 51969.0], [50.4, 51978.0], [50.5, 52007.0], [50.6, 52050.0], [50.7, 52055.0], [50.8, 52069.0], [50.9, 52082.0], [51.0, 52096.0], [51.1, 52103.0], [51.2, 52119.0], [51.3, 52138.0], [51.4, 52148.0], [51.5, 52159.0], [51.6, 52170.0], [51.7, 52170.0], [51.8, 52193.0], [51.9, 52200.0], [52.0, 52207.0], [52.1, 52215.0], [52.2, 52231.0], [52.3, 52255.0], [52.4, 52290.0], [52.5, 52303.0], [52.6, 52311.0], [52.7, 52316.0], [52.8, 52327.0], [52.9, 52355.0], [53.0, 52370.0], [53.1, 52388.0], [53.2, 52398.0], [53.3, 52403.0], [53.4, 52411.0], [53.5, 52426.0], [53.6, 52430.0], [53.7, 52433.0], [53.8, 52436.0], [53.9, 52439.0], [54.0, 52447.0], [54.1, 52453.0], [54.2, 52471.0], [54.3, 52492.0], [54.4, 52512.0], [54.5, 52518.0], [54.6, 52550.0], [54.7, 52571.0], [54.8, 52587.0], [54.9, 52596.0], [55.0, 52616.0], [55.1, 52627.0], [55.2, 52647.0], [55.3, 52654.0], [55.4, 52661.0], [55.5, 52677.0], [55.6, 52686.0], [55.7, 52698.0], [55.8, 52700.0], [55.9, 52723.0], [56.0, 52755.0], [56.1, 52767.0], [56.2, 52783.0], [56.3, 52785.0], [56.4, 52796.0], [56.5, 52804.0], [56.6, 52847.0], [56.7, 52849.0], [56.8, 52873.0], [56.9, 52884.0], [57.0, 52905.0], [57.1, 52919.0], [57.2, 52919.0], [57.3, 52929.0], [57.4, 52942.0], [57.5, 52948.0], [57.6, 52962.0], [57.7, 52982.0], [57.8, 53011.0], [57.9, 53020.0], [58.0, 53068.0], [58.1, 53074.0], [58.2, 53098.0], [58.3, 53100.0], [58.4, 53132.0], [58.5, 53143.0], [58.6, 53157.0], [58.7, 53179.0], [58.8, 53208.0], [58.9, 53221.0], [59.0, 53240.0], [59.1, 53251.0], [59.2, 53273.0], [59.3, 53285.0], [59.4, 53300.0], [59.5, 53328.0], [59.6, 53363.0], [59.7, 53366.0], [59.8, 53400.0], [59.9, 53401.0], [60.0, 53412.0], [60.1, 53421.0], [60.2, 53446.0], [60.3, 53449.0], [60.4, 53452.0], [60.5, 53459.0], [60.6, 53478.0], [60.7, 53483.0], [60.8, 53493.0], [60.9, 53508.0], [61.0, 53529.0], [61.1, 53531.0], [61.2, 53540.0], [61.3, 53545.0], [61.4, 53561.0], [61.5, 53564.0], [61.6, 53573.0], [61.7, 53596.0], [61.8, 53609.0], [61.9, 53620.0], [62.0, 53629.0], [62.1, 53639.0], [62.2, 53672.0], [62.3, 53675.0], [62.4, 53697.0], [62.5, 53706.0], [62.6, 53730.0], [62.7, 53733.0], [62.8, 53760.0], [62.9, 53785.0], [63.0, 53799.0], [63.1, 53803.0], [63.2, 53830.0], [63.3, 53834.0], [63.4, 53877.0], [63.5, 53883.0], [63.6, 53890.0], [63.7, 53897.0], [63.8, 53916.0], [63.9, 53922.0], [64.0, 53929.0], [64.1, 53930.0], [64.2, 53945.0], [64.3, 53956.0], [64.4, 53974.0], [64.5, 53992.0], [64.6, 54006.0], [64.7, 54012.0], [64.8, 54026.0], [64.9, 54053.0], [65.0, 54067.0], [65.1, 54078.0], [65.2, 54088.0], [65.3, 54092.0], [65.4, 54124.0], [65.5, 54150.0], [65.6, 54158.0], [65.7, 54173.0], [65.8, 54185.0], [65.9, 54191.0], [66.0, 54198.0], [66.1, 54200.0], [66.2, 54230.0], [66.3, 54235.0], [66.4, 54252.0], [66.5, 54270.0], [66.6, 54287.0], [66.7, 54296.0], [66.8, 54301.0], [66.9, 54317.0], [67.0, 54325.0], [67.1, 54328.0], [67.2, 54348.0], [67.3, 54359.0], [67.4, 54382.0], [67.5, 54392.0], [67.6, 54405.0], [67.7, 54426.0], [67.8, 54445.0], [67.9, 54473.0], [68.0, 54504.0], [68.1, 54515.0], [68.2, 54521.0], [68.3, 54525.0], [68.4, 54548.0], [68.5, 54567.0], [68.6, 54574.0], [68.7, 54596.0], [68.8, 54613.0], [68.9, 54615.0], [69.0, 54630.0], [69.1, 54635.0], [69.2, 54652.0], [69.3, 54663.0], [69.4, 54699.0], [69.5, 54705.0], [69.6, 54716.0], [69.7, 54747.0], [69.8, 54769.0], [69.9, 54782.0], [70.0, 54797.0], [70.1, 54810.0], [70.2, 54828.0], [70.3, 54843.0], [70.4, 54894.0], [70.5, 54916.0], [70.6, 54945.0], [70.7, 54955.0], [70.8, 54985.0], [70.9, 55006.0], [71.0, 55008.0], [71.1, 55019.0], [71.2, 55025.0], [71.3, 55028.0], [71.4, 55031.0], [71.5, 55044.0], [71.6, 55048.0], [71.7, 55060.0], [71.8, 55066.0], [71.9, 55075.0], [72.0, 55086.0], [72.1, 55101.0], [72.2, 55112.0], [72.3, 55118.0], [72.4, 55129.0], [72.5, 55135.0], [72.6, 55141.0], [72.7, 55174.0], [72.8, 55180.0], [72.9, 55217.0], [73.0, 55230.0], [73.1, 55251.0], [73.2, 55264.0], [73.3, 55277.0], [73.4, 55301.0], [73.5, 55313.0], [73.6, 55321.0], [73.7, 55328.0], [73.8, 55346.0], [73.9, 55362.0], [74.0, 55366.0], [74.1, 55420.0], [74.2, 55438.0], [74.3, 55471.0], [74.4, 55476.0], [74.5, 55495.0], [74.6, 55514.0], [74.7, 55523.0], [74.8, 55525.0], [74.9, 55540.0], [75.0, 55550.0], [75.1, 55562.0], [75.2, 55572.0], [75.3, 55601.0], [75.4, 55611.0], [75.5, 55623.0], [75.6, 55635.0], [75.7, 55659.0], [75.8, 55670.0], [75.9, 55679.0], [76.0, 55691.0], [76.1, 55710.0], [76.2, 55722.0], [76.3, 55737.0], [76.4, 55746.0], [76.5, 55775.0], [76.6, 55778.0], [76.7, 55813.0], [76.8, 55833.0], [76.9, 55837.0], [77.0, 55854.0], [77.1, 55862.0], [77.2, 55877.0], [77.3, 55899.0], [77.4, 55934.0], [77.5, 55969.0], [77.6, 55980.0], [77.7, 55998.0], [77.8, 56021.0], [77.9, 56037.0], [78.0, 56045.0], [78.1, 56070.0], [78.2, 56134.0], [78.3, 56154.0], [78.4, 56160.0], [78.5, 56172.0], [78.6, 56206.0], [78.7, 56224.0], [78.8, 56240.0], [78.9, 56262.0], [79.0, 56279.0], [79.1, 56328.0], [79.2, 56333.0], [79.3, 56375.0], [79.4, 56384.0], [79.5, 56390.0], [79.6, 56417.0], [79.7, 56447.0], [79.8, 56453.0], [79.9, 56458.0], [80.0, 56478.0], [80.1, 56499.0], [80.2, 56513.0], [80.3, 56532.0], [80.4, 56543.0], [80.5, 56590.0], [80.6, 56623.0], [80.7, 56650.0], [80.8, 56667.0], [80.9, 56684.0], [81.0, 56705.0], [81.1, 56727.0], [81.2, 56747.0], [81.3, 56779.0], [81.4, 56801.0], [81.5, 56842.0], [81.6, 56851.0], [81.7, 56877.0], [81.8, 56925.0], [81.9, 56938.0], [82.0, 56952.0], [82.1, 57004.0], [82.2, 57020.0], [82.3, 57057.0], [82.4, 57100.0], [82.5, 57152.0], [82.6, 57157.0], [82.7, 57175.0], [82.8, 57222.0], [82.9, 57244.0], [83.0, 57261.0], [83.1, 57321.0], [83.2, 57368.0], [83.3, 57382.0], [83.4, 57383.0], [83.5, 57393.0], [83.6, 57428.0], [83.7, 57482.0], [83.8, 57487.0], [83.9, 57560.0], [84.0, 57579.0], [84.1, 57630.0], [84.2, 57650.0], [84.3, 57712.0], [84.4, 57740.0], [84.5, 57750.0], [84.6, 57774.0], [84.7, 57814.0], [84.8, 57838.0], [84.9, 57898.0], [85.0, 57941.0], [85.1, 57998.0], [85.2, 58059.0], [85.3, 58131.0], [85.4, 58155.0], [85.5, 58171.0], [85.6, 58210.0], [85.7, 58245.0], [85.8, 58286.0], [85.9, 58319.0], [86.0, 58367.0], [86.1, 58413.0], [86.2, 58414.0], [86.3, 58447.0], [86.4, 58473.0], [86.5, 58503.0], [86.6, 58542.0], [86.7, 58575.0], [86.8, 58600.0], [86.9, 58717.0], [87.0, 58796.0], [87.1, 58816.0], [87.2, 58858.0], [87.3, 58880.0], [87.4, 58915.0], [87.5, 58956.0], [87.6, 58977.0], [87.7, 59038.0], [87.8, 59054.0], [87.9, 59138.0], [88.0, 59187.0], [88.1, 59252.0], [88.2, 59267.0], [88.3, 59329.0], [88.4, 59344.0], [88.5, 59397.0], [88.6, 59403.0], [88.7, 59444.0], [88.8, 59472.0], [88.9, 59486.0], [89.0, 59508.0], [89.1, 59516.0], [89.2, 59541.0], [89.3, 59608.0], [89.4, 59618.0], [89.5, 59700.0], [89.6, 59838.0], [89.7, 59907.0], [89.8, 59924.0], [89.9, 59989.0], [90.0, 60008.0], [90.1, 60117.0], [90.2, 60126.0], [90.3, 60225.0], [90.4, 60243.0], [90.5, 60320.0], [90.6, 60340.0], [90.7, 60392.0], [90.8, 60395.0], [90.9, 60572.0], [91.0, 60594.0], [91.1, 60620.0], [91.2, 60667.0], [91.3, 60728.0], [91.4, 60739.0], [91.5, 60826.0], [91.6, 60863.0], [91.7, 60900.0], [91.8, 60931.0], [91.9, 60994.0], [92.0, 61026.0], [92.1, 61061.0], [92.2, 61082.0], [92.3, 61123.0], [92.4, 61152.0], [92.5, 61228.0], [92.6, 61364.0], [92.7, 61525.0], [92.8, 61603.0], [92.9, 61703.0], [93.0, 61783.0], [93.1, 61809.0], [93.2, 61848.0], [93.3, 61857.0], [93.4, 61896.0], [93.5, 62005.0], [93.6, 62116.0], [93.7, 62309.0], [93.8, 62389.0], [93.9, 62612.0], [94.0, 62660.0], [94.1, 62763.0], [94.2, 62831.0], [94.3, 62973.0], [94.4, 63010.0], [94.5, 63076.0], [94.6, 63211.0], [94.7, 63412.0], [94.8, 63668.0], [94.9, 63857.0], [95.0, 63956.0], [95.1, 64169.0], [95.2, 64206.0], [95.3, 64568.0], [95.4, 64686.0], [95.5, 65078.0], [95.6, 65224.0], [95.7, 65384.0], [95.8, 65574.0], [95.9, 65843.0], [96.0, 65893.0], [96.1, 66107.0], [96.2, 66224.0], [96.3, 66273.0], [96.4, 66352.0], [96.5, 66399.0], [96.6, 66423.0], [96.7, 66671.0], [96.8, 66744.0], [96.9, 67161.0], [97.0, 67251.0], [97.1, 67349.0], [97.2, 67367.0], [97.3, 67548.0], [97.4, 67563.0], [97.5, 67870.0], [97.6, 67989.0], [97.7, 68043.0], [97.8, 68046.0], [97.9, 68173.0], [98.0, 68442.0], [98.1, 68566.0], [98.2, 68770.0], [98.3, 68910.0], [98.4, 68978.0], [98.5, 69117.0], [98.6, 69208.0], [98.7, 69526.0], [98.8, 69721.0], [98.9, 69979.0], [99.0, 70096.0], [99.1, 70315.0], [99.2, 70403.0], [99.3, 70469.0], [99.4, 70778.0], [99.5, 71061.0], [99.6, 71381.0], [99.7, 71911.0], [99.8, 72669.0], [99.9, 74682.0], [100.0, 76597.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 312.0, "series": [{"data": [[66700.0, 2.0], [68300.0, 1.0], [69900.0, 2.0], [32900.0, 3.0], [34500.0, 2.0], [35300.0, 1.0], [37700.0, 1.0], [36900.0, 1.0], [38500.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [43300.0, 2.0], [45700.0, 6.0], [46500.0, 3.0], [47300.0, 1.0], [50500.0, 13.0], [49700.0, 2.0], [51300.0, 10.0], [52100.0, 21.0], [52900.0, 20.0], [54500.0, 19.0], [53700.0, 15.0], [56100.0, 11.0], [56900.0, 8.0], [55300.0, 18.0], [58500.0, 8.0], [57700.0, 11.0], [59300.0, 6.0], [60100.0, 5.0], [60900.0, 6.0], [61700.0, 4.0], [63300.0, 2.0], [62500.0, 1.0], [64900.0, 2.0], [64100.0, 2.0], [65800.0, 4.0], [67400.0, 2.0], [69000.0, 2.0], [300.0, 65.0], [400.0, 2.0], [500.0, 8.0], [600.0, 20.0], [700.0, 2.0], [1600.0, 1.0], [3000.0, 1.0], [68100.0, 2.0], [66500.0, 1.0], [69700.0, 2.0], [71300.0, 1.0], [5100.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7800.0, 1.0], [10600.0, 2.0], [11200.0, 3.0], [11400.0, 3.0], [12000.0, 3.0], [13000.0, 3.0], [13600.0, 3.0], [14800.0, 1.0], [15400.0, 2.0], [16200.0, 1.0], [16400.0, 1.0], [18000.0, 1.0], [18800.0, 1.0], [19200.0, 76.0], [20000.0, 2.0], [20800.0, 2.0], [22400.0, 9.0], [23200.0, 1.0], [23600.0, 1.0], [25200.0, 1.0], [26400.0, 4.0], [26800.0, 1.0], [28400.0, 1.0], [28000.0, 1.0], [29200.0, 1.0], [30400.0, 1.0], [30000.0, 1.0], [30800.0, 2.0], [31200.0, 4.0], [31600.0, 3.0], [32400.0, 3.0], [32000.0, 1.0], [34400.0, 8.0], [32800.0, 2.0], [33600.0, 1.0], [36800.0, 4.0], [36000.0, 1.0], [35200.0, 2.0], [38400.0, 3.0], [37600.0, 1.0], [39200.0, 1.0], [40000.0, 1.0], [42400.0, 1.0], [44800.0, 1.0], [44000.0, 1.0], [45600.0, 4.0], [48000.0, 4.0], [48800.0, 4.0], [47200.0, 2.0], [50400.0, 5.0], [49600.0, 1.0], [51200.0, 12.0], [52800.0, 13.0], [52000.0, 15.0], [54400.0, 11.0], [55200.0, 13.0], [53600.0, 18.0], [56000.0, 10.0], [56800.0, 9.0], [58400.0, 9.0], [57600.0, 5.0], [59200.0, 7.0], [60000.0, 4.0], [60800.0, 5.0], [61600.0, 3.0], [62400.0, 1.0], [63200.0, 1.0], [64000.0, 1.0], [68800.0, 1.0], [67200.0, 3.0], [65600.0, 2.0], [70400.0, 4.0], [67100.0, 2.0], [68700.0, 2.0], [71900.0, 1.0], [70300.0, 2.0], [33900.0, 1.0], [33100.0, 2.0], [35500.0, 1.0], [36300.0, 1.0], [37900.0, 3.0], [38700.0, 1.0], [37100.0, 1.0], [39500.0, 2.0], [42700.0, 2.0], [41900.0, 1.0], [44300.0, 2.0], [45900.0, 2.0], [45100.0, 3.0], [49100.0, 1.0], [47500.0, 2.0], [50700.0, 8.0], [49900.0, 4.0], [53100.0, 13.0], [52300.0, 20.0], [51500.0, 14.0], [54700.0, 16.0], [53900.0, 20.0], [55500.0, 19.0], [56300.0, 12.0], [57100.0, 9.0], [57900.0, 5.0], [58700.0, 5.0], [60300.0, 9.0], [61100.0, 7.0], [59500.0, 9.0], [61900.0, 2.0], [62700.0, 2.0], [65100.0, 1.0], [63500.0, 1.0], [66200.0, 4.0], [67800.0, 1.0], [72600.0, 1.0], [71000.0, 1.0], [68500.0, 2.0], [70100.0, 1.0], [73300.0, 1.0], [76500.0, 2.0], [17300.0, 1.0], [17700.0, 1.0], [18100.0, 1.0], [20500.0, 2.0], [22100.0, 1.0], [24900.0, 1.0], [25700.0, 1.0], [26900.0, 2.0], [28100.0, 5.0], [28500.0, 1.0], [29700.0, 1.0], [30900.0, 2.0], [32100.0, 2.0], [32500.0, 2.0], [33800.0, 2.0], [33000.0, 4.0], [34600.0, 1.0], [36200.0, 2.0], [37000.0, 1.0], [37800.0, 1.0], [39400.0, 2.0], [41000.0, 4.0], [41800.0, 1.0], [45000.0, 2.0], [44200.0, 2.0], [46600.0, 3.0], [45800.0, 1.0], [48200.0, 2.0], [50600.0, 12.0], [49800.0, 2.0], [51400.0, 17.0], [53000.0, 12.0], [52200.0, 14.0], [54600.0, 17.0], [53800.0, 18.0], [55400.0, 11.0], [56200.0, 12.0], [57000.0, 8.0], [57800.0, 7.0], [58600.0, 3.0], [59400.0, 10.0], [61000.0, 7.0], [60200.0, 4.0], [62600.0, 5.0], [61800.0, 9.0], [63400.0, 1.0], [64200.0, 2.0], [65000.0, 1.0], [67600.0, 2.0], [69200.0, 2.0], [66000.0, 1.0], [70800.0, 1.0], [67500.0, 3.0], [69100.0, 2.0], [72300.0, 1.0], [70700.0, 1.0], [34100.0, 3.0], [34900.0, 1.0], [36500.0, 4.0], [35700.0, 1.0], [38900.0, 2.0], [38100.0, 3.0], [37300.0, 1.0], [39700.0, 4.0], [40500.0, 1.0], [42100.0, 2.0], [42900.0, 1.0], [46100.0, 6.0], [46900.0, 2.0], [48500.0, 1.0], [50100.0, 8.0], [49300.0, 4.0], [50900.0, 7.0], [51700.0, 20.0], [52500.0, 15.0], [54900.0, 11.0], [54100.0, 19.0], [53300.0, 10.0], [56500.0, 10.0], [55700.0, 15.0], [57300.0, 11.0], [58900.0, 8.0], [58100.0, 7.0], [60500.0, 4.0], [59700.0, 2.0], [61300.0, 2.0], [62900.0, 3.0], [62100.0, 2.0], [65300.0, 1.0], [64500.0, 1.0], [66600.0, 1.0], [74600.0, 1.0], [68900.0, 3.0], [67300.0, 4.0], [70500.0, 1.0], [8700.0, 1.0], [9500.0, 2.0], [10300.0, 4.0], [10500.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13500.0, 4.0], [13900.0, 1.0], [14100.0, 1.0], [14300.0, 2.0], [14700.0, 2.0], [15700.0, 2.0], [16300.0, 1.0], [16600.0, 1.0], [17400.0, 1.0], [20200.0, 32.0], [20600.0, 1.0], [21000.0, 312.0], [21400.0, 2.0], [24200.0, 1.0], [25000.0, 5.0], [24600.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [28600.0, 1.0], [29800.0, 2.0], [31400.0, 2.0], [31000.0, 1.0], [32600.0, 4.0], [32200.0, 1.0], [34800.0, 4.0], [34000.0, 2.0], [33200.0, 3.0], [35600.0, 3.0], [38800.0, 2.0], [37200.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [45200.0, 5.0], [46800.0, 4.0], [46000.0, 2.0], [48400.0, 2.0], [47600.0, 2.0], [50800.0, 9.0], [50000.0, 6.0], [49200.0, 4.0], [52400.0, 27.0], [53200.0, 15.0], [51600.0, 20.0], [54800.0, 9.0], [54000.0, 19.0], [55600.0, 18.0], [57200.0, 9.0], [56400.0, 15.0], [58000.0, 3.0], [58800.0, 6.0], [59600.0, 5.0], [60400.0, 1.0], [61200.0, 1.0], [62800.0, 2.0], [62000.0, 2.0], [64400.0, 2.0], [63600.0, 2.0], [65200.0, 3.0], [66400.0, 3.0], [68000.0, 6.0], [69600.0, 1.0], [71200.0, 1.0], [66300.0, 5.0], [69500.0, 1.0], [67900.0, 2.0], [34300.0, 8.0], [33500.0, 1.0], [36700.0, 1.0], [35100.0, 3.0], [38300.0, 2.0], [39900.0, 3.0], [39100.0, 1.0], [41500.0, 4.0], [42300.0, 2.0], [43900.0, 4.0], [44700.0, 1.0], [43100.0, 1.0], [46300.0, 5.0], [45500.0, 1.0], [48700.0, 6.0], [47900.0, 2.0], [51100.0, 15.0], [50300.0, 11.0], [49500.0, 3.0], [52700.0, 18.0], [51900.0, 15.0], [53500.0, 21.0], [55100.0, 20.0], [54300.0, 20.0], [56700.0, 11.0], [55900.0, 10.0], [58300.0, 7.0], [57500.0, 5.0], [59100.0, 3.0], [60700.0, 6.0], [59900.0, 6.0], [62300.0, 3.0], [61500.0, 2.0], [63100.0, 1.0], [63900.0, 1.0], [65500.0, 1.0], [68600.0, 1.0], [67000.0, 1.0], [70200.0, 1.0], [69300.0, 1.0], [66100.0, 2.0], [70900.0, 1.0], [18300.0, 1.0], [19100.0, 15.0], [21100.0, 1.0], [21500.0, 1.0], [22300.0, 21.0], [23500.0, 2.0], [25100.0, 2.0], [24700.0, 1.0], [25900.0, 1.0], [26300.0, 30.0], [27100.0, 2.0], [26700.0, 1.0], [27500.0, 1.0], [28300.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [30700.0, 3.0], [29900.0, 1.0], [31500.0, 1.0], [31100.0, 1.0], [32700.0, 2.0], [31900.0, 3.0], [32300.0, 1.0], [34200.0, 2.0], [33400.0, 2.0], [36600.0, 5.0], [35000.0, 2.0], [38200.0, 2.0], [37400.0, 2.0], [39800.0, 3.0], [39000.0, 1.0], [42200.0, 2.0], [41400.0, 1.0], [47000.0, 1.0], [48600.0, 5.0], [47800.0, 2.0], [50200.0, 3.0], [51000.0, 9.0], [49400.0, 5.0], [52600.0, 21.0], [51800.0, 14.0], [53400.0, 27.0], [55000.0, 29.0], [54200.0, 17.0], [55800.0, 18.0], [56600.0, 10.0], [59000.0, 6.0], [57400.0, 7.0], [58200.0, 7.0], [60600.0, 6.0], [61400.0, 2.0], [59800.0, 3.0], [63000.0, 4.0], [62200.0, 1.0], [63800.0, 3.0], [65400.0, 1.0], [64600.0, 2.0], [68400.0, 2.0], [73200.0, 1.0], [71600.0, 2.0], [70000.0, 2.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 76500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 721.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1779.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1779.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 721.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 97.8930041152263, "minX": 1.71235704E12, "maxY": 250.0, "series": [{"data": [[1.7123571E12, 250.0], [1.7123574E12, 243.09265175718846], [1.71235722E12, 250.0], [1.71235704E12, 250.0], [1.71235752E12, 97.8930041152263], [1.71235734E12, 249.27217125382282], [1.71235716E12, 250.0], [1.71235746E12, 205.94052044609663], [1.71235728E12, 250.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235752E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1603.0, "minX": 1.0, "maxY": 65893.0, "series": [{"data": [[2.0, 7105.0], [3.0, 5168.0], [4.0, 7475.0], [5.0, 9551.0], [6.0, 7838.0], [7.0, 10547.0], [8.0, 10384.0], [9.0, 11208.0], [10.0, 13601.0], [11.0, 23594.5], [12.0, 20519.0], [13.0, 25081.0], [14.0, 15433.0], [15.0, 28508.0], [16.0, 27156.0], [17.0, 24740.0], [18.0, 27577.0], [19.0, 25287.0], [20.0, 26811.0], [21.0, 26782.0], [22.0, 28087.0], [23.0, 28746.0], [24.0, 28156.0], [25.0, 29957.0], [26.0, 29834.0], [28.0, 31664.5], [29.0, 29107.0], [30.0, 31673.0], [31.0, 31147.0], [33.0, 34029.0], [32.0, 32618.0], [35.0, 33026.0], [34.0, 31615.0], [37.0, 33059.0], [36.0, 30817.0], [39.0, 35179.0], [38.0, 34179.0], [41.0, 35929.5], [40.0, 35212.0], [42.0, 36555.0], [45.0, 34630.0], [44.0, 37250.0], [47.0, 38173.0], [46.0, 34520.0], [49.0, 37416.0], [48.0, 38432.0], [51.0, 39409.0], [50.0, 38839.0], [53.0, 40380.0], [52.0, 39935.0], [55.0, 39152.0], [54.0, 39758.5], [57.0, 39546.0], [56.0, 39068.0], [59.0, 41526.0], [58.0, 39740.0], [61.0, 43396.0], [60.0, 39250.0], [63.0, 44357.5], [62.0, 43111.0], [67.0, 41950.0], [66.0, 42858.333333333336], [65.0, 44290.0], [64.0, 42564.0], [71.0, 45820.0], [70.0, 44467.0], [69.0, 46541.0], [68.0, 44256.0], [75.0, 44343.0], [72.0, 46067.0], [78.0, 45865.0], [77.0, 46162.0], [76.0, 45298.0], [83.0, 45545.0], [82.0, 45099.0], [81.0, 33863.333333333336], [87.0, 46092.0], [86.0, 46666.5], [85.0, 45712.0], [84.0, 47510.0], [90.0, 45164.0], [89.0, 46132.0], [88.0, 13113.0], [95.0, 46024.2], [97.0, 45918.0], [96.0, 45258.0], [103.0, 49233.0], [102.0, 46802.0], [101.0, 46307.0], [100.0, 48005.666666666664], [107.0, 45885.0], [104.0, 47021.5], [110.0, 48738.0], [109.0, 34575.0], [108.0, 45754.0], [115.0, 48028.0], [114.0, 47626.0], [113.0, 48471.666666666664], [119.0, 56623.5], [118.0, 47394.333333333336], [117.0, 46579.0], [116.0, 21026.0], [123.0, 53018.5], [122.0, 50669.75], [120.0, 47228.0], [127.0, 51683.333333333336], [126.0, 52286.333333333336], [124.0, 52126.333333333336], [135.0, 53358.5], [134.0, 57639.333333333336], [132.0, 54520.0], [131.0, 50990.0], [130.0, 51632.333333333336], [129.0, 56581.333333333336], [128.0, 50874.0], [143.0, 52258.5], [141.0, 52327.0], [140.0, 51805.5], [139.0, 52805.0], [138.0, 52217.5], [137.0, 65893.0], [136.0, 52801.5], [151.0, 56733.0], [147.0, 53708.75], [146.0, 51049.666666666664], [145.0, 47239.25], [144.0, 62116.0], [159.0, 57459.5], [158.0, 48765.555555555555], [156.0, 44572.666666666664], [155.0, 44452.666666666664], [154.0, 53088.0], [153.0, 50409.0], [152.0, 51506.0], [167.0, 52571.0], [166.0, 50795.0], [165.0, 54814.75], [164.0, 53457.333333333336], [163.0, 50953.666666666664], [162.0, 53418.0], [161.0, 52511.5], [160.0, 52248.0], [174.0, 57224.0], [173.0, 52470.0], [172.0, 45579.666666666664], [171.0, 52986.5], [170.0, 32854.0], [169.0, 51141.0], [168.0, 53056.5], [183.0, 57048.14285714286], [181.0, 56031.933333333334], [178.0, 59437.5], [177.0, 47254.0], [176.0, 52791.08333333333], [191.0, 53286.0], [190.0, 59395.4], [189.0, 57286.0], [188.0, 60572.0], [187.0, 55139.0], [186.0, 60485.8], [185.0, 57168.00000000001], [184.0, 54232.0], [198.0, 54531.0], [197.0, 57545.0], [196.0, 56870.545454545456], [194.0, 54389.0], [193.0, 52873.0], [192.0, 56905.2], [207.0, 43624.5], [206.0, 21040.0], [205.0, 53431.0], [204.0, 47398.625], [203.0, 57118.71428571429], [202.0, 58369.4], [201.0, 42723.0], [200.0, 54929.4], [215.0, 49728.25], [214.0, 46772.8], [213.0, 50153.5], [212.0, 61056.0], [211.0, 49700.428571428565], [210.0, 54145.0], [209.0, 37554.0], [208.0, 61896.0], [222.0, 21045.0], [221.0, 37366.25], [220.0, 55394.0], [219.0, 53147.0], [218.0, 50583.8], [217.0, 52860.0], [231.0, 62146.4], [230.0, 63825.5], [229.0, 56333.0], [228.0, 55159.0], [227.0, 52200.07142857143], [226.0, 55628.5], [225.0, 53729.222222222226], [239.0, 38065.0], [238.0, 53214.42857142857], [237.0, 44869.642857142855], [236.0, 47458.52173913043], [235.0, 34246.125], [233.0, 36340.2], [232.0, 50953.09523809524], [247.0, 46313.8642857143], [246.0, 45935.75], [245.0, 45660.89795918368], [244.0, 43088.666666666664], [243.0, 41345.76923076923], [242.0, 47404.63829787234], [241.0, 47404.87999999999], [240.0, 53033.666666666664], [250.0, 40849.23920051584], [249.0, 43070.91071428572], [248.0, 46313.77272727273], [1.0, 1603.0]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}, {"data": [[229.51439999999982, 43248.937200000095]], "isOverall": false, "label": "HTTP Request (Light image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 981.3, "minX": 1.71235704E12, "maxY": 50808.816666666666, "series": [{"data": [[1.7123571E12, 3479.5333333333333], [1.7123574E12, 4472.5], [1.71235722E12, 5361.166666666667], [1.71235704E12, 4152.933333333333], [1.71235752E12, 981.3], [1.71235734E12, 5225.9], [1.71235716E12, 4726.833333333333], [1.71235746E12, 2186.0666666666666], [1.71235728E12, 5057.933333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7123571E12, 43022.6], [1.7123574E12, 48961.166666666664], [1.71235722E12, 47743.21666666667], [1.71235704E12, 1228.95], [1.71235752E12, 49785.55], [1.71235734E12, 48557.15], [1.71235716E12, 49786.0], [1.71235746E12, 49996.933333333334], [1.71235728E12, 50808.816666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235752E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 450.9381443298968, "minX": 1.71235704E12, "maxY": 52274.88475836431, "series": [{"data": [[1.7123571E12, 32414.22519083971], [1.7123574E12, 46419.616613418526], [1.71235722E12, 46188.92987804879], [1.71235704E12, 450.9381443298968], [1.71235752E12, 43714.20164609054], [1.71235734E12, 44214.42201834862], [1.71235716E12, 47305.09202453986], [1.71235746E12, 52274.88475836431], [1.71235728E12, 45799.08955223881]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235752E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 32.11340206185567, "minX": 1.71235704E12, "maxY": 50329.78438661708, "series": [{"data": [[1.7123571E12, 28232.839694656494], [1.7123574E12, 41163.43130990415], [1.71235722E12, 40082.64024390245], [1.71235704E12, 32.11340206185567], [1.71235752E12, 43714.098765432136], [1.71235734E12, 38321.01529051987], [1.71235716E12, 41902.41104294476], [1.71235746E12, 50329.78438661708], [1.71235728E12, 40329.48656716416]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235752E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 224.98969072164948, "minX": 1.71235704E12, "maxY": 6440.570121951217, "series": [{"data": [[1.7123571E12, 1251.5229007633586], [1.7123574E12, 5121.1821086262], [1.71235722E12, 6440.570121951217], [1.71235704E12, 224.98969072164948], [1.71235752E12, 619.4115226337441], [1.71235734E12, 5785.0672782874635], [1.71235716E12, 5770.990797546013], [1.71235746E12, 3878.9070631970267], [1.71235728E12, 5677.011940298505]], "isOverall": false, "label": "HTTP Request (Light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235752E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1603.0, "minX": 1.7123571E12, "maxY": 76597.0, "series": [{"data": [[1.7123571E12, 60994.0], [1.7123574E12, 71286.0], [1.71235722E12, 72669.0], [1.71235752E12, 67367.0], [1.71235734E12, 73395.0], [1.71235716E12, 74682.0], [1.71235746E12, 76576.0], [1.71235728E12, 76597.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7123571E12, 10338.0], [1.7123574E12, 49186.0], [1.71235722E12, 50567.0], [1.71235752E12, 1603.0], [1.71235734E12, 48490.0], [1.71235716E12, 49342.0], [1.71235746E12, 50042.0], [1.71235728E12, 48691.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7123571E12, 56000.40000000004], [1.7123574E12, 61114.0], [1.71235722E12, 67944.2], [1.71235752E12, 53703.5], [1.71235734E12, 59673.8], [1.71235716E12, 63648.2], [1.71235746E12, 65424.000000000015], [1.71235728E12, 61673.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7123571E12, 60932.26], [1.7123574E12, 69124.0], [1.71235722E12, 72222.65], [1.71235752E12, 66338.1], [1.71235734E12, 70495.62999999998], [1.71235716E12, 72818.5], [1.71235746E12, 71005.0], [1.71235728E12, 70691.10999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7123571E12, 36856.0], [1.7123574E12, 53641.0], [1.71235722E12, 56478.0], [1.71235752E12, 47211.5], [1.71235734E12, 53412.5], [1.71235716E12, 55778.0], [1.71235746E12, 55301.0], [1.71235728E12, 54570.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7123571E12, 60211.799999999996], [1.7123574E12, 66224.75], [1.71235722E12, 69814.09999999999], [1.71235752E12, 58682.0], [1.71235734E12, 65313.64999999999], [1.71235716E12, 66629.49999999999], [1.71235746E12, 68064.6], [1.71235728E12, 66874.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235752E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 384.0, "minX": 1.0, "maxY": 62999.0, "series": [{"data": [[2.0, 53744.0], [8.0, 54153.0], [9.0, 53992.0], [10.0, 52817.0], [11.0, 55525.5], [3.0, 53354.0], [12.0, 53328.0], [13.0, 55827.0], [14.0, 56164.0], [4.0, 53854.0], [1.0, 52411.0], [18.0, 62999.0], [19.0, 42279.0], [5.0, 54157.0], [6.0, 53992.5], [7.0, 53895.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21043.0], [8.0, 21045.0], [9.0, 21043.0], [10.0, 21048.0], [11.0, 21054.0], [3.0, 21043.0], [12.0, 21039.0], [13.0, 21038.5], [14.0, 28965.0], [1.0, 20288.0], [4.0, 21049.0], [18.0, 21040.0], [19.0, 22402.0], [5.0, 21043.5], [97.0, 384.0], [24.0, 19221.5], [6.0, 21047.0], [7.0, 21049.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 62998.0, "series": [{"data": [[2.0, 53744.0], [8.0, 54153.0], [9.0, 53992.0], [10.0, 52817.0], [11.0, 55525.5], [3.0, 53354.0], [12.0, 53328.0], [13.0, 55827.0], [14.0, 56164.0], [4.0, 53853.0], [1.0, 52411.0], [18.0, 62998.0], [19.0, 42279.0], [5.0, 54157.0], [6.0, 53992.5], [7.0, 53895.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [3.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [1.0, 0.0], [4.0, 0.0], [18.0, 0.0], [19.0, 0.0], [5.0, 0.0], [97.0, 0.0], [24.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.71235704E12, "maxY": 5.783333333333333, "series": [{"data": [[1.7123571E12, 4.366666666666666], [1.7123574E12, 5.016666666666667], [1.71235722E12, 5.466666666666667], [1.71235704E12, 5.783333333333333], [1.71235752E12, 1.2833333333333334], [1.71235734E12, 5.4], [1.71235716E12, 5.433333333333334], [1.71235746E12, 3.3333333333333335], [1.71235728E12, 5.583333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235752E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.71235704E12, "maxY": 3.9, "series": [{"data": [[1.7123571E12, 3.283333333333333], [1.7123574E12, 3.7333333333333334], [1.71235722E12, 3.6], [1.71235752E12, 3.9], [1.71235734E12, 3.6], [1.71235716E12, 3.8833333333333333], [1.71235746E12, 3.783333333333333], [1.71235728E12, 3.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7123571E12, 0.21666666666666667], [1.7123574E12, 0.25], [1.71235722E12, 0.2833333333333333], [1.71235704E12, 0.1], [1.71235752E12, 0.15], [1.71235734E12, 0.35], [1.71235716E12, 0.16666666666666666], [1.71235746E12, 0.2833333333333333], [1.71235728E12, 0.26666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.7123571E12, 0.13333333333333333], [1.7123574E12, 0.7], [1.71235722E12, 1.0833333333333333], [1.71235734E12, 0.8833333333333333], [1.71235716E12, 1.15], [1.71235746E12, 0.25], [1.71235728E12, 0.9666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.7123571E12, 0.7333333333333333], [1.7123574E12, 0.5333333333333333], [1.71235722E12, 0.5], [1.71235704E12, 1.5166666666666666], [1.71235734E12, 0.6166666666666667], [1.71235716E12, 0.23333333333333334], [1.71235746E12, 0.16666666666666666], [1.71235728E12, 0.48333333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71235752E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71235704E12, "maxY": 3.9, "series": [{"data": [[1.7123571E12, 1.0833333333333333], [1.7123574E12, 1.4833333333333334], [1.71235722E12, 1.8666666666666667], [1.71235704E12, 1.6166666666666667], [1.71235752E12, 0.15], [1.71235734E12, 1.85], [1.71235716E12, 1.55], [1.71235746E12, 0.7], [1.71235728E12, 1.7166666666666666]], "isOverall": false, "label": "HTTP Request (Light image)-failure", "isController": false}, {"data": [[1.7123571E12, 3.283333333333333], [1.7123574E12, 3.7333333333333334], [1.71235722E12, 3.6], [1.71235752E12, 3.9], [1.71235734E12, 3.6], [1.71235716E12, 3.8833333333333333], [1.71235746E12, 3.783333333333333], [1.71235728E12, 3.8666666666666667]], "isOverall": false, "label": "HTTP Request (Light image)-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235752E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71235704E12, "maxY": 3.9, "series": [{"data": [[1.7123571E12, 3.283333333333333], [1.7123574E12, 3.7333333333333334], [1.71235722E12, 3.6], [1.71235752E12, 3.9], [1.71235734E12, 3.6], [1.71235716E12, 3.8833333333333333], [1.71235746E12, 3.783333333333333], [1.71235728E12, 3.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7123571E12, 1.0833333333333333], [1.7123574E12, 1.4833333333333334], [1.71235722E12, 1.8666666666666667], [1.71235704E12, 1.6166666666666667], [1.71235752E12, 0.15], [1.71235734E12, 1.85], [1.71235716E12, 1.55], [1.71235746E12, 0.7], [1.71235728E12, 1.7166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71235752E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

