/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 47702.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 5.0], [1.9, 5.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 9.0], [2.5, 10.0], [2.6, 21.0], [2.7, 27.0], [2.8, 28.0], [2.9, 28.0], [3.0, 33.0], [3.1, 64.0], [3.2, 74.0], [3.3, 75.0], [3.4, 75.0], [3.5, 75.0], [3.6, 75.0], [3.7, 75.0], [3.8, 81.0], [3.9, 87.0], [4.0, 105.0], [4.1, 110.0], [4.2, 135.0], [4.3, 208.0], [4.4, 270.0], [4.5, 328.0], [4.6, 329.0], [4.7, 388.0], [4.8, 421.0], [4.9, 455.0], [5.0, 540.0], [5.1, 600.0], [5.2, 601.0], [5.3, 639.0], [5.4, 688.0], [5.5, 716.0], [5.6, 727.0], [5.7, 736.0], [5.8, 742.0], [5.9, 803.0], [6.0, 854.0], [6.1, 885.0], [6.2, 890.0], [6.3, 899.0], [6.4, 910.0], [6.5, 937.0], [6.6, 953.0], [6.7, 1113.0], [6.8, 1158.0], [6.9, 1177.0], [7.0, 1315.0], [7.1, 1336.0], [7.2, 1403.0], [7.3, 1781.0], [7.4, 1818.0], [7.5, 1883.0], [7.6, 1890.0], [7.7, 1909.0], [7.8, 1911.0], [7.9, 1932.0], [8.0, 1936.0], [8.1, 1949.0], [8.2, 1962.0], [8.3, 1972.0], [8.4, 1982.0], [8.5, 1987.0], [8.6, 2008.0], [8.7, 2010.0], [8.8, 2061.0], [8.9, 2112.0], [9.0, 2187.0], [9.1, 2200.0], [9.2, 2301.0], [9.3, 2480.0], [9.4, 2773.0], [9.5, 2794.0], [9.6, 2889.0], [9.7, 2936.0], [9.8, 3065.0], [9.9, 3079.0], [10.0, 3087.0], [10.1, 3088.0], [10.2, 3101.0], [10.3, 3121.0], [10.4, 3136.0], [10.5, 3143.0], [10.6, 3156.0], [10.7, 3158.0], [10.8, 3172.0], [10.9, 3173.0], [11.0, 3181.0], [11.1, 3186.0], [11.2, 3206.0], [11.3, 3215.0], [11.4, 3231.0], [11.5, 3235.0], [11.6, 3245.0], [11.7, 3246.0], [11.8, 3247.0], [11.9, 3250.0], [12.0, 3252.0], [12.1, 3262.0], [12.2, 3287.0], [12.3, 3287.0], [12.4, 3290.0], [12.5, 3294.0], [12.6, 3300.0], [12.7, 3301.0], [12.8, 3302.0], [12.9, 3306.0], [13.0, 3317.0], [13.1, 3317.0], [13.2, 3320.0], [13.3, 3320.0], [13.4, 3360.0], [13.5, 3373.0], [13.6, 3389.0], [13.7, 3390.0], [13.8, 3390.0], [13.9, 3394.0], [14.0, 3408.0], [14.1, 3411.0], [14.2, 3411.0], [14.3, 3478.0], [14.4, 3538.0], [14.5, 3588.0], [14.6, 3595.0], [14.7, 3596.0], [14.8, 3619.0], [14.9, 3627.0], [15.0, 3630.0], [15.1, 3632.0], [15.2, 3636.0], [15.3, 3651.0], [15.4, 3671.0], [15.5, 3686.0], [15.6, 3686.0], [15.7, 3687.0], [15.8, 3687.0], [15.9, 3688.0], [16.0, 3690.0], [16.1, 3691.0], [16.2, 3693.0], [16.3, 3693.0], [16.4, 3731.0], [16.5, 3790.0], [16.6, 3833.0], [16.7, 3933.0], [16.8, 3990.0], [16.9, 4005.0], [17.0, 4005.0], [17.1, 4008.0], [17.2, 4022.0], [17.3, 4116.0], [17.4, 4117.0], [17.5, 4118.0], [17.6, 4150.0], [17.7, 4150.0], [17.8, 4162.0], [17.9, 4169.0], [18.0, 4171.0], [18.1, 4171.0], [18.2, 4174.0], [18.3, 4191.0], [18.4, 4212.0], [18.5, 4213.0], [18.6, 4233.0], [18.7, 4239.0], [18.8, 4275.0], [18.9, 4310.0], [19.0, 4322.0], [19.1, 4329.0], [19.2, 4379.0], [19.3, 4421.0], [19.4, 4451.0], [19.5, 4456.0], [19.6, 4459.0], [19.7, 4471.0], [19.8, 4510.0], [19.9, 4516.0], [20.0, 4525.0], [20.1, 4530.0], [20.2, 4559.0], [20.3, 4559.0], [20.4, 4561.0], [20.5, 4562.0], [20.6, 4564.0], [20.7, 4564.0], [20.8, 4565.0], [20.9, 4565.0], [21.0, 4565.0], [21.1, 4566.0], [21.2, 4568.0], [21.3, 4614.0], [21.4, 4646.0], [21.5, 4675.0], [21.6, 4723.0], [21.7, 4777.0], [21.8, 4846.0], [21.9, 4870.0], [22.0, 4878.0], [22.1, 4896.0], [22.2, 4907.0], [22.3, 4915.0], [22.4, 4934.0], [22.5, 4940.0], [22.6, 4948.0], [22.7, 5002.0], [22.8, 5032.0], [22.9, 5040.0], [23.0, 5064.0], [23.1, 5075.0], [23.2, 5093.0], [23.3, 5101.0], [23.4, 5112.0], [23.5, 5121.0], [23.6, 5157.0], [23.7, 5172.0], [23.8, 5202.0], [23.9, 5204.0], [24.0, 5207.0], [24.1, 5224.0], [24.2, 5254.0], [24.3, 5265.0], [24.4, 5267.0], [24.5, 5286.0], [24.6, 5300.0], [24.7, 5329.0], [24.8, 5352.0], [24.9, 5362.0], [25.0, 5368.0], [25.1, 5376.0], [25.2, 5397.0], [25.3, 5397.0], [25.4, 5431.0], [25.5, 5452.0], [25.6, 5482.0], [25.7, 5487.0], [25.8, 5489.0], [25.9, 5496.0], [26.0, 5550.0], [26.1, 5567.0], [26.2, 5612.0], [26.3, 5615.0], [26.4, 5680.0], [26.5, 5696.0], [26.6, 5700.0], [26.7, 5704.0], [26.8, 5731.0], [26.9, 5736.0], [27.0, 5737.0], [27.1, 5737.0], [27.2, 5738.0], [27.3, 5740.0], [27.4, 5742.0], [27.5, 5744.0], [27.6, 5753.0], [27.7, 5774.0], [27.8, 5783.0], [27.9, 5798.0], [28.0, 5807.0], [28.1, 5812.0], [28.2, 5825.0], [28.3, 5834.0], [28.4, 5861.0], [28.5, 5867.0], [28.6, 5926.0], [28.7, 5971.0], [28.8, 6016.0], [28.9, 6099.0], [29.0, 6106.0], [29.1, 6113.0], [29.2, 6131.0], [29.3, 6134.0], [29.4, 6136.0], [29.5, 6148.0], [29.6, 6156.0], [29.7, 6158.0], [29.8, 6160.0], [29.9, 6171.0], [30.0, 6197.0], [30.1, 6201.0], [30.2, 6211.0], [30.3, 6212.0], [30.4, 6212.0], [30.5, 6212.0], [30.6, 6214.0], [30.7, 6225.0], [30.8, 6231.0], [30.9, 6236.0], [31.0, 6245.0], [31.1, 6299.0], [31.2, 6561.0], [31.3, 6591.0], [31.4, 6660.0], [31.5, 6681.0], [31.6, 6791.0], [31.7, 6848.0], [31.8, 6874.0], [31.9, 6973.0], [32.0, 7008.0], [32.1, 7069.0], [32.2, 7107.0], [32.3, 7202.0], [32.4, 7248.0], [32.5, 7253.0], [32.6, 7321.0], [32.7, 7390.0], [32.8, 7393.0], [32.9, 7416.0], [33.0, 7431.0], [33.1, 7433.0], [33.2, 7492.0], [33.3, 7512.0], [33.4, 7532.0], [33.5, 7536.0], [33.6, 7577.0], [33.7, 7590.0], [33.8, 7600.0], [33.9, 7612.0], [34.0, 7623.0], [34.1, 7636.0], [34.2, 7686.0], [34.3, 7731.0], [34.4, 7787.0], [34.5, 7797.0], [34.6, 7840.0], [34.7, 7877.0], [34.8, 7898.0], [34.9, 7916.0], [35.0, 7919.0], [35.1, 7920.0], [35.2, 7946.0], [35.3, 7996.0], [35.4, 7999.0], [35.5, 8053.0], [35.6, 8139.0], [35.7, 8174.0], [35.8, 8189.0], [35.9, 8190.0], [36.0, 8263.0], [36.1, 8366.0], [36.2, 8379.0], [36.3, 8503.0], [36.4, 8599.0], [36.5, 8607.0], [36.6, 8634.0], [36.7, 8648.0], [36.8, 8650.0], [36.9, 8650.0], [37.0, 8656.0], [37.1, 8669.0], [37.2, 8759.0], [37.3, 8837.0], [37.4, 8909.0], [37.5, 8932.0], [37.6, 8937.0], [37.7, 8937.0], [37.8, 8937.0], [37.9, 8945.0], [38.0, 8966.0], [38.1, 8975.0], [38.2, 9007.0], [38.3, 9009.0], [38.4, 9039.0], [38.5, 9039.0], [38.6, 9063.0], [38.7, 9064.0], [38.8, 9068.0], [38.9, 9110.0], [39.0, 9115.0], [39.1, 9116.0], [39.2, 9146.0], [39.3, 9148.0], [39.4, 9150.0], [39.5, 9150.0], [39.6, 9168.0], [39.7, 9171.0], [39.8, 9234.0], [39.9, 9264.0], [40.0, 9311.0], [40.1, 9328.0], [40.2, 9330.0], [40.3, 9335.0], [40.4, 9389.0], [40.5, 9410.0], [40.6, 9424.0], [40.7, 9429.0], [40.8, 9445.0], [40.9, 9462.0], [41.0, 9508.0], [41.1, 9565.0], [41.2, 9624.0], [41.3, 9663.0], [41.4, 9693.0], [41.5, 9696.0], [41.6, 9719.0], [41.7, 9727.0], [41.8, 9731.0], [41.9, 9760.0], [42.0, 9816.0], [42.1, 9845.0], [42.2, 9885.0], [42.3, 9920.0], [42.4, 10161.0], [42.5, 10167.0], [42.6, 10240.0], [42.7, 10285.0], [42.8, 10388.0], [42.9, 10436.0], [43.0, 10439.0], [43.1, 10439.0], [43.2, 10440.0], [43.3, 10442.0], [43.4, 10442.0], [43.5, 10443.0], [43.6, 10445.0], [43.7, 10463.0], [43.8, 10465.0], [43.9, 10465.0], [44.0, 10477.0], [44.1, 10485.0], [44.2, 10493.0], [44.3, 10493.0], [44.4, 10517.0], [44.5, 10518.0], [44.6, 10531.0], [44.7, 10537.0], [44.8, 10544.0], [44.9, 10544.0], [45.0, 10552.0], [45.1, 10552.0], [45.2, 10562.0], [45.3, 10593.0], [45.4, 10610.0], [45.5, 10612.0], [45.6, 10615.0], [45.7, 10618.0], [45.8, 10638.0], [45.9, 10662.0], [46.0, 10664.0], [46.1, 10665.0], [46.2, 10720.0], [46.3, 10723.0], [46.4, 10817.0], [46.5, 10817.0], [46.6, 10822.0], [46.7, 10822.0], [46.8, 10896.0], [46.9, 10898.0], [47.0, 10913.0], [47.1, 10921.0], [47.2, 10968.0], [47.3, 10997.0], [47.4, 11019.0], [47.5, 11022.0], [47.6, 11104.0], [47.7, 11137.0], [47.8, 11154.0], [47.9, 11168.0], [48.0, 11177.0], [48.1, 11220.0], [48.2, 11220.0], [48.3, 11220.0], [48.4, 11275.0], [48.5, 11300.0], [48.6, 11306.0], [48.7, 11309.0], [48.8, 11326.0], [48.9, 11332.0], [49.0, 11344.0], [49.1, 11353.0], [49.2, 11367.0], [49.3, 11373.0], [49.4, 11378.0], [49.5, 11385.0], [49.6, 11393.0], [49.7, 11393.0], [49.8, 11416.0], [49.9, 11420.0], [50.0, 11435.0], [50.1, 11439.0], [50.2, 11456.0], [50.3, 11472.0], [50.4, 11473.0], [50.5, 11517.0], [50.6, 11553.0], [50.7, 11555.0], [50.8, 11559.0], [50.9, 11582.0], [51.0, 11602.0], [51.1, 11606.0], [51.2, 11606.0], [51.3, 11606.0], [51.4, 11610.0], [51.5, 11610.0], [51.6, 11661.0], [51.7, 11662.0], [51.8, 11663.0], [51.9, 11669.0], [52.0, 11681.0], [52.1, 11707.0], [52.2, 11730.0], [52.3, 11755.0], [52.4, 11792.0], [52.5, 11859.0], [52.6, 11860.0], [52.7, 11893.0], [52.8, 11921.0], [52.9, 11939.0], [53.0, 11956.0], [53.1, 11959.0], [53.2, 11968.0], [53.3, 11969.0], [53.4, 11983.0], [53.5, 11998.0], [53.6, 12010.0], [53.7, 12018.0], [53.8, 12052.0], [53.9, 12060.0], [54.0, 12078.0], [54.1, 12109.0], [54.2, 12166.0], [54.3, 12208.0], [54.4, 12246.0], [54.5, 12286.0], [54.6, 12316.0], [54.7, 12352.0], [54.8, 12420.0], [54.9, 12483.0], [55.0, 12575.0], [55.1, 12592.0], [55.2, 12605.0], [55.3, 12610.0], [55.4, 12637.0], [55.5, 12680.0], [55.6, 12687.0], [55.7, 12687.0], [55.8, 12697.0], [55.9, 12700.0], [56.0, 12702.0], [56.1, 12747.0], [56.2, 12761.0], [56.3, 12773.0], [56.4, 12828.0], [56.5, 12831.0], [56.6, 12888.0], [56.7, 12895.0], [56.8, 12981.0], [56.9, 13007.0], [57.0, 13014.0], [57.1, 13025.0], [57.2, 13041.0], [57.3, 13058.0], [57.4, 13058.0], [57.5, 13085.0], [57.6, 13096.0], [57.7, 13121.0], [57.8, 13139.0], [57.9, 13156.0], [58.0, 13184.0], [58.1, 13184.0], [58.2, 13199.0], [58.3, 13222.0], [58.4, 13225.0], [58.5, 13226.0], [58.6, 13229.0], [58.7, 13243.0], [58.8, 13249.0], [58.9, 13260.0], [59.0, 13267.0], [59.1, 13292.0], [59.2, 13320.0], [59.3, 13330.0], [59.4, 13365.0], [59.5, 13369.0], [59.6, 13408.0], [59.7, 13412.0], [59.8, 13429.0], [59.9, 13438.0], [60.0, 13455.0], [60.1, 13457.0], [60.2, 13469.0], [60.3, 13479.0], [60.4, 13499.0], [60.5, 13500.0], [60.6, 13508.0], [60.7, 13509.0], [60.8, 13522.0], [60.9, 13525.0], [61.0, 13539.0], [61.1, 13540.0], [61.2, 13542.0], [61.3, 13548.0], [61.4, 13552.0], [61.5, 13564.0], [61.6, 13609.0], [61.7, 13648.0], [61.8, 13677.0], [61.9, 13701.0], [62.0, 13709.0], [62.1, 13711.0], [62.2, 13720.0], [62.3, 13728.0], [62.4, 13730.0], [62.5, 13752.0], [62.6, 13755.0], [62.7, 13758.0], [62.8, 13771.0], [62.9, 13772.0], [63.0, 13774.0], [63.1, 13774.0], [63.2, 13776.0], [63.3, 13786.0], [63.4, 13788.0], [63.5, 13788.0], [63.6, 13796.0], [63.7, 13797.0], [63.8, 13798.0], [63.9, 13799.0], [64.0, 13801.0], [64.1, 13801.0], [64.2, 13803.0], [64.3, 13804.0], [64.4, 13806.0], [64.5, 13808.0], [64.6, 13809.0], [64.7, 13826.0], [64.8, 13867.0], [64.9, 13878.0], [65.0, 13891.0], [65.1, 13900.0], [65.2, 13903.0], [65.3, 13929.0], [65.4, 13997.0], [65.5, 14006.0], [65.6, 14025.0], [65.7, 14031.0], [65.8, 14043.0], [65.9, 14079.0], [66.0, 14291.0], [66.1, 14305.0], [66.2, 14395.0], [66.3, 14396.0], [66.4, 14430.0], [66.5, 14470.0], [66.6, 14500.0], [66.7, 14523.0], [66.8, 14540.0], [66.9, 14587.0], [67.0, 14635.0], [67.1, 14675.0], [67.2, 14682.0], [67.3, 14728.0], [67.4, 14831.0], [67.5, 14959.0], [67.6, 15002.0], [67.7, 15037.0], [67.8, 15056.0], [67.9, 15087.0], [68.0, 15133.0], [68.1, 15133.0], [68.2, 15166.0], [68.3, 15221.0], [68.4, 15275.0], [68.5, 15285.0], [68.6, 15351.0], [68.7, 15352.0], [68.8, 15360.0], [68.9, 15361.0], [69.0, 15377.0], [69.1, 15385.0], [69.2, 15463.0], [69.3, 15486.0], [69.4, 15534.0], [69.5, 15550.0], [69.6, 15568.0], [69.7, 15574.0], [69.8, 15584.0], [69.9, 15647.0], [70.0, 15676.0], [70.1, 15681.0], [70.2, 15695.0], [70.3, 15708.0], [70.4, 15721.0], [70.5, 15748.0], [70.6, 15799.0], [70.7, 15802.0], [70.8, 15808.0], [70.9, 15825.0], [71.0, 15910.0], [71.1, 15921.0], [71.2, 16074.0], [71.3, 16080.0], [71.4, 16137.0], [71.5, 16156.0], [71.6, 16329.0], [71.7, 16747.0], [71.8, 16990.0], [71.9, 17032.0], [72.0, 17033.0], [72.1, 17046.0], [72.2, 17046.0], [72.3, 17046.0], [72.4, 17086.0], [72.5, 17127.0], [72.6, 17142.0], [72.7, 17319.0], [72.8, 17481.0], [72.9, 17609.0], [73.0, 17745.0], [73.1, 17891.0], [73.2, 17976.0], [73.3, 17992.0], [73.4, 18004.0], [73.5, 18005.0], [73.6, 18184.0], [73.7, 18187.0], [73.8, 18209.0], [73.9, 18274.0], [74.0, 18304.0], [74.1, 18346.0], [74.2, 18431.0], [74.3, 18442.0], [74.4, 18456.0], [74.5, 18624.0], [74.6, 18684.0], [74.7, 18725.0], [74.8, 18780.0], [74.9, 18799.0], [75.0, 18828.0], [75.1, 18871.0], [75.2, 18923.0], [75.3, 18969.0], [75.4, 19010.0], [75.5, 19076.0], [75.6, 19115.0], [75.7, 19150.0], [75.8, 19152.0], [75.9, 19213.0], [76.0, 19230.0], [76.1, 19231.0], [76.2, 19298.0], [76.3, 19301.0], [76.4, 19331.0], [76.5, 19354.0], [76.6, 19409.0], [76.7, 19442.0], [76.8, 19443.0], [76.9, 19445.0], [77.0, 19468.0], [77.1, 19523.0], [77.2, 19576.0], [77.3, 19685.0], [77.4, 19749.0], [77.5, 19775.0], [77.6, 19825.0], [77.7, 19871.0], [77.8, 19885.0], [77.9, 19906.0], [78.0, 19919.0], [78.1, 19969.0], [78.2, 19973.0], [78.3, 20020.0], [78.4, 20086.0], [78.5, 20096.0], [78.6, 20101.0], [78.7, 20102.0], [78.8, 20105.0], [78.9, 20113.0], [79.0, 20128.0], [79.1, 20185.0], [79.2, 20185.0], [79.3, 20192.0], [79.4, 20208.0], [79.5, 20289.0], [79.6, 20323.0], [79.7, 20485.0], [79.8, 20527.0], [79.9, 20572.0], [80.0, 20608.0], [80.1, 20610.0], [80.2, 20618.0], [80.3, 20625.0], [80.4, 20670.0], [80.5, 20826.0], [80.6, 20827.0], [80.7, 20871.0], [80.8, 20932.0], [80.9, 20980.0], [81.0, 20994.0], [81.1, 21097.0], [81.2, 21116.0], [81.3, 21250.0], [81.4, 21295.0], [81.5, 21297.0], [81.6, 21309.0], [81.7, 21462.0], [81.8, 21471.0], [81.9, 21471.0], [82.0, 21618.0], [82.1, 21731.0], [82.2, 22059.0], [82.3, 22060.0], [82.4, 22060.0], [82.5, 22218.0], [82.6, 22702.0], [82.7, 22999.0], [82.8, 23126.0], [82.9, 23145.0], [83.0, 23145.0], [83.1, 23284.0], [83.2, 23317.0], [83.3, 23346.0], [83.4, 23439.0], [83.5, 23582.0], [83.6, 23645.0], [83.7, 23733.0], [83.8, 23898.0], [83.9, 24025.0], [84.0, 24029.0], [84.1, 24220.0], [84.2, 24241.0], [84.3, 24249.0], [84.4, 24269.0], [84.5, 24270.0], [84.6, 24271.0], [84.7, 24271.0], [84.8, 24271.0], [84.9, 24272.0], [85.0, 24272.0], [85.1, 24272.0], [85.2, 24274.0], [85.3, 24278.0], [85.4, 24292.0], [85.5, 24300.0], [85.6, 24383.0], [85.7, 24389.0], [85.8, 24406.0], [85.9, 24413.0], [86.0, 24417.0], [86.1, 24456.0], [86.2, 24484.0], [86.3, 24550.0], [86.4, 24769.0], [86.5, 24884.0], [86.6, 24890.0], [86.7, 24897.0], [86.8, 25009.0], [86.9, 25055.0], [87.0, 25174.0], [87.1, 25177.0], [87.2, 25179.0], [87.3, 25303.0], [87.4, 25308.0], [87.5, 25320.0], [87.6, 25320.0], [87.7, 25333.0], [87.8, 25333.0], [87.9, 25347.0], [88.0, 25392.0], [88.1, 25566.0], [88.2, 25590.0], [88.3, 25711.0], [88.4, 25815.0], [88.5, 25903.0], [88.6, 26102.0], [88.7, 26857.0], [88.8, 26909.0], [88.9, 27115.0], [89.0, 27122.0], [89.1, 27258.0], [89.2, 27432.0], [89.3, 28403.0], [89.4, 28404.0], [89.5, 28901.0], [89.6, 29173.0], [89.7, 29391.0], [89.8, 29959.0], [89.9, 31734.0], [90.0, 32341.0], [90.1, 33310.0], [90.2, 36927.0], [90.3, 37195.0], [90.4, 39206.0], [90.5, 39408.0], [90.6, 40043.0], [90.7, 40247.0], [90.8, 41485.0], [90.9, 41931.0], [91.0, 42267.0], [91.1, 43131.0], [91.2, 43132.0], [91.3, 43132.0], [91.4, 43134.0], [91.5, 43136.0], [91.6, 43137.0], [91.7, 43138.0], [91.8, 43138.0], [91.9, 43139.0], [92.0, 43140.0], [92.1, 43141.0], [92.2, 43141.0], [92.3, 43142.0], [92.4, 43142.0], [92.5, 43144.0], [92.6, 43145.0], [92.7, 43385.0], [92.8, 43387.0], [92.9, 43392.0], [93.0, 43392.0], [93.1, 43393.0], [93.2, 43397.0], [93.3, 44069.0], [93.4, 44274.0], [93.5, 44927.0], [93.6, 44932.0], [93.7, 44936.0], [93.8, 44937.0], [93.9, 44967.0], [94.0, 44967.0], [94.1, 44970.0], [94.2, 44971.0], [94.3, 44972.0], [94.4, 44973.0], [94.5, 44973.0], [94.6, 44975.0], [94.7, 44975.0], [94.8, 44975.0], [94.9, 44976.0], [95.0, 44977.0], [95.1, 44977.0], [95.2, 44978.0], [95.3, 44979.0], [95.4, 44980.0], [95.5, 44980.0], [95.6, 44981.0], [95.7, 44982.0], [95.8, 45337.0], [95.9, 47362.0], [96.0, 47362.0], [96.1, 47366.0], [96.2, 47366.0], [96.3, 47367.0], [96.4, 47368.0], [96.5, 47368.0], [96.6, 47369.0], [96.7, 47370.0], [96.8, 47370.0], [96.9, 47370.0], [97.0, 47372.0], [97.1, 47374.0], [97.2, 47374.0], [97.3, 47375.0], [97.4, 47375.0], [97.5, 47376.0], [97.6, 47377.0], [97.7, 47377.0], [97.8, 47377.0], [97.9, 47379.0], [98.0, 47380.0], [98.1, 47381.0], [98.2, 47382.0], [98.3, 47388.0], [98.4, 47389.0], [98.5, 47396.0], [98.6, 47397.0], [98.7, 47582.0], [98.8, 47594.0], [98.9, 47688.0], [99.0, 47689.0], [99.1, 47692.0], [99.2, 47692.0], [99.3, 47692.0], [99.4, 47694.0], [99.5, 47695.0], [99.6, 47695.0], [99.7, 47696.0], [99.8, 47698.0], [99.9, 47702.0], [100.0, 47702.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 98.0, "series": [{"data": [[0.0, 98.0], [100.0, 9.0], [33300.0, 1.0], [36900.0, 3.0], [43300.0, 14.0], [44900.0, 58.0], [45300.0, 1.0], [47300.0, 71.0], [47700.0, 3.0], [200.0, 3.0], [300.0, 8.0], [400.0, 6.0], [500.0, 2.0], [600.0, 9.0], [700.0, 11.0], [800.0, 12.0], [900.0, 8.0], [1000.0, 1.0], [1100.0, 6.0], [1200.0, 1.0], [1300.0, 5.0], [1400.0, 2.0], [1500.0, 1.0], [1700.0, 2.0], [1800.0, 7.0], [1900.0, 23.0], [2000.0, 8.0], [2100.0, 5.0], [2300.0, 1.0], [2200.0, 3.0], [2400.0, 2.0], [2600.0, 1.0], [2800.0, 3.0], [2700.0, 4.0], [2900.0, 3.0], [3000.0, 11.0], [3100.0, 23.0], [3200.0, 37.0], [3300.0, 34.0], [3400.0, 10.0], [3500.0, 10.0], [3700.0, 3.0], [3600.0, 41.0], [3800.0, 4.0], [3900.0, 5.0], [4000.0, 9.0], [4300.0, 10.0], [4100.0, 28.0], [4200.0, 13.0], [4500.0, 38.0], [4400.0, 12.0], [4600.0, 8.0], [4800.0, 9.0], [4700.0, 4.0], [5100.0, 13.0], [4900.0, 14.0], [5000.0, 15.0], [5200.0, 20.0], [5300.0, 18.0], [5400.0, 15.0], [5600.0, 11.0], [5500.0, 6.0], [5800.0, 17.0], [5700.0, 33.0], [6100.0, 28.0], [5900.0, 4.0], [6000.0, 4.0], [6200.0, 27.0], [6600.0, 5.0], [6500.0, 5.0], [6800.0, 5.0], [6900.0, 4.0], [6700.0, 3.0], [7000.0, 5.0], [7100.0, 2.0], [7200.0, 8.0], [7400.0, 10.0], [7300.0, 6.0], [7600.0, 13.0], [7500.0, 13.0], [7900.0, 15.0], [7700.0, 6.0], [7800.0, 9.0], [8000.0, 3.0], [8100.0, 9.0], [8500.0, 4.0], [8600.0, 17.0], [8300.0, 5.0], [8700.0, 3.0], [8200.0, 2.0], [8400.0, 1.0], [9100.0, 22.0], [9000.0, 17.0], [8800.0, 4.0], [8900.0, 19.0], [9200.0, 7.0], [9400.0, 13.0], [9600.0, 10.0], [9300.0, 12.0], [9500.0, 5.0], [9700.0, 10.0], [9800.0, 7.0], [9900.0, 1.0], [10200.0, 5.0], [10000.0, 1.0], [10100.0, 4.0], [10300.0, 3.0], [10400.0, 38.0], [10500.0, 24.0], [10600.0, 21.0], [10700.0, 5.0], [11200.0, 10.0], [10800.0, 15.0], [11100.0, 12.0], [10900.0, 9.0], [11000.0, 7.0], [11400.0, 18.0], [11500.0, 13.0], [11700.0, 9.0], [11600.0, 28.0], [11300.0, 31.0], [12000.0, 12.0], [12100.0, 6.0], [11800.0, 7.0], [11900.0, 21.0], [12200.0, 7.0], [12600.0, 17.0], [12700.0, 12.0], [12500.0, 7.0], [12300.0, 5.0], [12400.0, 4.0], [13000.0, 19.0], [13100.0, 15.0], [12900.0, 4.0], [13300.0, 11.0], [13200.0, 23.0], [12800.0, 9.0], [13400.0, 22.0], [13800.0, 28.0], [13500.0, 27.0], [13700.0, 52.0], [13600.0, 8.0], [13900.0, 10.0], [14000.0, 12.0], [14300.0, 7.0], [14200.0, 3.0], [14400.0, 6.0], [14500.0, 10.0], [14600.0, 6.0], [14700.0, 4.0], [14800.0, 2.0], [14900.0, 3.0], [15000.0, 8.0], [15100.0, 9.0], [15200.0, 8.0], [15300.0, 13.0], [15800.0, 9.0], [15600.0, 9.0], [15700.0, 10.0], [15500.0, 14.0], [15400.0, 5.0], [15900.0, 5.0], [16000.0, 5.0], [16300.0, 2.0], [16200.0, 2.0], [16100.0, 3.0], [17400.0, 3.0], [17000.0, 16.0], [17200.0, 1.0], [18400.0, 6.0], [17800.0, 2.0], [18200.0, 7.0], [18000.0, 4.0], [17600.0, 2.0], [19400.0, 13.0], [18600.0, 5.0], [19000.0, 4.0], [18800.0, 5.0], [19200.0, 9.0], [20200.0, 4.0], [19600.0, 2.0], [19800.0, 8.0], [20000.0, 8.0], [20400.0, 2.0], [20800.0, 7.0], [21200.0, 7.0], [21400.0, 8.0], [21000.0, 3.0], [20600.0, 11.0], [22000.0, 7.0], [21600.0, 3.0], [22200.0, 1.0], [23200.0, 2.0], [22800.0, 2.0], [23000.0, 1.0], [23400.0, 4.0], [24400.0, 11.0], [24000.0, 3.0], [24200.0, 34.0], [23800.0, 1.0], [23600.0, 2.0], [25000.0, 4.0], [24800.0, 6.0], [25400.0, 1.0], [25800.0, 3.0], [26000.0, 1.0], [25600.0, 2.0], [27000.0, 1.0], [27200.0, 3.0], [26800.0, 2.0], [27400.0, 1.0], [28400.0, 4.0], [28800.0, 1.0], [32600.0, 2.0], [39200.0, 3.0], [40000.0, 3.0], [42000.0, 1.0], [44000.0, 2.0], [47600.0, 26.0], [35100.0, 1.0], [37100.0, 1.0], [38300.0, 1.0], [41900.0, 1.0], [43100.0, 41.0], [43900.0, 1.0], [43500.0, 1.0], [47500.0, 5.0], [16700.0, 1.0], [16900.0, 3.0], [17100.0, 4.0], [17300.0, 2.0], [17700.0, 2.0], [17900.0, 6.0], [18300.0, 5.0], [18100.0, 5.0], [19100.0, 8.0], [18700.0, 6.0], [19300.0, 8.0], [18900.0, 6.0], [18500.0, 1.0], [19500.0, 5.0], [20300.0, 3.0], [19900.0, 9.0], [19700.0, 6.0], [20100.0, 20.0], [20500.0, 6.0], [21300.0, 1.0], [20900.0, 7.0], [21100.0, 4.0], [20700.0, 1.0], [22100.0, 1.0], [21700.0, 3.0], [22300.0, 1.0], [22900.0, 1.0], [23300.0, 5.0], [23100.0, 7.0], [23500.0, 1.0], [22700.0, 1.0], [23900.0, 2.0], [23700.0, 4.0], [24500.0, 4.0], [24300.0, 9.0], [24100.0, 1.0], [25300.0, 18.0], [25500.0, 4.0], [24700.0, 3.0], [24900.0, 1.0], [25100.0, 9.0], [26100.0, 2.0], [25700.0, 2.0], [25900.0, 1.0], [26900.0, 3.0], [27100.0, 4.0], [28300.0, 2.0], [29300.0, 3.0], [29100.0, 2.0], [29500.0, 1.0], [28900.0, 1.0], [29900.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [31700.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [40200.0, 1.0], [39800.0, 1.0], [39400.0, 1.0], [42200.0, 1.0], [41400.0, 4.0], [44200.0, 2.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2499.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2499.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 148.5920398009951, "minX": 1.71244614E12, "maxY": 250.0, "series": [{"data": [[1.71244614E12, 250.0], [1.71244626E12, 245.42833333333303], [1.71244632E12, 148.5920398009951], [1.7124462E12, 250.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244632E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1894.3333333333333, "minX": 1.0, "maxY": 25347.5, "series": [{"data": [[4.0, 9745.666666666666], [5.0, 11792.0], [6.0, 10477.0], [7.0, 10612.0], [8.0, 4666.0], [9.0, 5658.0], [10.0, 10498.0], [11.0, 4768.0], [12.0, 11651.0], [13.0, 9508.0], [14.0, 9392.0], [15.0, 9445.0], [16.0, 9311.0], [17.0, 10921.0], [18.0, 8909.0], [19.0, 8837.0], [20.0, 8263.0], [21.0, 7840.0], [22.0, 7262.0], [24.0, 8034.5], [25.0, 8379.0], [26.0, 8374.0], [28.0, 7999.0], [31.0, 7916.666666666667], [33.0, 7898.0], [34.0, 7946.0], [36.0, 7919.0], [39.0, 7686.0], [38.0, 7880.0], [41.0, 7600.0], [43.0, 7612.0], [45.0, 7577.0], [47.0, 7431.0], [49.0, 7411.0], [48.0, 7183.333333333333], [51.0, 7620.666666666667], [52.0, 12052.0], [54.0, 10797.333333333334], [56.0, 16837.0], [61.0, 17216.833333333332], [63.0, 19071.0], [68.0, 19445.428571428572], [75.0, 18847.0], [72.0, 19885.0], [81.0, 19743.833333333336], [86.0, 19782.166666666668], [93.0, 19965.25], [98.0, 20094.0], [97.0, 19856.2], [103.0, 20195.0], [102.0, 19332.0], [101.0, 19331.0], [100.0, 19841.0], [107.0, 19354.0], [106.0, 19226.0], [105.0, 19348.0], [104.0, 19213.0], [111.0, 19321.0], [110.0, 19250.0], [109.0, 20208.0], [108.0, 20319.0], [114.0, 20020.0], [113.0, 19692.5], [117.0, 20666.0], [116.0, 20037.0], [123.0, 3231.5], [121.0, 3029.4], [127.0, 3248.25], [134.0, 3155.0], [133.0, 2872.5], [130.0, 2989.0], [143.0, 3241.5], [141.0, 3308.0], [139.0, 3244.5], [137.0, 3245.6666666666665], [148.0, 3287.0], [146.0, 3271.6666666666665], [156.0, 8151.25], [155.0, 3314.0], [154.0, 3251.5], [167.0, 3224.3], [162.0, 3261.25], [173.0, 3304.125], [183.0, 3834.0], [180.0, 3183.6666666666665], [177.0, 3164.666666666667], [189.0, 2632.25], [186.0, 4192.888888888889], [199.0, 25329.0], [198.0, 1894.3333333333333], [195.0, 1995.5], [207.0, 24311.5], [205.0, 25179.0], [204.0, 25178.0], [203.0, 25309.75], [202.0, 25320.0], [200.0, 25347.5], [215.0, 19771.666666666668], [214.0, 18074.333333333332], [212.0, 20149.75], [211.0, 25107.0], [210.0, 23548.0], [208.0, 25179.0], [223.0, 23490.722222222223], [221.0, 24278.0], [220.0, 24292.2], [218.0, 23132.96153846154], [217.0, 18194.333333333332], [216.0, 20405.5], [231.0, 12082.444444444445], [230.0, 7717.666666666667], [229.0, 9056.0], [228.0, 7267.0], [227.0, 22797.9705882353], [225.0, 23511.0], [224.0, 24102.25], [239.0, 10013.454545454546], [238.0, 10412.151515151516], [237.0, 8830.679999999998], [236.0, 10542.75], [235.0, 10616.837837837837], [234.0, 11275.6875], [233.0, 11438.0], [232.0, 11309.5], [247.0, 5887.111111111111], [246.0, 9595.75], [245.0, 11865.009950248752], [244.0, 5600.0], [243.0, 5515.756097560974], [242.0, 12654.371428571427], [241.0, 11470.021739130434], [250.0, 17236.893557422976], [249.0, 10120.206572769952], [248.0, 15109.223300970874], [1.0, 11313.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}, {"data": [[231.4992000000002, 14271.260400000017]], "isOverall": false, "label": "HTTP Request (mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 208.35, "minX": 1.71244614E12, "maxY": 832680.8166666667, "series": [{"data": [[1.71244614E12, 208.35], [1.71244626E12, 29079.55], [1.71244632E12, 9821.933333333332], [1.7124462E12, 12645.733333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71244614E12, 34324.1], [1.71244626E12, 784373.3833333333], [1.71244632E12, 308919.1], [1.7124462E12, 832680.8166666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244632E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4564.555555555556, "minX": 1.71244614E12, "maxY": 18856.27324913893, "series": [{"data": [[1.71244614E12, 4564.555555555556], [1.71244626E12, 11066.255833333336], [1.71244632E12, 14556.186567164175], [1.7124462E12, 18856.27324913893]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244632E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4564.481481481482, "minX": 1.71244614E12, "maxY": 17498.319173363994, "series": [{"data": [[1.71244614E12, 4564.481481481482], [1.71244626E12, 7040.5216666666565], [1.71244632E12, 5742.7711442786085], [1.7124462E12, 17498.319173363994]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244632E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 959.2222222222221, "minX": 1.71244614E12, "maxY": 3574.320895522389, "series": [{"data": [[1.71244614E12, 959.2222222222221], [1.71244626E12, 2416.9300000000007], [1.71244632E12, 3574.320895522389], [1.7124462E12, 962.0493685419053]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244632E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23987.0, "minX": 1.7124462E12, "maxY": 23987.0, "series": [{"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7124462E12, 23987.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124462E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 770.5, "minX": 1.0, "maxY": 47370.0, "series": [{"data": [[1.0, 23987.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 8051.5], [34.0, 13136.5], [37.0, 25179.0], [39.0, 27033.0], [40.0, 12967.0], [42.0, 10544.0], [45.0, 5812.0], [46.0, 4150.0], [3.0, 11783.0], [49.0, 19873.0], [50.0, 770.5], [51.0, 12260.0], [53.0, 43137.0], [54.0, 8643.5], [56.0, 9148.0], [4.0, 8638.5], [70.0, 44973.0], [69.0, 3692.5], [73.0, 13049.0], [5.0, 8966.0], [83.0, 3280.0], [89.0, 24270.0], [92.0, 5761.5], [6.0, 7955.0], [103.0, 12833.0], [107.0, 13797.0], [7.0, 6574.5], [8.0, 9729.5], [9.0, 7124.5], [10.0, 9392.5], [163.0, 47370.0], [11.0, 8737.0], [12.0, 5237.0], [195.0, 10818.0], [13.0, 11960.0], [14.0, 19300.5], [15.0, 7534.0], [1.0, 7421.5], [16.0, 15156.5], [17.0, 13179.0], [18.0, 20979.5], [20.0, 10546.0], [21.0, 11846.5], [22.0, 11220.0], [23.0, 17046.0], [24.0, 11879.5], [25.0, 6128.5], [26.0, 13228.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 47370.0, "series": [{"data": [[1.0, 23987.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 4500.0], [34.0, 13136.5], [37.0, 0.0], [39.0, 27033.0], [40.0, 12967.0], [42.0, 0.0], [45.0, 5811.0], [46.0, 4134.5], [3.0, 0.0], [49.0, 19873.0], [50.0, 770.5], [51.0, 12260.0], [53.0, 43137.0], [54.0, 0.0], [56.0, 0.0], [4.0, 746.5], [70.0, 44973.0], [69.0, 0.0], [73.0, 13049.0], [5.0, 0.0], [83.0, 3280.0], [89.0, 0.0], [92.0, 5761.5], [6.0, 0.0], [103.0, 0.0], [107.0, 13797.0], [7.0, 5866.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [163.0, 47370.0], [11.0, 0.0], [12.0, 5237.0], [195.0, 10818.0], [13.0, 11939.0], [14.0, 19300.5], [15.0, 0.0], [1.0, 0.0], [16.0, 15156.5], [17.0, 13179.0], [18.0, 0.0], [20.0, 7248.0], [21.0, 11846.5], [22.0, 0.0], [23.0, 17046.0], [24.0, 11879.5], [25.0, 6128.5], [26.0, 13228.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.9, "minX": 1.71244614E12, "maxY": 19.633333333333333, "series": [{"data": [[1.71244614E12, 4.616666666666666], [1.71244626E12, 19.633333333333333], [1.71244632E12, 2.9], [1.7124462E12, 14.516666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244632E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244614E12, "maxY": 7.416666666666667, "series": [{"data": [[1.7124462E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71244614E12, 0.45], [1.7124462E12, 0.06666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.71244626E12, 1.15], [1.7124462E12, 7.416666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.71244626E12, 5.016666666666667], [1.71244632E12, 0.1], [1.7124462E12, 1.8833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.71244626E12, 3.95], [1.71244632E12, 4.05]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.71244626E12, 5.183333333333334], [1.7124462E12, 3.4166666666666665]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.71244626E12, 4.7], [1.71244632E12, 2.55], [1.7124462E12, 1.7166666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244632E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244614E12, "maxY": 20.0, "series": [{"data": [[1.71244614E12, 0.45], [1.71244626E12, 20.0], [1.71244632E12, 6.7], [1.7124462E12, 14.5]], "isOverall": false, "label": "HTTP Request (mid image)-failure", "isController": false}, {"data": [[1.7124462E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request (mid image)-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244632E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244614E12, "maxY": 20.0, "series": [{"data": [[1.7124462E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71244614E12, 0.45], [1.71244626E12, 20.0], [1.71244632E12, 6.7], [1.7124462E12, 14.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244632E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

