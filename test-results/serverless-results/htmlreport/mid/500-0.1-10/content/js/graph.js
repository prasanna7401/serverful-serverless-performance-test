/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 68.0, "minX": 0.0, "maxY": 35940.0, "series": [{"data": [[0.0, 68.0], [0.1, 68.0], [0.2, 71.0], [0.3, 71.0], [0.4, 73.0], [0.5, 75.0], [0.6, 76.0], [0.7, 76.0], [0.8, 77.0], [0.9, 78.0], [1.0, 79.0], [1.1, 80.0], [1.2, 80.0], [1.3, 81.0], [1.4, 82.0], [1.5, 82.0], [1.6, 83.0], [1.7, 83.0], [1.8, 84.0], [1.9, 86.0], [2.0, 86.0], [2.1, 86.0], [2.2, 87.0], [2.3, 88.0], [2.4, 88.0], [2.5, 90.0], [2.6, 90.0], [2.7, 91.0], [2.8, 94.0], [2.9, 97.0], [3.0, 101.0], [3.1, 101.0], [3.2, 101.0], [3.3, 102.0], [3.4, 102.0], [3.5, 102.0], [3.6, 104.0], [3.7, 104.0], [3.8, 105.0], [3.9, 106.0], [4.0, 108.0], [4.1, 108.0], [4.2, 108.0], [4.3, 109.0], [4.4, 110.0], [4.5, 111.0], [4.6, 111.0], [4.7, 111.0], [4.8, 113.0], [4.9, 113.0], [5.0, 113.0], [5.1, 117.0], [5.2, 118.0], [5.3, 120.0], [5.4, 121.0], [5.5, 121.0], [5.6, 122.0], [5.7, 122.0], [5.8, 123.0], [5.9, 123.0], [6.0, 123.0], [6.1, 124.0], [6.2, 124.0], [6.3, 124.0], [6.4, 125.0], [6.5, 125.0], [6.6, 125.0], [6.7, 125.0], [6.8, 126.0], [6.9, 127.0], [7.0, 127.0], [7.1, 127.0], [7.2, 127.0], [7.3, 128.0], [7.4, 128.0], [7.5, 129.0], [7.6, 129.0], [7.7, 130.0], [7.8, 130.0], [7.9, 130.0], [8.0, 131.0], [8.1, 131.0], [8.2, 131.0], [8.3, 131.0], [8.4, 131.0], [8.5, 132.0], [8.6, 132.0], [8.7, 133.0], [8.8, 135.0], [8.9, 135.0], [9.0, 136.0], [9.1, 136.0], [9.2, 136.0], [9.3, 136.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 138.0], [9.8, 140.0], [9.9, 140.0], [10.0, 141.0], [10.1, 142.0], [10.2, 142.0], [10.3, 143.0], [10.4, 143.0], [10.5, 144.0], [10.6, 145.0], [10.7, 146.0], [10.8, 146.0], [10.9, 147.0], [11.0, 147.0], [11.1, 148.0], [11.2, 148.0], [11.3, 148.0], [11.4, 150.0], [11.5, 151.0], [11.6, 152.0], [11.7, 152.0], [11.8, 153.0], [11.9, 153.0], [12.0, 153.0], [12.1, 154.0], [12.2, 155.0], [12.3, 156.0], [12.4, 158.0], [12.5, 159.0], [12.6, 164.0], [12.7, 165.0], [12.8, 165.0], [12.9, 165.0], [13.0, 166.0], [13.1, 166.0], [13.2, 166.0], [13.3, 166.0], [13.4, 167.0], [13.5, 167.0], [13.6, 167.0], [13.7, 167.0], [13.8, 168.0], [13.9, 170.0], [14.0, 171.0], [14.1, 173.0], [14.2, 174.0], [14.3, 175.0], [14.4, 176.0], [14.5, 177.0], [14.6, 178.0], [14.7, 178.0], [14.8, 179.0], [14.9, 179.0], [15.0, 179.0], [15.1, 180.0], [15.2, 180.0], [15.3, 180.0], [15.4, 180.0], [15.5, 181.0], [15.6, 181.0], [15.7, 181.0], [15.8, 181.0], [15.9, 182.0], [16.0, 185.0], [16.1, 186.0], [16.2, 189.0], [16.3, 191.0], [16.4, 192.0], [16.5, 192.0], [16.6, 192.0], [16.7, 192.0], [16.8, 193.0], [16.9, 194.0], [17.0, 194.0], [17.1, 194.0], [17.2, 195.0], [17.3, 195.0], [17.4, 196.0], [17.5, 197.0], [17.6, 197.0], [17.7, 199.0], [17.8, 201.0], [17.9, 203.0], [18.0, 205.0], [18.1, 206.0], [18.2, 206.0], [18.3, 206.0], [18.4, 206.0], [18.5, 207.0], [18.6, 207.0], [18.7, 207.0], [18.8, 207.0], [18.9, 207.0], [19.0, 208.0], [19.1, 208.0], [19.2, 208.0], [19.3, 208.0], [19.4, 209.0], [19.5, 209.0], [19.6, 209.0], [19.7, 210.0], [19.8, 210.0], [19.9, 211.0], [20.0, 212.0], [20.1, 213.0], [20.2, 214.0], [20.3, 215.0], [20.4, 216.0], [20.5, 217.0], [20.6, 218.0], [20.7, 219.0], [20.8, 219.0], [20.9, 219.0], [21.0, 219.0], [21.1, 220.0], [21.2, 220.0], [21.3, 221.0], [21.4, 221.0], [21.5, 222.0], [21.6, 222.0], [21.7, 222.0], [21.8, 222.0], [21.9, 223.0], [22.0, 223.0], [22.1, 224.0], [22.2, 224.0], [22.3, 225.0], [22.4, 225.0], [22.5, 226.0], [22.6, 227.0], [22.7, 229.0], [22.8, 229.0], [22.9, 230.0], [23.0, 231.0], [23.1, 232.0], [23.2, 233.0], [23.3, 234.0], [23.4, 234.0], [23.5, 234.0], [23.6, 235.0], [23.7, 235.0], [23.8, 235.0], [23.9, 235.0], [24.0, 235.0], [24.1, 235.0], [24.2, 236.0], [24.3, 236.0], [24.4, 236.0], [24.5, 236.0], [24.6, 236.0], [24.7, 237.0], [24.8, 237.0], [24.9, 237.0], [25.0, 238.0], [25.1, 238.0], [25.2, 239.0], [25.3, 239.0], [25.4, 240.0], [25.5, 242.0], [25.6, 243.0], [25.7, 243.0], [25.8, 244.0], [25.9, 245.0], [26.0, 246.0], [26.1, 246.0], [26.2, 246.0], [26.3, 247.0], [26.4, 247.0], [26.5, 247.0], [26.6, 247.0], [26.7, 248.0], [26.8, 248.0], [26.9, 248.0], [27.0, 249.0], [27.1, 249.0], [27.2, 249.0], [27.3, 249.0], [27.4, 250.0], [27.5, 250.0], [27.6, 250.0], [27.7, 251.0], [27.8, 251.0], [27.9, 251.0], [28.0, 252.0], [28.1, 252.0], [28.2, 253.0], [28.3, 254.0], [28.4, 254.0], [28.5, 255.0], [28.6, 255.0], [28.7, 255.0], [28.8, 256.0], [28.9, 257.0], [29.0, 257.0], [29.1, 258.0], [29.2, 259.0], [29.3, 259.0], [29.4, 260.0], [29.5, 260.0], [29.6, 261.0], [29.7, 261.0], [29.8, 261.0], [29.9, 261.0], [30.0, 262.0], [30.1, 262.0], [30.2, 262.0], [30.3, 263.0], [30.4, 263.0], [30.5, 264.0], [30.6, 264.0], [30.7, 264.0], [30.8, 265.0], [30.9, 265.0], [31.0, 265.0], [31.1, 266.0], [31.2, 266.0], [31.3, 267.0], [31.4, 267.0], [31.5, 268.0], [31.6, 269.0], [31.7, 269.0], [31.8, 270.0], [31.9, 271.0], [32.0, 271.0], [32.1, 272.0], [32.2, 273.0], [32.3, 273.0], [32.4, 274.0], [32.5, 274.0], [32.6, 275.0], [32.7, 275.0], [32.8, 275.0], [32.9, 276.0], [33.0, 276.0], [33.1, 276.0], [33.2, 277.0], [33.3, 277.0], [33.4, 277.0], [33.5, 278.0], [33.6, 278.0], [33.7, 278.0], [33.8, 279.0], [33.9, 279.0], [34.0, 279.0], [34.1, 280.0], [34.2, 281.0], [34.3, 282.0], [34.4, 283.0], [34.5, 284.0], [34.6, 284.0], [34.7, 285.0], [34.8, 285.0], [34.9, 286.0], [35.0, 287.0], [35.1, 287.0], [35.2, 288.0], [35.3, 288.0], [35.4, 289.0], [35.5, 290.0], [35.6, 290.0], [35.7, 291.0], [35.8, 292.0], [35.9, 293.0], [36.0, 294.0], [36.1, 295.0], [36.2, 295.0], [36.3, 296.0], [36.4, 296.0], [36.5, 296.0], [36.6, 298.0], [36.7, 299.0], [36.8, 301.0], [36.9, 301.0], [37.0, 302.0], [37.1, 302.0], [37.2, 303.0], [37.3, 303.0], [37.4, 304.0], [37.5, 305.0], [37.6, 305.0], [37.7, 306.0], [37.8, 307.0], [37.9, 308.0], [38.0, 309.0], [38.1, 310.0], [38.2, 311.0], [38.3, 312.0], [38.4, 314.0], [38.5, 314.0], [38.6, 315.0], [38.7, 315.0], [38.8, 316.0], [38.9, 316.0], [39.0, 316.0], [39.1, 317.0], [39.2, 317.0], [39.3, 317.0], [39.4, 317.0], [39.5, 318.0], [39.6, 318.0], [39.7, 318.0], [39.8, 318.0], [39.9, 319.0], [40.0, 319.0], [40.1, 319.0], [40.2, 319.0], [40.3, 319.0], [40.4, 319.0], [40.5, 320.0], [40.6, 320.0], [40.7, 321.0], [40.8, 321.0], [40.9, 324.0], [41.0, 325.0], [41.1, 325.0], [41.2, 325.0], [41.3, 326.0], [41.4, 328.0], [41.5, 329.0], [41.6, 330.0], [41.7, 330.0], [41.8, 331.0], [41.9, 331.0], [42.0, 331.0], [42.1, 331.0], [42.2, 332.0], [42.3, 332.0], [42.4, 333.0], [42.5, 334.0], [42.6, 335.0], [42.7, 335.0], [42.8, 336.0], [42.9, 336.0], [43.0, 336.0], [43.1, 338.0], [43.2, 339.0], [43.3, 340.0], [43.4, 342.0], [43.5, 344.0], [43.6, 344.0], [43.7, 345.0], [43.8, 345.0], [43.9, 345.0], [44.0, 346.0], [44.1, 346.0], [44.2, 346.0], [44.3, 346.0], [44.4, 346.0], [44.5, 347.0], [44.6, 347.0], [44.7, 348.0], [44.8, 350.0], [44.9, 350.0], [45.0, 351.0], [45.1, 351.0], [45.2, 352.0], [45.3, 353.0], [45.4, 354.0], [45.5, 355.0], [45.6, 356.0], [45.7, 357.0], [45.8, 358.0], [45.9, 358.0], [46.0, 359.0], [46.1, 359.0], [46.2, 359.0], [46.3, 360.0], [46.4, 360.0], [46.5, 361.0], [46.6, 362.0], [46.7, 362.0], [46.8, 364.0], [46.9, 366.0], [47.0, 369.0], [47.1, 371.0], [47.2, 372.0], [47.3, 378.0], [47.4, 378.0], [47.5, 387.0], [47.6, 388.0], [47.7, 393.0], [47.8, 395.0], [47.9, 398.0], [48.0, 400.0], [48.1, 408.0], [48.2, 409.0], [48.3, 411.0], [48.4, 412.0], [48.5, 417.0], [48.6, 420.0], [48.7, 423.0], [48.8, 424.0], [48.9, 424.0], [49.0, 424.0], [49.1, 425.0], [49.2, 431.0], [49.3, 432.0], [49.4, 434.0], [49.5, 435.0], [49.6, 437.0], [49.7, 438.0], [49.8, 439.0], [49.9, 440.0], [50.0, 440.0], [50.1, 440.0], [50.2, 443.0], [50.3, 445.0], [50.4, 457.0], [50.5, 464.0], [50.6, 465.0], [50.7, 466.0], [50.8, 470.0], [50.9, 491.0], [51.0, 523.0], [51.1, 549.0], [51.2, 550.0], [51.3, 550.0], [51.4, 552.0], [51.5, 560.0], [51.6, 563.0], [51.7, 564.0], [51.8, 564.0], [51.9, 565.0], [52.0, 566.0], [52.1, 571.0], [52.2, 572.0], [52.3, 581.0], [52.4, 584.0], [52.5, 588.0], [52.6, 589.0], [52.7, 594.0], [52.8, 597.0], [52.9, 598.0], [53.0, 598.0], [53.1, 599.0], [53.2, 599.0], [53.3, 600.0], [53.4, 601.0], [53.5, 602.0], [53.6, 602.0], [53.7, 604.0], [53.8, 605.0], [53.9, 605.0], [54.0, 605.0], [54.1, 606.0], [54.2, 608.0], [54.3, 609.0], [54.4, 609.0], [54.5, 615.0], [54.6, 615.0], [54.7, 616.0], [54.8, 617.0], [54.9, 618.0], [55.0, 618.0], [55.1, 619.0], [55.2, 619.0], [55.3, 619.0], [55.4, 621.0], [55.5, 629.0], [55.6, 630.0], [55.7, 630.0], [55.8, 631.0], [55.9, 635.0], [56.0, 637.0], [56.1, 642.0], [56.2, 643.0], [56.3, 644.0], [56.4, 644.0], [56.5, 646.0], [56.6, 649.0], [56.7, 650.0], [56.8, 651.0], [56.9, 657.0], [57.0, 659.0], [57.1, 666.0], [57.2, 673.0], [57.3, 675.0], [57.4, 688.0], [57.5, 692.0], [57.6, 695.0], [57.7, 696.0], [57.8, 697.0], [57.9, 699.0], [58.0, 702.0], [58.1, 716.0], [58.2, 720.0], [58.3, 721.0], [58.4, 755.0], [58.5, 772.0], [58.6, 831.0], [58.7, 845.0], [58.8, 883.0], [58.9, 892.0], [59.0, 955.0], [59.1, 989.0], [59.2, 1068.0], [59.3, 1133.0], [59.4, 1136.0], [59.5, 1137.0], [59.6, 1146.0], [59.7, 1169.0], [59.8, 1563.0], [59.9, 1604.0], [60.0, 1663.0], [60.1, 1749.0], [60.2, 1908.0], [60.3, 1922.0], [60.4, 1923.0], [60.5, 1977.0], [60.6, 2034.0], [60.7, 2039.0], [60.8, 2071.0], [60.9, 2127.0], [61.0, 2230.0], [61.1, 2271.0], [61.2, 2274.0], [61.3, 2274.0], [61.4, 2277.0], [61.5, 2285.0], [61.6, 2294.0], [61.7, 2294.0], [61.8, 2295.0], [61.9, 2297.0], [62.0, 2303.0], [62.1, 2312.0], [62.2, 2335.0], [62.3, 2553.0], [62.4, 2563.0], [62.5, 2570.0], [62.6, 2578.0], [62.7, 2581.0], [62.8, 2589.0], [62.9, 2601.0], [63.0, 2605.0], [63.1, 2627.0], [63.2, 2641.0], [63.3, 2753.0], [63.4, 2793.0], [63.5, 2812.0], [63.6, 2814.0], [63.7, 2830.0], [63.8, 2842.0], [63.9, 2868.0], [64.0, 2875.0], [64.1, 2898.0], [64.2, 2931.0], [64.3, 2933.0], [64.4, 3203.0], [64.5, 3277.0], [64.6, 3318.0], [64.7, 3333.0], [64.8, 3428.0], [64.9, 3455.0], [65.0, 3483.0], [65.1, 3567.0], [65.2, 3626.0], [65.3, 3626.0], [65.4, 3669.0], [65.5, 3719.0], [65.6, 3727.0], [65.7, 3738.0], [65.8, 3751.0], [65.9, 3753.0], [66.0, 3765.0], [66.1, 3767.0], [66.2, 3782.0], [66.3, 3826.0], [66.4, 3881.0], [66.5, 3928.0], [66.6, 3929.0], [66.7, 3956.0], [66.8, 3997.0], [66.9, 4007.0], [67.0, 4064.0], [67.1, 4132.0], [67.2, 4133.0], [67.3, 4152.0], [67.4, 4161.0], [67.5, 4161.0], [67.6, 4194.0], [67.7, 4210.0], [67.8, 4224.0], [67.9, 4251.0], [68.0, 4264.0], [68.1, 4280.0], [68.2, 4299.0], [68.3, 4308.0], [68.4, 4339.0], [68.5, 4388.0], [68.6, 4556.0], [68.7, 4557.0], [68.8, 4569.0], [68.9, 4613.0], [69.0, 4639.0], [69.1, 4646.0], [69.2, 4647.0], [69.3, 4648.0], [69.4, 4650.0], [69.5, 4651.0], [69.6, 4706.0], [69.7, 4706.0], [69.8, 4713.0], [69.9, 4714.0], [70.0, 4715.0], [70.1, 4716.0], [70.2, 4744.0], [70.3, 4745.0], [70.4, 4746.0], [70.5, 4774.0], [70.6, 4774.0], [70.7, 4938.0], [70.8, 5037.0], [70.9, 5070.0], [71.0, 5175.0], [71.1, 5184.0], [71.2, 5188.0], [71.3, 5193.0], [71.4, 5194.0], [71.5, 5197.0], [71.6, 5198.0], [71.7, 5205.0], [71.8, 5213.0], [71.9, 5221.0], [72.0, 5222.0], [72.1, 5223.0], [72.2, 5290.0], [72.3, 5449.0], [72.4, 5459.0], [72.5, 5468.0], [72.6, 5473.0], [72.7, 5480.0], [72.8, 5482.0], [72.9, 5484.0], [73.0, 5488.0], [73.1, 5491.0], [73.2, 5492.0], [73.3, 5496.0], [73.4, 5502.0], [73.5, 5507.0], [73.6, 5514.0], [73.7, 5516.0], [73.8, 5518.0], [73.9, 5551.0], [74.0, 5581.0], [74.1, 5633.0], [74.2, 5643.0], [74.3, 5665.0], [74.4, 5683.0], [74.5, 5728.0], [74.6, 5732.0], [74.7, 5736.0], [74.8, 5743.0], [74.9, 5746.0], [75.0, 5751.0], [75.1, 5752.0], [75.2, 5764.0], [75.3, 5768.0], [75.4, 5787.0], [75.5, 5801.0], [75.6, 5849.0], [75.7, 5862.0], [75.8, 5974.0], [75.9, 6025.0], [76.0, 6080.0], [76.1, 6184.0], [76.2, 6408.0], [76.3, 6482.0], [76.4, 6509.0], [76.5, 6562.0], [76.6, 6564.0], [76.7, 6569.0], [76.8, 6571.0], [76.9, 6573.0], [77.0, 6575.0], [77.1, 6617.0], [77.2, 6620.0], [77.3, 6625.0], [77.4, 6626.0], [77.5, 6628.0], [77.6, 6630.0], [77.7, 6632.0], [77.8, 6728.0], [77.9, 6762.0], [78.0, 6763.0], [78.1, 6846.0], [78.2, 7124.0], [78.3, 7184.0], [78.4, 7243.0], [78.5, 7252.0], [78.6, 7440.0], [78.7, 7447.0], [78.8, 8150.0], [78.9, 8152.0], [79.0, 8167.0], [79.1, 8256.0], [79.2, 8563.0], [79.3, 8699.0], [79.4, 8817.0], [79.5, 8910.0], [79.6, 8919.0], [79.7, 9040.0], [79.8, 9042.0], [79.9, 9044.0], [80.0, 9046.0], [80.1, 9047.0], [80.2, 9049.0], [80.3, 9051.0], [80.4, 9053.0], [80.5, 9056.0], [80.6, 9096.0], [80.7, 9096.0], [80.8, 9101.0], [80.9, 9103.0], [81.0, 9106.0], [81.1, 9110.0], [81.2, 9119.0], [81.3, 9174.0], [81.4, 9201.0], [81.5, 9206.0], [81.6, 9208.0], [81.7, 9217.0], [81.8, 9283.0], [81.9, 9287.0], [82.0, 9292.0], [82.1, 9297.0], [82.2, 9304.0], [82.3, 9309.0], [82.4, 9591.0], [82.5, 9592.0], [82.6, 9601.0], [82.7, 9730.0], [82.8, 10115.0], [82.9, 10558.0], [83.0, 10657.0], [83.1, 10707.0], [83.2, 10802.0], [83.3, 10811.0], [83.4, 11083.0], [83.5, 11188.0], [83.6, 11189.0], [83.7, 11779.0], [83.8, 11790.0], [83.9, 11791.0], [84.0, 12195.0], [84.1, 12640.0], [84.2, 12755.0], [84.3, 12763.0], [84.4, 12765.0], [84.5, 12768.0], [84.6, 12777.0], [84.7, 12781.0], [84.8, 12790.0], [84.9, 12810.0], [85.0, 12869.0], [85.1, 12875.0], [85.2, 12884.0], [85.3, 12996.0], [85.4, 12999.0], [85.5, 13000.0], [85.6, 13001.0], [85.7, 13002.0], [85.8, 13004.0], [85.9, 13014.0], [86.0, 13025.0], [86.1, 13031.0], [86.2, 13033.0], [86.3, 13034.0], [86.4, 13080.0], [86.5, 13218.0], [86.6, 13300.0], [86.7, 13380.0], [86.8, 13383.0], [86.9, 13393.0], [87.0, 13415.0], [87.1, 13416.0], [87.2, 13425.0], [87.3, 13426.0], [87.4, 13431.0], [87.5, 13623.0], [87.6, 13696.0], [87.7, 13697.0], [87.8, 13701.0], [87.9, 13703.0], [88.0, 13706.0], [88.1, 13711.0], [88.2, 13724.0], [88.3, 13726.0], [88.4, 13729.0], [88.5, 13732.0], [88.6, 13932.0], [88.7, 13955.0], [88.8, 14143.0], [88.9, 14204.0], [89.0, 14311.0], [89.1, 15292.0], [89.2, 15318.0], [89.3, 15562.0], [89.4, 15575.0], [89.5, 15721.0], [89.6, 15799.0], [89.7, 15804.0], [89.8, 16576.0], [89.9, 16596.0], [90.0, 16613.0], [90.1, 16614.0], [90.2, 16619.0], [90.3, 16620.0], [90.4, 16621.0], [90.5, 16621.0], [90.6, 16623.0], [90.7, 16637.0], [90.8, 17704.0], [90.9, 17724.0], [91.0, 17731.0], [91.1, 17756.0], [91.2, 17762.0], [91.3, 17933.0], [91.4, 18079.0], [91.5, 18083.0], [91.6, 18086.0], [91.7, 18095.0], [91.8, 18107.0], [91.9, 18474.0], [92.0, 18477.0], [92.1, 18478.0], [92.2, 18478.0], [92.3, 18487.0], [92.4, 18492.0], [92.5, 18495.0], [92.6, 18496.0], [92.7, 18497.0], [92.8, 18498.0], [92.9, 18500.0], [93.0, 18501.0], [93.1, 18502.0], [93.2, 18502.0], [93.3, 18503.0], [93.4, 18505.0], [93.5, 18507.0], [93.6, 18514.0], [93.7, 18520.0], [93.8, 18522.0], [93.9, 18527.0], [94.0, 18530.0], [94.1, 18535.0], [94.2, 18544.0], [94.3, 18550.0], [94.4, 18655.0], [94.5, 18672.0], [94.6, 18684.0], [94.7, 18689.0], [94.8, 18698.0], [94.9, 18705.0], [95.0, 18805.0], [95.1, 18805.0], [95.2, 18806.0], [95.3, 18807.0], [95.4, 18808.0], [95.5, 18811.0], [95.6, 18811.0], [95.7, 18812.0], [95.8, 18821.0], [95.9, 18845.0], [96.0, 18848.0], [96.1, 18855.0], [96.2, 18870.0], [96.3, 18871.0], [96.4, 18872.0], [96.5, 18874.0], [96.6, 21368.0], [96.7, 21947.0], [96.8, 21981.0], [96.9, 22015.0], [97.0, 22049.0], [97.1, 22424.0], [97.2, 22632.0], [97.3, 22658.0], [97.4, 22895.0], [97.5, 22939.0], [97.6, 22971.0], [97.7, 23151.0], [97.8, 24237.0], [97.9, 24740.0], [98.0, 24755.0], [98.1, 24821.0], [98.2, 24890.0], [98.3, 24973.0], [98.4, 24982.0], [98.5, 25007.0], [98.6, 25014.0], [98.7, 25024.0], [98.8, 25064.0], [98.9, 25068.0], [99.0, 25108.0], [99.1, 25111.0], [99.2, 25115.0], [99.3, 25190.0], [99.4, 25197.0], [99.5, 25331.0], [99.6, 25334.0], [99.7, 25335.0], [99.8, 25341.0], [99.9, 25534.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 951.0, "series": [{"data": [[0.0, 146.0], [100.0, 740.0], [35900.0, 1.0], [200.0, 951.0], [300.0, 562.0], [400.0, 146.0], [500.0, 116.0], [600.0, 234.0], [700.0, 31.0], [800.0, 20.0], [900.0, 10.0], [1000.0, 4.0], [1100.0, 27.0], [1400.0, 1.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 5.0], [1800.0, 2.0], [1900.0, 20.0], [2000.0, 15.0], [2100.0, 6.0], [2200.0, 48.0], [2300.0, 15.0], [2500.0, 33.0], [2600.0, 20.0], [2700.0, 8.0], [2800.0, 33.0], [2900.0, 11.0], [3100.0, 2.0], [3200.0, 11.0], [3300.0, 7.0], [3400.0, 14.0], [3500.0, 6.0], [3600.0, 17.0], [3700.0, 37.0], [3800.0, 11.0], [3900.0, 20.0], [4000.0, 11.0], [4100.0, 29.0], [4200.0, 30.0], [4300.0, 14.0], [4500.0, 12.0], [4400.0, 3.0], [4600.0, 39.0], [4800.0, 2.0], [4700.0, 53.0], [5100.0, 35.0], [4900.0, 5.0], [5000.0, 7.0], [5200.0, 29.0], [5300.0, 3.0], [5500.0, 32.0], [5400.0, 55.0], [5600.0, 22.0], [5700.0, 50.0], [5800.0, 17.0], [6000.0, 9.0], [6100.0, 5.0], [5900.0, 2.0], [6200.0, 3.0], [6300.0, 1.0], [6500.0, 37.0], [6400.0, 7.0], [6600.0, 33.0], [6800.0, 3.0], [6700.0, 18.0], [6900.0, 1.0], [7100.0, 8.0], [7000.0, 1.0], [7400.0, 8.0], [7200.0, 9.0], [7300.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [7800.0, 1.0], [8100.0, 14.0], [8500.0, 2.0], [8700.0, 4.0], [8200.0, 6.0], [8600.0, 5.0], [8900.0, 11.0], [9000.0, 55.0], [9100.0, 31.0], [9200.0, 39.0], [8800.0, 3.0], [9300.0, 9.0], [9500.0, 9.0], [9600.0, 6.0], [9700.0, 4.0], [9800.0, 2.0], [9900.0, 1.0], [10200.0, 3.0], [10100.0, 1.0], [10600.0, 3.0], [10500.0, 5.0], [10700.0, 7.0], [10300.0, 1.0], [11200.0, 1.0], [10800.0, 7.0], [11100.0, 11.0], [11000.0, 5.0], [11700.0, 13.0], [11400.0, 1.0], [12100.0, 3.0], [12500.0, 1.0], [12600.0, 5.0], [12700.0, 31.0], [12400.0, 2.0], [12300.0, 1.0], [12800.0, 20.0], [12900.0, 12.0], [13000.0, 51.0], [13200.0, 6.0], [13300.0, 19.0], [13100.0, 1.0], [13400.0, 25.0], [13600.0, 15.0], [13700.0, 41.0], [14300.0, 2.0], [14100.0, 8.0], [14000.0, 1.0], [13900.0, 6.0], [14200.0, 5.0], [15300.0, 7.0], [15200.0, 5.0], [15700.0, 6.0], [15800.0, 9.0], [15500.0, 11.0], [16500.0, 8.0], [16600.0, 41.0], [17600.0, 1.0], [17700.0, 22.0], [17800.0, 2.0], [17900.0, 2.0], [18000.0, 22.0], [18100.0, 5.0], [18400.0, 51.0], [18500.0, 74.0], [18800.0, 79.0], [18600.0, 23.0], [18700.0, 7.0], [20100.0, 1.0], [21300.0, 5.0], [21900.0, 9.0], [22100.0, 1.0], [22000.0, 11.0], [22400.0, 1.0], [21600.0, 1.0], [22600.0, 11.0], [23100.0, 5.0], [22900.0, 10.0], [22800.0, 4.0], [24200.0, 5.0], [23800.0, 2.0], [24400.0, 1.0], [24700.0, 8.0], [24600.0, 1.0], [24800.0, 8.0], [24900.0, 12.0], [25000.0, 25.0], [25100.0, 23.0], [25400.0, 2.0], [25500.0, 1.0], [25300.0, 22.0], [25600.0, 3.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 368.29830576845404, "minX": 1.71244632E12, "maxY": 500.0, "series": [{"data": [[1.71244638E12, 368.29830576845404], [1.71244632E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244638E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 68.0, "minX": 1.0, "maxY": 11342.378878281621, "series": [{"data": [[2.0, 4592.5], [3.0, 4940.333333333334], [4.0, 3352.666666666667], [5.0, 174.0], [6.0, 173.0], [7.0, 159.0], [10.0, 185.66666666666666], [14.0, 178.0], [15.0, 164.0], [17.0, 191.0], [18.0, 206.0], [21.0, 158.0], [22.0, 136.0], [24.0, 205.0], [25.0, 218.5], [26.0, 225.0], [27.0, 171.0], [28.0, 201.33333333333334], [30.0, 193.2], [31.0, 197.66666666666666], [33.0, 162.33333333333334], [35.0, 152.0], [34.0, 165.0], [36.0, 206.0], [39.0, 179.25], [38.0, 192.0], [41.0, 166.0], [43.0, 166.0], [44.0, 1441.0], [47.0, 165.0], [46.0, 152.0], [49.0, 165.5], [51.0, 179.0], [50.0, 177.0], [53.0, 178.66666666666666], [55.0, 192.0], [54.0, 219.75], [56.0, 244.0], [59.0, 207.33333333333334], [60.0, 194.0], [63.0, 209.625], [62.0, 208.49999999999997], [67.0, 195.0], [66.0, 194.0], [65.0, 186.7142857142857], [64.0, 208.5], [71.0, 153.0], [69.0, 194.0], [68.0, 211.5], [75.0, 215.5], [74.0, 198.66666666666666], [73.0, 193.5], [72.0, 185.8], [79.0, 154.0], [78.0, 195.0], [77.0, 195.0], [76.0, 189.66666666666666], [83.0, 152.0], [82.0, 198.42857142857144], [81.0, 216.64285714285717], [80.0, 154.0], [86.0, 219.33333333333334], [85.0, 219.67647058823533], [84.0, 211.66666666666666], [91.0, 1617.4], [90.0, 208.5], [89.0, 209.0], [88.0, 197.75], [95.0, 266.95000000000005], [94.0, 224.36111111111114], [93.0, 180.0], [99.0, 239.1153846153846], [98.0, 253.16666666666669], [97.0, 268.33333333333337], [96.0, 84.0], [103.0, 166.0], [101.0, 166.0], [100.0, 265.6666666666667], [107.0, 220.0], [106.0, 910.2380952380953], [105.0, 220.33333333333331], [104.0, 1217.0], [111.0, 309.0], [110.0, 249.13333333333333], [115.0, 326.14285714285717], [114.0, 305.1], [113.0, 323.1111111111111], [112.0, 305.8], [119.0, 166.0], [118.0, 285.7142857142857], [117.0, 216.5], [116.0, 173.44444444444446], [123.0, 293.0], [122.0, 287.22222222222223], [121.0, 268.94444444444446], [120.0, 982.0333333333333], [127.0, 485.6666666666667], [126.0, 327.375], [125.0, 229.71428571428567], [124.0, 266.0], [135.0, 231.0], [134.0, 368.4347826086956], [133.0, 565.5454545454545], [132.0, 391.4545454545454], [130.0, 253.33333333333334], [129.0, 397.5], [128.0, 608.8666666666667], [143.0, 212.0], [142.0, 222.25], [140.0, 167.0], [139.0, 287.9], [138.0, 213.66666666666666], [151.0, 247.66666666666666], [149.0, 267.25], [147.0, 204.0], [146.0, 280.0], [145.0, 229.0], [144.0, 178.0], [159.0, 192.0], [158.0, 218.0], [157.0, 165.0], [156.0, 255.0], [155.0, 290.0], [153.0, 228.33333333333334], [167.0, 374.3333333333333], [166.0, 198.0], [165.0, 329.5], [164.0, 227.0], [163.0, 272.3333333333333], [162.0, 202.5], [160.0, 323.75], [175.0, 335.0], [174.0, 335.0], [173.0, 488.5], [172.0, 348.3333333333333], [171.0, 327.33333333333337], [170.0, 406.37499999999994], [169.0, 335.6], [168.0, 282.6], [183.0, 299.0], [181.0, 266.5], [179.0, 519.6666666666667], [178.0, 290.0], [177.0, 321.0], [176.0, 318.3333333333333], [191.0, 273.0], [190.0, 271.6], [188.0, 273.6666666666667], [185.0, 459.0], [184.0, 265.0], [199.0, 332.8571428571429], [198.0, 321.25], [197.0, 276.5], [196.0, 234.0], [195.0, 282.0], [194.0, 229.0], [193.0, 302.0], [192.0, 314.0], [207.0, 254.0], [206.0, 290.3333333333333], [205.0, 211.5], [204.0, 227.0], [203.0, 225.0], [202.0, 305.5], [201.0, 238.5], [200.0, 215.0], [215.0, 231.5], [214.0, 268.6666666666667], [212.0, 254.0], [211.0, 257.6666666666667], [208.0, 223.0], [223.0, 4077.6], [222.0, 1581.0], [221.0, 251.8], [218.0, 276.6666666666667], [217.0, 5759.18918918919], [216.0, 1851.7499999999998], [231.0, 232.25], [230.0, 225.0], [229.0, 3329.0], [228.0, 4145.75], [227.0, 176.0], [226.0, 208.0], [225.0, 261.25], [224.0, 253.5], [239.0, 279.0], [237.0, 241.6], [236.0, 166.66666666666666], [235.0, 325.0], [234.0, 216.83333333333331], [233.0, 200.0], [232.0, 310.6875], [247.0, 323.4], [246.0, 427.183673469388], [245.0, 412.2222222222223], [244.0, 308.0], [243.0, 586.25], [242.0, 919.9565217391305], [241.0, 208.0], [240.0, 230.5], [255.0, 303.0], [254.0, 228.5], [252.0, 231.0], [251.0, 296.0], [250.0, 1508.1], [249.0, 449.6923076923078], [248.0, 284.25], [270.0, 221.0], [271.0, 299.3333333333333], [269.0, 332.5], [268.0, 295.0], [267.0, 311.3636363636364], [266.0, 353.0], [265.0, 286.0], [263.0, 360.0], [257.0, 325.0], [256.0, 371.3333333333333], [259.0, 342.0], [258.0, 275.0], [262.0, 259.5], [261.0, 322.0], [260.0, 338.3333333333333], [286.0, 334.0], [287.0, 208.0], [285.0, 806.4482758620687], [284.0, 415.4], [283.0, 265.5], [282.0, 403.8], [280.0, 303.5], [278.0, 342.0], [273.0, 367.5], [272.0, 366.2142857142857], [275.0, 346.5], [274.0, 312.6666666666667], [277.0, 303.0], [276.0, 338.3333333333333], [302.0, 375.5], [303.0, 2695.5714285714284], [301.0, 769.8571428571428], [300.0, 410.3333333333333], [299.0, 243.0], [298.0, 351.0], [297.0, 263.5], [295.0, 282.3333333333333], [289.0, 382.0], [288.0, 200.0], [291.0, 481.5], [290.0, 2263.0], [294.0, 258.0], [293.0, 278.5], [292.0, 287.0], [318.0, 1235.1428571428573], [319.0, 249.75], [317.0, 250.0], [316.0, 3064.3333333333335], [315.0, 238.0], [314.0, 251.0], [313.0, 1676.75], [312.0, 299.0], [311.0, 348.0], [305.0, 295.3333333333333], [304.0, 274.0], [307.0, 271.0], [306.0, 242.0], [310.0, 243.0], [309.0, 309.0], [308.0, 243.0], [334.0, 2095.0], [335.0, 341.5], [333.0, 3016.0], [332.0, 2309.090909090909], [331.0, 243.0], [330.0, 406.4], [329.0, 373.0], [328.0, 470.3333333333333], [327.0, 246.0], [321.0, 303.2], [320.0, 360.33333333333337], [323.0, 418.1111111111111], [322.0, 361.5], [326.0, 399.8], [325.0, 407.21428571428567], [324.0, 426.88235294117646], [349.0, 214.0], [350.0, 267.0], [348.0, 214.33333333333334], [338.0, 258.5], [337.0, 750.0000000000001], [336.0, 376.0], [346.0, 294.5], [345.0, 261.2], [344.0, 1076.2857142857142], [343.0, 380.33333333333337], [342.0, 252.5], [341.0, 293.5], [340.0, 290.28571428571433], [366.0, 532.1590909090911], [367.0, 388.375], [365.0, 258.50000000000006], [364.0, 262.0], [363.0, 309.8333333333333], [362.0, 293.25], [361.0, 317.0], [360.0, 276.0], [359.0, 242.66666666666666], [353.0, 269.6666666666667], [352.0, 284.6666666666667], [355.0, 290.125], [354.0, 257.0], [357.0, 231.5], [356.0, 292.0], [381.0, 2399.0079051383386], [382.0, 87.0], [380.0, 2457.625], [371.0, 559.9999999999995], [370.0, 653.364055299539], [369.0, 411.9452054794521], [368.0, 432.1851851851852], [379.0, 492.27272727272725], [378.0, 483.20000000000005], [377.0, 2020.4], [376.0, 2521.0330578512408], [375.0, 308.6], [374.0, 803.7894736842106], [373.0, 4120.766666666666], [372.0, 270.5], [398.0, 81.0], [393.0, 82.0], [391.0, 68.0], [390.0, 68.0], [387.0, 68.0], [385.0, 83.0], [415.0, 74.0], [414.0, 74.0], [411.0, 75.0], [409.0, 84.8], [408.0, 1499.0], [407.0, 73.0], [406.0, 73.0], [405.0, 73.0], [401.0, 86.0], [400.0, 481.57142857142844], [429.0, 109.28571428571429], [426.0, 108.0], [425.0, 83.0], [423.0, 231.4], [421.0, 77.0], [416.0, 90.0], [445.0, 123.0], [444.0, 122.92307692307693], [443.0, 121.21052631578947], [441.0, 110.0], [437.0, 114.8], [435.0, 121.0], [434.0, 121.0], [432.0, 106.0], [462.0, 131.0], [460.0, 131.64285714285717], [454.0, 152.5], [453.0, 137.0], [451.0, 137.0], [450.0, 137.0], [449.0, 137.0], [477.0, 165.74999999999994], [475.0, 203.79999999999998], [474.0, 137.63829787234044], [473.0, 148.40740740740742], [471.0, 140.9090909090909], [468.0, 148.0], [467.0, 129.0], [466.0, 130.0], [464.0, 139.5], [495.0, 129.66666666666669], [493.0, 122.0], [491.0, 122.0], [490.0, 127.50000000000001], [488.0, 162.09523809523807], [486.0, 289.99999999999994], [484.0, 379.875], [482.0, 166.22222222222223], [481.0, 144.0], [480.0, 138.09523809523807], [500.0, 11342.378878281621], [499.0, 272.66666666666663], [498.0, 845.3758865248229], [497.0, 357.64197530864203], [1.0, 8051.0]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}, {"data": [[369.4041999999989, 4387.179000000007]], "isOverall": false, "label": "HTTP Request (mid image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 235.9, "minX": 1.71244632E12, "maxY": 5115568.466666667, "series": [{"data": [[1.71244638E12, 71309.78333333334], [1.71244632E12, 235.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71244638E12, 5115568.466666667], [1.71244632E12, 53393.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244638E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1008.8333333333333, "minX": 1.71244632E12, "maxY": 4415.797498991538, "series": [{"data": [[1.71244638E12, 4415.797498991538], [1.71244632E12, 1008.8333333333333]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244638E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1008.6904761904761, "minX": 1.71244632E12, "maxY": 2091.749495764415, "series": [{"data": [[1.71244638E12, 2091.749495764415], [1.71244632E12, 1008.6904761904761]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244638E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 517.2295280354969, "minX": 1.71244632E12, "maxY": 554.5000000000002, "series": [{"data": [[1.71244638E12, 517.2295280354969], [1.71244632E12, 554.5000000000002]], "isOverall": false, "label": "HTTP Request (mid image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244638E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 88.0, "minX": 1.0, "maxY": 24831.0, "series": [{"data": [[2.0, 7724.0], [541.0, 291.0], [649.0, 348.0], [645.0, 325.0], [677.0, 130.0], [47.0, 17921.0], [3.0, 261.0], [55.0, 9283.0], [4.0, 2216.5], [81.0, 9052.0], [88.0, 16595.5], [6.0, 88.0], [104.0, 13691.0], [7.0, 9730.0], [118.0, 1922.0], [8.0, 2081.5], [139.0, 181.0], [166.0, 12764.0], [10.0, 2257.5], [11.0, 18521.0], [229.0, 3752.0], [270.0, 5450.0], [16.0, 8732.5], [1.0, 5419.5], [17.0, 1168.0], [21.0, 2039.0], [22.0, 7441.5], [23.0, 6763.0], [25.0, 902.5], [402.0, 239.0], [27.0, 24831.0], [28.0, 9600.0], [473.0, 18655.0], [30.0, 5646.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 677.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 24831.0, "series": [{"data": [[2.0, 3850.5], [541.0, 291.0], [649.0, 348.0], [645.0, 325.0], [677.0, 130.0], [47.0, 17921.0], [3.0, 261.0], [55.0, 9283.0], [4.0, 2216.5], [81.0, 9052.0], [88.0, 16595.5], [6.0, 88.0], [104.0, 13690.5], [7.0, 9730.0], [118.0, 1922.0], [8.0, 2081.5], [139.0, 181.0], [166.0, 12764.0], [10.0, 2257.5], [11.0, 10234.0], [229.0, 3752.0], [270.0, 0.0], [16.0, 8732.5], [1.0, 5419.5], [17.0, 1168.0], [21.0, 0.0], [22.0, 7441.5], [23.0, 0.0], [25.0, 750.5], [402.0, 239.0], [27.0, 24831.0], [28.0, 9600.0], [473.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 677.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.033333333333333, "minX": 1.71244632E12, "maxY": 74.3, "series": [{"data": [[1.71244638E12, 74.3], [1.71244632E12, 9.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244638E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244632E12, "maxY": 67.06666666666666, "series": [{"data": [[1.71244638E12, 67.06666666666666], [1.71244632E12, 0.7]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.71244638E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.71244638E12, 15.55]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71244638E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.71244632E12, "maxY": 82.63333333333334, "series": [{"data": [[1.71244638E12, 82.63333333333334], [1.71244632E12, 0.7]], "isOverall": false, "label": "HTTP Request (mid image)-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244638E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.71244632E12, "maxY": 82.63333333333334, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71244638E12, 82.63333333333334], [1.71244632E12, 0.7]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71244638E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

