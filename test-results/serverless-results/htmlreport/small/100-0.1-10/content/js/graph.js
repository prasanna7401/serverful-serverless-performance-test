/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 642.0, "minX": 0.0, "maxY": 60061.0, "series": [{"data": [[0.0, 642.0], [0.1, 726.0], [0.2, 767.0], [0.3, 767.0], [0.4, 908.0], [0.5, 1001.0], [0.6, 1229.0], [0.7, 1331.0], [0.8, 1355.0], [0.9, 1443.0], [1.0, 1504.0], [1.1, 1517.0], [1.2, 1527.0], [1.3, 1543.0], [1.4, 1543.0], [1.5, 1600.0], [1.6, 2109.0], [1.7, 2158.0], [1.8, 3010.0], [1.9, 3276.0], [2.0, 3560.0], [2.1, 3648.0], [2.2, 4948.0], [2.3, 5706.0], [2.4, 6970.0], [2.5, 7910.0], [2.6, 7983.0], [2.7, 8031.0], [2.8, 9458.0], [2.9, 9831.0], [3.0, 10623.0], [3.1, 10665.0], [3.2, 11330.0], [3.3, 12646.0], [3.4, 13107.0], [3.5, 13243.0], [3.6, 13283.0], [3.7, 13754.0], [3.8, 14013.0], [3.9, 14994.0], [4.0, 15434.0], [4.1, 15438.0], [4.2, 17730.0], [4.3, 17825.0], [4.4, 18382.0], [4.5, 18938.0], [4.6, 18949.0], [4.7, 19317.0], [4.8, 19868.0], [4.9, 20150.0], [5.0, 20644.0], [5.1, 20999.0], [5.2, 21095.0], [5.3, 21290.0], [5.4, 21427.0], [5.5, 21658.0], [5.6, 21894.0], [5.7, 22117.0], [5.8, 22162.0], [5.9, 22372.0], [6.0, 22428.0], [6.1, 22523.0], [6.2, 22683.0], [6.3, 22732.0], [6.4, 22733.0], [6.5, 22857.0], [6.6, 22932.0], [6.7, 23022.0], [6.8, 23080.0], [6.9, 23091.0], [7.0, 23177.0], [7.1, 23217.0], [7.2, 23328.0], [7.3, 23654.0], [7.4, 23699.0], [7.5, 23835.0], [7.6, 23879.0], [7.7, 23942.0], [7.8, 24273.0], [7.9, 24287.0], [8.0, 24371.0], [8.1, 24440.0], [8.2, 24684.0], [8.3, 24772.0], [8.4, 24916.0], [8.5, 24986.0], [8.6, 25095.0], [8.7, 25188.0], [8.8, 25370.0], [8.9, 25459.0], [9.0, 25504.0], [9.1, 25693.0], [9.2, 25783.0], [9.3, 25913.0], [9.4, 26050.0], [9.5, 26106.0], [9.6, 26137.0], [9.7, 26172.0], [9.8, 26412.0], [9.9, 26420.0], [10.0, 26474.0], [10.1, 26484.0], [10.2, 26544.0], [10.3, 26664.0], [10.4, 26728.0], [10.5, 26753.0], [10.6, 27007.0], [10.7, 27025.0], [10.8, 27122.0], [10.9, 27185.0], [11.0, 27238.0], [11.1, 27267.0], [11.2, 27293.0], [11.3, 27324.0], [11.4, 27340.0], [11.5, 27479.0], [11.6, 27546.0], [11.7, 27566.0], [11.8, 27664.0], [11.9, 27704.0], [12.0, 27722.0], [12.1, 27727.0], [12.2, 27758.0], [12.3, 27790.0], [12.4, 27899.0], [12.5, 27944.0], [12.6, 27948.0], [12.7, 27987.0], [12.8, 28052.0], [12.9, 28091.0], [13.0, 28096.0], [13.1, 28133.0], [13.2, 28161.0], [13.3, 28246.0], [13.4, 28329.0], [13.5, 28519.0], [13.6, 28520.0], [13.7, 28527.0], [13.8, 28605.0], [13.9, 28699.0], [14.0, 28802.0], [14.1, 28844.0], [14.2, 28871.0], [14.3, 28877.0], [14.4, 28980.0], [14.5, 29411.0], [14.6, 29427.0], [14.7, 29445.0], [14.8, 29490.0], [14.9, 29490.0], [15.0, 29516.0], [15.1, 29584.0], [15.2, 29630.0], [15.3, 29772.0], [15.4, 29936.0], [15.5, 30062.0], [15.6, 30079.0], [15.7, 30104.0], [15.8, 30119.0], [15.9, 30195.0], [16.0, 30253.0], [16.1, 30302.0], [16.2, 30311.0], [16.3, 30311.0], [16.4, 30334.0], [16.5, 30417.0], [16.6, 30430.0], [16.7, 30434.0], [16.8, 30457.0], [16.9, 30516.0], [17.0, 30518.0], [17.1, 30590.0], [17.2, 30612.0], [17.3, 30681.0], [17.4, 30683.0], [17.5, 30692.0], [17.6, 30721.0], [17.7, 30774.0], [17.8, 30795.0], [17.9, 30923.0], [18.0, 30958.0], [18.1, 31028.0], [18.2, 31063.0], [18.3, 31109.0], [18.4, 31125.0], [18.5, 31182.0], [18.6, 31194.0], [18.7, 31214.0], [18.8, 31232.0], [18.9, 31233.0], [19.0, 31361.0], [19.1, 31388.0], [19.2, 31508.0], [19.3, 31543.0], [19.4, 31543.0], [19.5, 31620.0], [19.6, 31640.0], [19.7, 31661.0], [19.8, 31739.0], [19.9, 31833.0], [20.0, 31839.0], [20.1, 31846.0], [20.2, 31908.0], [20.3, 31929.0], [20.4, 31950.0], [20.5, 32010.0], [20.6, 32023.0], [20.7, 32045.0], [20.8, 32052.0], [20.9, 32075.0], [21.0, 32085.0], [21.1, 32108.0], [21.2, 32130.0], [21.3, 32257.0], [21.4, 32269.0], [21.5, 32296.0], [21.6, 32303.0], [21.7, 32340.0], [21.8, 32397.0], [21.9, 32400.0], [22.0, 32400.0], [22.1, 32414.0], [22.2, 32454.0], [22.3, 32461.0], [22.4, 32547.0], [22.5, 32565.0], [22.6, 32598.0], [22.7, 32691.0], [22.8, 32693.0], [22.9, 32717.0], [23.0, 32762.0], [23.1, 32781.0], [23.2, 32798.0], [23.3, 32808.0], [23.4, 32816.0], [23.5, 32838.0], [23.6, 32857.0], [23.7, 32868.0], [23.8, 32875.0], [23.9, 32940.0], [24.0, 33009.0], [24.1, 33022.0], [24.2, 33032.0], [24.3, 33071.0], [24.4, 33177.0], [24.5, 33186.0], [24.6, 33206.0], [24.7, 33274.0], [24.8, 33280.0], [24.9, 33291.0], [25.0, 33311.0], [25.1, 33320.0], [25.2, 33347.0], [25.3, 33427.0], [25.4, 33451.0], [25.5, 33459.0], [25.6, 33475.0], [25.7, 33527.0], [25.8, 33533.0], [25.9, 33662.0], [26.0, 33690.0], [26.1, 33706.0], [26.2, 33708.0], [26.3, 33886.0], [26.4, 33896.0], [26.5, 33929.0], [26.6, 33931.0], [26.7, 33949.0], [26.8, 33988.0], [26.9, 33997.0], [27.0, 34005.0], [27.1, 34018.0], [27.2, 34029.0], [27.3, 34147.0], [27.4, 34186.0], [27.5, 34196.0], [27.6, 34205.0], [27.7, 34207.0], [27.8, 34215.0], [27.9, 34306.0], [28.0, 34341.0], [28.1, 34345.0], [28.2, 34382.0], [28.3, 34382.0], [28.4, 34388.0], [28.5, 34407.0], [28.6, 34421.0], [28.7, 34437.0], [28.8, 34478.0], [28.9, 34495.0], [29.0, 34507.0], [29.1, 34516.0], [29.2, 34583.0], [29.3, 34583.0], [29.4, 34594.0], [29.5, 34597.0], [29.6, 34605.0], [29.7, 34656.0], [29.8, 34781.0], [29.9, 34817.0], [30.0, 34875.0], [30.1, 34908.0], [30.2, 34929.0], [30.3, 34973.0], [30.4, 35022.0], [30.5, 35026.0], [30.6, 35034.0], [30.7, 35038.0], [30.8, 35059.0], [30.9, 35101.0], [31.0, 35129.0], [31.1, 35184.0], [31.2, 35204.0], [31.3, 35205.0], [31.4, 35223.0], [31.5, 35226.0], [31.6, 35227.0], [31.7, 35266.0], [31.8, 35267.0], [31.9, 35295.0], [32.0, 35303.0], [32.1, 35382.0], [32.2, 35393.0], [32.3, 35395.0], [32.4, 35400.0], [32.5, 35404.0], [32.6, 35461.0], [32.7, 35496.0], [32.8, 35496.0], [32.9, 35567.0], [33.0, 35578.0], [33.1, 35650.0], [33.2, 35712.0], [33.3, 35739.0], [33.4, 35746.0], [33.5, 35754.0], [33.6, 35821.0], [33.7, 35845.0], [33.8, 35852.0], [33.9, 35904.0], [34.0, 35907.0], [34.1, 35918.0], [34.2, 35919.0], [34.3, 35924.0], [34.4, 35935.0], [34.5, 35955.0], [34.6, 35995.0], [34.7, 36014.0], [34.8, 36085.0], [34.9, 36108.0], [35.0, 36140.0], [35.1, 36147.0], [35.2, 36152.0], [35.3, 36185.0], [35.4, 36223.0], [35.5, 36224.0], [35.6, 36300.0], [35.7, 36311.0], [35.8, 36311.0], [35.9, 36324.0], [36.0, 36342.0], [36.1, 36352.0], [36.2, 36352.0], [36.3, 36402.0], [36.4, 36431.0], [36.5, 36437.0], [36.6, 36439.0], [36.7, 36447.0], [36.8, 36455.0], [36.9, 36466.0], [37.0, 36475.0], [37.1, 36549.0], [37.2, 36557.0], [37.3, 36615.0], [37.4, 36651.0], [37.5, 36677.0], [37.6, 36689.0], [37.7, 36762.0], [37.8, 36804.0], [37.9, 36810.0], [38.0, 36828.0], [38.1, 36843.0], [38.2, 36861.0], [38.3, 36866.0], [38.4, 36923.0], [38.5, 36934.0], [38.6, 36966.0], [38.7, 37001.0], [38.8, 37023.0], [38.9, 37045.0], [39.0, 37053.0], [39.1, 37054.0], [39.2, 37061.0], [39.3, 37067.0], [39.4, 37070.0], [39.5, 37082.0], [39.6, 37106.0], [39.7, 37150.0], [39.8, 37196.0], [39.9, 37198.0], [40.0, 37231.0], [40.1, 37232.0], [40.2, 37246.0], [40.3, 37260.0], [40.4, 37286.0], [40.5, 37288.0], [40.6, 37299.0], [40.7, 37338.0], [40.8, 37362.0], [40.9, 37374.0], [41.0, 37377.0], [41.1, 37380.0], [41.2, 37425.0], [41.3, 37566.0], [41.4, 37581.0], [41.5, 37639.0], [41.6, 37695.0], [41.7, 37703.0], [41.8, 37746.0], [41.9, 37767.0], [42.0, 37804.0], [42.1, 37888.0], [42.2, 37948.0], [42.3, 37972.0], [42.4, 37973.0], [42.5, 37986.0], [42.6, 37986.0], [42.7, 37986.0], [42.8, 38080.0], [42.9, 38107.0], [43.0, 38126.0], [43.1, 38129.0], [43.2, 38195.0], [43.3, 38256.0], [43.4, 38266.0], [43.5, 38272.0], [43.6, 38292.0], [43.7, 38297.0], [43.8, 38338.0], [43.9, 38357.0], [44.0, 38400.0], [44.1, 38430.0], [44.2, 38517.0], [44.3, 38519.0], [44.4, 38533.0], [44.5, 38643.0], [44.6, 38651.0], [44.7, 38651.0], [44.8, 38731.0], [44.9, 38766.0], [45.0, 38797.0], [45.1, 38813.0], [45.2, 38851.0], [45.3, 38868.0], [45.4, 38869.0], [45.5, 38869.0], [45.6, 38894.0], [45.7, 38908.0], [45.8, 38912.0], [45.9, 38913.0], [46.0, 38913.0], [46.1, 38945.0], [46.2, 38950.0], [46.3, 38955.0], [46.4, 38987.0], [46.5, 38989.0], [46.6, 38996.0], [46.7, 39028.0], [46.8, 39066.0], [46.9, 39087.0], [47.0, 39089.0], [47.1, 39102.0], [47.2, 39106.0], [47.3, 39118.0], [47.4, 39178.0], [47.5, 39183.0], [47.6, 39308.0], [47.7, 39323.0], [47.8, 39366.0], [47.9, 39374.0], [48.0, 39416.0], [48.1, 39423.0], [48.2, 39427.0], [48.3, 39431.0], [48.4, 39450.0], [48.5, 39456.0], [48.6, 39458.0], [48.7, 39503.0], [48.8, 39526.0], [48.9, 39577.0], [49.0, 39578.0], [49.1, 39587.0], [49.2, 39628.0], [49.3, 39655.0], [49.4, 39688.0], [49.5, 39688.0], [49.6, 39688.0], [49.7, 39690.0], [49.8, 39793.0], [49.9, 39826.0], [50.0, 39877.0], [50.1, 39895.0], [50.2, 39896.0], [50.3, 39928.0], [50.4, 40002.0], [50.5, 40020.0], [50.6, 40020.0], [50.7, 40081.0], [50.8, 40088.0], [50.9, 40091.0], [51.0, 40101.0], [51.1, 40138.0], [51.2, 40141.0], [51.3, 40308.0], [51.4, 40333.0], [51.5, 40338.0], [51.6, 40343.0], [51.7, 40344.0], [51.8, 40346.0], [51.9, 40355.0], [52.0, 40377.0], [52.1, 40425.0], [52.2, 40439.0], [52.3, 40447.0], [52.4, 40490.0], [52.5, 40492.0], [52.6, 40545.0], [52.7, 40578.0], [52.8, 40591.0], [52.9, 40602.0], [53.0, 40619.0], [53.1, 40641.0], [53.2, 40672.0], [53.3, 40748.0], [53.4, 40794.0], [53.5, 40812.0], [53.6, 40844.0], [53.7, 40917.0], [53.8, 40917.0], [53.9, 40946.0], [54.0, 40947.0], [54.1, 40947.0], [54.2, 40954.0], [54.3, 40996.0], [54.4, 41015.0], [54.5, 41026.0], [54.6, 41063.0], [54.7, 41106.0], [54.8, 41127.0], [54.9, 41141.0], [55.0, 41186.0], [55.1, 41191.0], [55.2, 41217.0], [55.3, 41235.0], [55.4, 41238.0], [55.5, 41267.0], [55.6, 41268.0], [55.7, 41279.0], [55.8, 41284.0], [55.9, 41320.0], [56.0, 41323.0], [56.1, 41336.0], [56.2, 41337.0], [56.3, 41369.0], [56.4, 41376.0], [56.5, 41393.0], [56.6, 41446.0], [56.7, 41446.0], [56.8, 41449.0], [56.9, 41458.0], [57.0, 41473.0], [57.1, 41526.0], [57.2, 41543.0], [57.3, 41551.0], [57.4, 41603.0], [57.5, 41610.0], [57.6, 41626.0], [57.7, 41630.0], [57.8, 41729.0], [57.9, 41732.0], [58.0, 41778.0], [58.1, 41799.0], [58.2, 41799.0], [58.3, 41827.0], [58.4, 41838.0], [58.5, 41903.0], [58.6, 41917.0], [58.7, 41921.0], [58.8, 41921.0], [58.9, 41959.0], [59.0, 42014.0], [59.1, 42051.0], [59.2, 42087.0], [59.3, 42113.0], [59.4, 42137.0], [59.5, 42189.0], [59.6, 42189.0], [59.7, 42189.0], [59.8, 42202.0], [59.9, 42218.0], [60.0, 42224.0], [60.1, 42237.0], [60.2, 42263.0], [60.3, 42272.0], [60.4, 42272.0], [60.5, 42358.0], [60.6, 42365.0], [60.7, 42395.0], [60.8, 42401.0], [60.9, 42413.0], [61.0, 42439.0], [61.1, 42457.0], [61.2, 42490.0], [61.3, 42491.0], [61.4, 42496.0], [61.5, 42497.0], [61.6, 42594.0], [61.7, 42601.0], [61.8, 42627.0], [61.9, 42644.0], [62.0, 42741.0], [62.1, 42741.0], [62.2, 42751.0], [62.3, 42754.0], [62.4, 42757.0], [62.5, 42757.0], [62.6, 42768.0], [62.7, 42773.0], [62.8, 42805.0], [62.9, 42826.0], [63.0, 42904.0], [63.1, 42907.0], [63.2, 42938.0], [63.3, 42971.0], [63.4, 42978.0], [63.5, 42993.0], [63.6, 42995.0], [63.7, 43006.0], [63.8, 43008.0], [63.9, 43076.0], [64.0, 43110.0], [64.1, 43110.0], [64.2, 43117.0], [64.3, 43176.0], [64.4, 43176.0], [64.5, 43201.0], [64.6, 43210.0], [64.7, 43212.0], [64.8, 43236.0], [64.9, 43280.0], [65.0, 43284.0], [65.1, 43299.0], [65.2, 43330.0], [65.3, 43340.0], [65.4, 43380.0], [65.5, 43517.0], [65.6, 43518.0], [65.7, 43536.0], [65.8, 43538.0], [65.9, 43600.0], [66.0, 43603.0], [66.1, 43623.0], [66.2, 43629.0], [66.3, 43629.0], [66.4, 43640.0], [66.5, 43708.0], [66.6, 43716.0], [66.7, 43736.0], [66.8, 43764.0], [66.9, 43823.0], [67.0, 43827.0], [67.1, 43878.0], [67.2, 43930.0], [67.3, 43961.0], [67.4, 43988.0], [67.5, 44007.0], [67.6, 44012.0], [67.7, 44052.0], [67.8, 44066.0], [67.9, 44084.0], [68.0, 44084.0], [68.1, 44136.0], [68.2, 44217.0], [68.3, 44237.0], [68.4, 44251.0], [68.5, 44253.0], [68.6, 44260.0], [68.7, 44305.0], [68.8, 44356.0], [68.9, 44364.0], [69.0, 44377.0], [69.1, 44437.0], [69.2, 44450.0], [69.3, 44466.0], [69.4, 44554.0], [69.5, 44560.0], [69.6, 44562.0], [69.7, 44587.0], [69.8, 44591.0], [69.9, 44626.0], [70.0, 44646.0], [70.1, 44700.0], [70.2, 44706.0], [70.3, 44767.0], [70.4, 44787.0], [70.5, 44790.0], [70.6, 44880.0], [70.7, 44899.0], [70.8, 44905.0], [70.9, 44905.0], [71.0, 44906.0], [71.1, 44924.0], [71.2, 44943.0], [71.3, 44944.0], [71.4, 44944.0], [71.5, 44950.0], [71.6, 44954.0], [71.7, 44964.0], [71.8, 44964.0], [71.9, 44974.0], [72.0, 44999.0], [72.1, 45026.0], [72.2, 45056.0], [72.3, 45119.0], [72.4, 45127.0], [72.5, 45139.0], [72.6, 45145.0], [72.7, 45195.0], [72.8, 45246.0], [72.9, 45254.0], [73.0, 45309.0], [73.1, 45310.0], [73.2, 45321.0], [73.3, 45330.0], [73.4, 45397.0], [73.5, 45408.0], [73.6, 45481.0], [73.7, 45507.0], [73.8, 45522.0], [73.9, 45524.0], [74.0, 45598.0], [74.1, 45628.0], [74.2, 45674.0], [74.3, 45697.0], [74.4, 45737.0], [74.5, 45739.0], [74.6, 45761.0], [74.7, 45773.0], [74.8, 45773.0], [74.9, 45781.0], [75.0, 45797.0], [75.1, 45847.0], [75.2, 45847.0], [75.3, 45852.0], [75.4, 45875.0], [75.5, 45877.0], [75.6, 45899.0], [75.7, 45923.0], [75.8, 46062.0], [75.9, 46081.0], [76.0, 46091.0], [76.1, 46145.0], [76.2, 46180.0], [76.3, 46238.0], [76.4, 46245.0], [76.5, 46245.0], [76.6, 46286.0], [76.7, 46323.0], [76.8, 46367.0], [76.9, 46387.0], [77.0, 46409.0], [77.1, 46437.0], [77.2, 46458.0], [77.3, 46482.0], [77.4, 46482.0], [77.5, 46501.0], [77.6, 46529.0], [77.7, 46533.0], [77.8, 46556.0], [77.9, 46557.0], [78.0, 46569.0], [78.1, 46644.0], [78.2, 46657.0], [78.3, 46661.0], [78.4, 46663.0], [78.5, 46683.0], [78.6, 46704.0], [78.7, 46727.0], [78.8, 46767.0], [78.9, 46773.0], [79.0, 46799.0], [79.1, 46813.0], [79.2, 46815.0], [79.3, 46828.0], [79.4, 46846.0], [79.5, 46938.0], [79.6, 46968.0], [79.7, 47010.0], [79.8, 47050.0], [79.9, 47064.0], [80.0, 47067.0], [80.1, 47114.0], [80.2, 47248.0], [80.3, 47250.0], [80.4, 47262.0], [80.5, 47291.0], [80.6, 47307.0], [80.7, 47314.0], [80.8, 47326.0], [80.9, 47331.0], [81.0, 47365.0], [81.1, 47368.0], [81.2, 47384.0], [81.3, 47390.0], [81.4, 47437.0], [81.5, 47450.0], [81.6, 47514.0], [81.7, 47571.0], [81.8, 47629.0], [81.9, 47666.0], [82.0, 47674.0], [82.1, 47680.0], [82.2, 47684.0], [82.3, 47693.0], [82.4, 47700.0], [82.5, 47793.0], [82.6, 47802.0], [82.7, 47804.0], [82.8, 47806.0], [82.9, 47809.0], [83.0, 47815.0], [83.1, 47822.0], [83.2, 47822.0], [83.3, 47827.0], [83.4, 47873.0], [83.5, 47915.0], [83.6, 47989.0], [83.7, 48006.0], [83.8, 48022.0], [83.9, 48045.0], [84.0, 48051.0], [84.1, 48137.0], [84.2, 48186.0], [84.3, 48189.0], [84.4, 48196.0], [84.5, 48216.0], [84.6, 48233.0], [84.7, 48245.0], [84.8, 48275.0], [84.9, 48279.0], [85.0, 48336.0], [85.1, 48373.0], [85.2, 48420.0], [85.3, 48465.0], [85.4, 48466.0], [85.5, 48476.0], [85.6, 48525.0], [85.7, 48543.0], [85.8, 48561.0], [85.9, 48570.0], [86.0, 48640.0], [86.1, 48640.0], [86.2, 48669.0], [86.3, 48718.0], [86.4, 48722.0], [86.5, 48728.0], [86.6, 48734.0], [86.7, 48765.0], [86.8, 48778.0], [86.9, 48805.0], [87.0, 48839.0], [87.1, 48875.0], [87.2, 48958.0], [87.3, 49075.0], [87.4, 49139.0], [87.5, 49206.0], [87.6, 49273.0], [87.7, 49300.0], [87.8, 49304.0], [87.9, 49321.0], [88.0, 49365.0], [88.1, 49400.0], [88.2, 49408.0], [88.3, 49425.0], [88.4, 49460.0], [88.5, 49467.0], [88.6, 49483.0], [88.7, 49493.0], [88.8, 49557.0], [88.9, 49560.0], [89.0, 49595.0], [89.1, 49655.0], [89.2, 49742.0], [89.3, 49774.0], [89.4, 49793.0], [89.5, 49799.0], [89.6, 49810.0], [89.7, 49916.0], [89.8, 49931.0], [89.9, 49932.0], [90.0, 49985.0], [90.1, 50009.0], [90.2, 50075.0], [90.3, 50085.0], [90.4, 50094.0], [90.5, 50122.0], [90.6, 50156.0], [90.7, 50324.0], [90.8, 50328.0], [90.9, 50338.0], [91.0, 50370.0], [91.1, 50407.0], [91.2, 50466.0], [91.3, 50466.0], [91.4, 50592.0], [91.5, 50598.0], [91.6, 50667.0], [91.7, 50693.0], [91.8, 50724.0], [91.9, 50741.0], [92.0, 50786.0], [92.1, 50791.0], [92.2, 50842.0], [92.3, 50887.0], [92.4, 50901.0], [92.5, 50990.0], [92.6, 51031.0], [92.7, 51192.0], [92.8, 51205.0], [92.9, 51237.0], [93.0, 51315.0], [93.1, 51345.0], [93.2, 51556.0], [93.3, 51581.0], [93.4, 51583.0], [93.5, 51604.0], [93.6, 51615.0], [93.7, 51752.0], [93.8, 51794.0], [93.9, 51812.0], [94.0, 51829.0], [94.1, 51859.0], [94.2, 51866.0], [94.3, 51882.0], [94.4, 52022.0], [94.5, 52082.0], [94.6, 52163.0], [94.7, 52166.0], [94.8, 52231.0], [94.9, 52379.0], [95.0, 52531.0], [95.1, 52579.0], [95.2, 52595.0], [95.3, 52604.0], [95.4, 52647.0], [95.5, 52771.0], [95.6, 52818.0], [95.7, 52941.0], [95.8, 52976.0], [95.9, 52996.0], [96.0, 53010.0], [96.1, 53059.0], [96.2, 53294.0], [96.3, 53350.0], [96.4, 53352.0], [96.5, 53453.0], [96.6, 53454.0], [96.7, 53501.0], [96.8, 53504.0], [96.9, 53567.0], [97.0, 53568.0], [97.1, 53723.0], [97.2, 53790.0], [97.3, 53823.0], [97.4, 53904.0], [97.5, 54085.0], [97.6, 54128.0], [97.7, 54398.0], [97.8, 54413.0], [97.9, 54529.0], [98.0, 54533.0], [98.1, 54533.0], [98.2, 54541.0], [98.3, 54566.0], [98.4, 54637.0], [98.5, 54665.0], [98.6, 54886.0], [98.7, 55087.0], [98.8, 55242.0], [98.9, 55857.0], [99.0, 56292.0], [99.1, 56372.0], [99.2, 56424.0], [99.3, 56424.0], [99.4, 57139.0], [99.5, 57411.0], [99.6, 57453.0], [99.7, 57574.0], [99.8, 59549.0], [99.9, 60061.0]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 13.0, "series": [{"data": [[33300.0, 3.0], [34100.0, 3.0], [34500.0, 6.0], [33700.0, 2.0], [32900.0, 1.0], [36500.0, 2.0], [36100.0, 5.0], [34900.0, 3.0], [35700.0, 4.0], [35300.0, 4.0], [37300.0, 5.0], [38100.0, 4.0], [38900.0, 10.0], [36900.0, 3.0], [37700.0, 3.0], [38500.0, 3.0], [40500.0, 3.0], [40900.0, 7.0], [40100.0, 3.0], [39300.0, 4.0], [39700.0, 1.0], [41300.0, 7.0], [41700.0, 5.0], [42100.0, 5.0], [42500.0, 1.0], [42900.0, 7.0], [44900.0, 13.0], [43700.0, 4.0], [44500.0, 5.0], [43300.0, 3.0], [44100.0, 1.0], [45300.0, 5.0], [45700.0, 7.0], [46100.0, 2.0], [46500.0, 6.0], [46900.0, 2.0], [48100.0, 4.0], [47300.0, 8.0], [48500.0, 4.0], [47700.0, 2.0], [48900.0, 1.0], [50100.0, 2.0], [49300.0, 4.0], [49700.0, 4.0], [50500.0, 2.0], [50900.0, 2.0], [51700.0, 2.0], [52900.0, 3.0], [52100.0, 2.0], [52500.0, 3.0], [51300.0, 2.0], [54500.0, 5.0], [53300.0, 2.0], [53700.0, 2.0], [54100.0, 1.0], [600.0, 1.0], [700.0, 2.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 1.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 4.0], [1600.0, 1.0], [2100.0, 2.0], [3000.0, 1.0], [3200.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [4900.0, 1.0], [5700.0, 1.0], [6900.0, 1.0], [7900.0, 2.0], [8000.0, 1.0], [9400.0, 1.0], [9800.0, 1.0], [10600.0, 2.0], [11300.0, 1.0], [12600.0, 1.0], [13100.0, 1.0], [13200.0, 2.0], [13700.0, 1.0], [14000.0, 1.0], [14900.0, 1.0], [15400.0, 2.0], [18200.0, 1.0], [17800.0, 1.0], [19800.0, 1.0], [20600.0, 1.0], [21000.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [23200.0, 1.0], [22600.0, 1.0], [23000.0, 3.0], [22800.0, 1.0], [24200.0, 2.0], [24400.0, 1.0], [23600.0, 2.0], [23800.0, 2.0], [25400.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [26400.0, 4.0], [25600.0, 1.0], [26000.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [27200.0, 3.0], [27600.0, 1.0], [27000.0, 2.0], [28600.0, 2.0], [28000.0, 3.0], [27800.0, 1.0], [28200.0, 1.0], [28800.0, 4.0], [29600.0, 1.0], [29400.0, 5.0], [30600.0, 4.0], [30400.0, 4.0], [30000.0, 2.0], [30200.0, 1.0], [31200.0, 3.0], [31600.0, 3.0], [31000.0, 2.0], [32000.0, 6.0], [32400.0, 5.0], [32200.0, 3.0], [31800.0, 3.0], [32600.0, 2.0], [33600.0, 2.0], [34000.0, 3.0], [34800.0, 2.0], [32800.0, 6.0], [33200.0, 4.0], [34400.0, 5.0], [35200.0, 8.0], [36800.0, 6.0], [36000.0, 2.0], [36400.0, 8.0], [35600.0, 1.0], [37200.0, 7.0], [38800.0, 6.0], [37600.0, 2.0], [38400.0, 2.0], [38000.0, 1.0], [39600.0, 6.0], [40000.0, 6.0], [40400.0, 5.0], [40800.0, 2.0], [41200.0, 7.0], [41600.0, 4.0], [42400.0, 8.0], [42000.0, 3.0], [42800.0, 2.0], [43200.0, 7.0], [44000.0, 6.0], [43600.0, 6.0], [44800.0, 2.0], [44400.0, 3.0], [46800.0, 4.0], [45600.0, 3.0], [46000.0, 3.0], [46400.0, 5.0], [45200.0, 2.0], [47600.0, 6.0], [47200.0, 4.0], [48400.0, 4.0], [48000.0, 4.0], [48800.0, 3.0], [50000.0, 4.0], [49200.0, 2.0], [50400.0, 3.0], [49600.0, 1.0], [50800.0, 2.0], [51600.0, 2.0], [52800.0, 1.0], [51200.0, 2.0], [52000.0, 2.0], [53200.0, 1.0], [54800.0, 1.0], [54000.0, 1.0], [55200.0, 1.0], [54400.0, 1.0], [56400.0, 2.0], [60000.0, 1.0], [34300.0, 6.0], [33500.0, 2.0], [33100.0, 2.0], [33900.0, 5.0], [34700.0, 1.0], [35100.0, 3.0], [35900.0, 8.0], [36300.0, 7.0], [35500.0, 2.0], [36700.0, 1.0], [38700.0, 3.0], [37900.0, 6.0], [37100.0, 4.0], [38300.0, 2.0], [37500.0, 2.0], [40300.0, 8.0], [39500.0, 5.0], [40700.0, 2.0], [39100.0, 5.0], [39900.0, 1.0], [41900.0, 5.0], [41100.0, 5.0], [42700.0, 8.0], [41500.0, 3.0], [42300.0, 3.0], [43100.0, 5.0], [44300.0, 4.0], [43500.0, 4.0], [44700.0, 5.0], [43900.0, 3.0], [45100.0, 5.0], [46300.0, 4.0], [46700.0, 5.0], [45500.0, 4.0], [45900.0, 1.0], [47100.0, 1.0], [48700.0, 6.0], [47900.0, 2.0], [48300.0, 2.0], [47500.0, 2.0], [49100.0, 1.0], [49500.0, 3.0], [49900.0, 4.0], [50300.0, 4.0], [51100.0, 1.0], [50700.0, 4.0], [51500.0, 3.0], [52700.0, 1.0], [52300.0, 1.0], [53500.0, 4.0], [53900.0, 1.0], [54300.0, 1.0], [56300.0, 1.0], [57100.0, 1.0], [57500.0, 1.0], [59500.0, 1.0], [17700.0, 1.0], [18300.0, 1.0], [18900.0, 2.0], [19300.0, 1.0], [20100.0, 1.0], [20900.0, 1.0], [22500.0, 1.0], [22100.0, 2.0], [22300.0, 1.0], [22700.0, 2.0], [23300.0, 1.0], [23100.0, 1.0], [22900.0, 1.0], [24300.0, 1.0], [23900.0, 1.0], [25100.0, 1.0], [24900.0, 2.0], [25500.0, 1.0], [25300.0, 1.0], [24700.0, 1.0], [25700.0, 1.0], [26100.0, 3.0], [25900.0, 1.0], [26500.0, 1.0], [27300.0, 2.0], [26700.0, 2.0], [27100.0, 2.0], [27500.0, 2.0], [27700.0, 5.0], [28300.0, 1.0], [28100.0, 2.0], [27900.0, 3.0], [28500.0, 3.0], [28900.0, 1.0], [29500.0, 2.0], [30500.0, 3.0], [30700.0, 3.0], [29900.0, 1.0], [30300.0, 4.0], [30100.0, 3.0], [29700.0, 1.0], [31100.0, 4.0], [31700.0, 1.0], [30900.0, 2.0], [31300.0, 2.0], [31500.0, 2.0], [32300.0, 3.0], [32500.0, 3.0], [32700.0, 4.0], [31900.0, 3.0], [32100.0, 2.0], [34600.0, 2.0], [33400.0, 4.0], [33800.0, 2.0], [34200.0, 3.0], [33000.0, 4.0], [35400.0, 5.0], [35800.0, 3.0], [36600.0, 4.0], [36200.0, 2.0], [35000.0, 5.0], [38200.0, 5.0], [37000.0, 9.0], [38600.0, 3.0], [37400.0, 1.0], [37800.0, 2.0], [39800.0, 4.0], [39400.0, 7.0], [40600.0, 4.0], [39000.0, 4.0], [41400.0, 5.0], [41000.0, 3.0], [41800.0, 2.0], [42200.0, 7.0], [43000.0, 3.0], [42600.0, 3.0], [45000.0, 2.0], [44200.0, 5.0], [43800.0, 3.0], [44600.0, 2.0], [45400.0, 2.0], [45800.0, 6.0], [47000.0, 4.0], [46600.0, 5.0], [46200.0, 4.0], [47800.0, 9.0], [48600.0, 3.0], [49000.0, 1.0], [48200.0, 5.0], [47400.0, 2.0], [49400.0, 7.0], [50600.0, 2.0], [49800.0, 1.0], [51000.0, 1.0], [52600.0, 2.0], [51800.0, 5.0], [53000.0, 2.0], [52200.0, 1.0], [53800.0, 1.0], [54600.0, 2.0], [53400.0, 2.0], [55000.0, 1.0], [55800.0, 1.0], [56200.0, 1.0], [57400.0, 2.0]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 979.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 979.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 17.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 21.270833333333343, "minX": 1.71244278E12, "maxY": 100.0, "series": [{"data": [[1.7124432E12, 21.270833333333343], [1.7124429E12, 100.0], [1.71244308E12, 99.70629370629369], [1.71244278E12, 100.0], [1.71244296E12, 100.0], [1.71244314E12, 79.84049079754608], [1.71244284E12, 100.0], [1.71244302E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124432E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1001.0, "minX": 3.0, "maxY": 53501.0, "series": [{"data": [[3.0, 9377.0], [4.0, 21427.0], [5.0, 22857.0], [6.0, 22932.0], [7.0, 13754.0], [8.0, 23091.0], [9.0, 24986.0], [10.0, 18382.0], [11.0, 27566.0], [12.0, 26172.0], [13.0, 28052.0], [14.0, 32940.0], [15.0, 28091.0], [16.0, 27512.5], [17.0, 34516.0], [18.0, 1229.0], [19.0, 1001.0], [20.0, 40101.0], [21.0, 35272.0], [22.0, 35205.0], [23.0, 40490.0], [24.0, 42971.0], [25.0, 36152.0], [26.0, 27373.0], [29.0, 26721.333333333336], [30.0, 41248.0], [31.0, 47684.0], [33.0, 42051.0], [32.0, 42358.0], [35.0, 3276.0], [34.0, 41882.5], [37.0, 7983.0], [36.0, 10623.0], [39.0, 14013.0], [38.0, 10665.0], [41.0, 5706.0], [40.0, 9458.0], [43.0, 47291.0], [42.0, 44237.0], [45.0, 42272.0], [44.0, 13243.0], [46.0, 30685.0], [49.0, 46409.0], [48.0, 10191.0], [51.0, 34921.0], [50.0, 35353.5], [53.0, 7910.0], [52.0, 24273.0], [55.0, 45838.0], [54.0, 21290.0], [57.0, 30629.4], [56.0, 18444.0], [59.0, 44712.0], [58.0, 49985.0], [61.0, 23022.0], [60.0, 34035.0], [63.0, 23389.5], [62.0, 50328.0], [66.0, 22117.0], [65.0, 23835.0], [64.0, 37063.6], [71.0, 27227.0], [70.0, 48570.0], [69.0, 23942.0], [68.0, 29572.0], [74.0, 27987.0], [73.0, 47745.0], [72.0, 26412.0], [78.0, 31799.0], [77.0, 38964.333333333336], [76.0, 28774.5], [83.0, 46683.0], [82.0, 39971.5], [81.0, 41220.0], [80.0, 34287.0], [87.0, 38272.5], [86.0, 43587.25], [85.0, 33009.0], [84.0, 53501.0], [91.0, 34900.416666666664], [90.0, 38386.666666666664], [89.0, 41569.5], [88.0, 48316.00000000001], [95.0, 30516.0], [94.0, 42543.57142857143], [93.0, 37348.0], [92.0, 32991.0], [99.0, 40578.0], [98.0, 39573.71428571428], [97.0, 35226.0], [96.0, 38629.78571428572], [100.0, 39608.405228758165]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}, {"data": [[92.89299999999999, 38509.776]], "isOverall": false, "label": "HTTP Request (light image)-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.31666666666666, "minX": 1.71244278E12, "maxY": 39554.25, "series": [{"data": [[1.7124432E12, 191.2], [1.7124429E12, 521.5666666666667], [1.71244308E12, 569.6166666666667], [1.71244278E12, 102.31666666666666], [1.71244296E12, 605.4666666666667], [1.71244314E12, 653.0166666666667], [1.71244284E12, 802.3833333333333], [1.71244302E12, 601.2333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7124432E12, 9837.05], [1.7124429E12, 26646.05], [1.71244308E12, 29309.45], [1.71244278E12, 4303.5], [1.71244296E12, 31154.7], [1.71244314E12, 33407.4], [1.71244284E12, 39554.25], [1.71244302E12, 30744.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124432E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20808.809523809523, "minX": 1.71244278E12, "maxY": 41089.05333333334, "series": [{"data": [[1.7124432E12, 26308.625000000007], [1.7124429E12, 39671.3], [1.71244308E12, 40936.790209790226], [1.71244278E12, 20808.809523809523], [1.71244296E12, 40665.23684210528], [1.71244314E12, 36767.1901840491], [1.71244284E12, 38659.176165803096], [1.71244302E12, 41089.05333333334]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7124432E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20808.666666666668, "minX": 1.71244278E12, "maxY": 41089.03333333333, "series": [{"data": [[1.7124432E12, 26308.60416666667], [1.7124429E12, 39671.276923076904], [1.71244308E12, 40936.77622377626], [1.71244278E12, 20808.666666666668], [1.71244296E12, 40665.2105263158], [1.71244314E12, 36767.1717791411], [1.71244284E12, 38659.11917098446], [1.71244302E12, 41089.03333333333]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7124432E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15.9375, "minX": 1.71244278E12, "maxY": 152.33333333333331, "series": [{"data": [[1.7124432E12, 15.9375], [1.7124429E12, 61.092307692307664], [1.71244308E12, 46.94405594405591], [1.71244278E12, 152.33333333333331], [1.71244296E12, 40.42763157894737], [1.71244314E12, 43.79754601226993], [1.71244284E12, 68.63730569948181], [1.71244302E12, 29.399999999999988]], "isOverall": false, "label": "HTTP Request (light image)", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7124432E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 767.0, "minX": 1.71244278E12, "maxY": 60061.0, "series": [{"data": [[1.7124432E12, 47684.0], [1.7124429E12, 53059.0], [1.71244308E12, 57411.0], [1.71244278E12, 32340.0], [1.71244296E12, 56372.0], [1.71244314E12, 60061.0], [1.71244284E12, 52604.0], [1.71244302E12, 57453.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7124432E12, 767.0], [1.7124429E12, 18938.0], [1.71244308E12, 23654.0], [1.71244278E12, 18949.0], [1.71244296E12, 23217.0], [1.71244314E12, 4948.0], [1.71244284E12, 25783.0], [1.71244302E12, 12646.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7124432E12, 42371.9], [1.7124429E12, 48189.0], [1.71244308E12, 52802.6], [1.71244278E12, 32109.0], [1.71244296E12, 49539.9], [1.71244314E12, 52214.00000000001], [1.71244284E12, 45685.5], [1.71244302E12, 50693.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7124432E12, 47684.0], [1.7124429E12, 52705.89999999999], [1.71244308E12, 56976.72], [1.71244278E12, 32340.0], [1.71244296E12, 55397.329999999994], [1.71244314E12, 59738.44], [1.71244284E12, 50494.30000000002], [1.71244302E12, 56938.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7124432E12, 28071.5], [1.7124429E12, 40545.0], [1.71244308E12, 40996.0], [1.71244278E12, 27715.5], [1.71244296E12, 39984.0], [1.71244314E12, 35656.0], [1.71244284E12, 41273.0], [1.71244302E12, 42189.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7124432E12, 43573.25], [1.7124429E12, 49100.5], [1.71244308E12, 54025.99999999999], [1.71244278E12, 32340.0], [1.71244296E12, 51993.75], [1.71244314E12, 54543.049999999996], [1.71244284E12, 46963.25], [1.71244302E12, 53173.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1355.0, "minX": 1.0, "maxY": 44070.5, "series": [{"data": [[2.0, 39087.0], [8.0, 40308.0], [9.0, 37023.0], [10.0, 41813.0], [11.0, 44070.5], [3.0, 39928.0], [12.0, 42817.5], [15.0, 42854.5], [1.0, 37062.0], [4.0, 38438.0], [5.0, 39178.0], [6.0, 39386.5], [7.0, 43034.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1826.0], [8.0, 1517.0], [2.0, 1355.0], [5.0, 3648.0], [11.0, 8031.0], [3.0, 1854.5], [12.0, 1437.0], [15.0, 1443.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1354.0, "minX": 1.0, "maxY": 44070.5, "series": [{"data": [[2.0, 39087.0], [8.0, 40308.0], [9.0, 37023.0], [10.0, 41813.0], [11.0, 44070.5], [3.0, 39928.0], [12.0, 42817.5], [15.0, 42854.5], [1.0, 37061.5], [4.0, 38438.0], [5.0, 39178.0], [6.0, 39386.5], [7.0, 43034.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1825.0], [8.0, 1517.0], [2.0, 1354.0], [5.0, 3648.0], [11.0, 8031.0], [3.0, 1854.5], [12.0, 1437.0], [15.0, 1443.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.71244278E12, "maxY": 3.216666666666667, "series": [{"data": [[1.7124432E12, 0.13333333333333333], [1.7124429E12, 2.1666666666666665], [1.71244308E12, 2.35], [1.71244278E12, 2.0166666666666666], [1.71244296E12, 2.533333333333333], [1.71244314E12, 1.75], [1.71244284E12, 3.216666666666667], [1.71244302E12, 2.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124432E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244278E12, "maxY": 3.066666666666667, "series": [{"data": [[1.7124432E12, 0.8], [1.7124429E12, 2.15], [1.71244308E12, 2.3833333333333333], [1.71244278E12, 0.26666666666666666], [1.71244296E12, 2.533333333333333], [1.71244314E12, 2.7], [1.71244284E12, 3.066666666666667], [1.71244302E12, 2.4833333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7124429E12, 0.016666666666666666], [1.71244278E12, 0.08333333333333333], [1.71244314E12, 0.016666666666666666], [1.71244284E12, 0.15], [1.71244302E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7124432E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244278E12, "maxY": 3.066666666666667, "series": [{"data": [[1.7124429E12, 0.016666666666666666], [1.71244278E12, 0.08333333333333333], [1.71244314E12, 0.016666666666666666], [1.71244284E12, 0.15], [1.71244302E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request (light image)-failure", "isController": false}, {"data": [[1.7124432E12, 0.8], [1.7124429E12, 2.15], [1.71244308E12, 2.3833333333333333], [1.71244278E12, 0.26666666666666666], [1.71244296E12, 2.533333333333333], [1.71244314E12, 2.7], [1.71244284E12, 3.066666666666667], [1.71244302E12, 2.4833333333333334]], "isOverall": false, "label": "HTTP Request (light image)-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7124432E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71244278E12, "maxY": 3.066666666666667, "series": [{"data": [[1.7124432E12, 0.8], [1.7124429E12, 2.15], [1.71244308E12, 2.3833333333333333], [1.71244278E12, 0.26666666666666666], [1.71244296E12, 2.533333333333333], [1.71244314E12, 2.7], [1.71244284E12, 3.066666666666667], [1.71244302E12, 2.4833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7124429E12, 0.016666666666666666], [1.71244278E12, 0.08333333333333333], [1.71244314E12, 0.016666666666666666], [1.71244284E12, 0.15], [1.71244302E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7124432E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

